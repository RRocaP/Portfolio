---
import { metrics, researchMilestones } from '../data/metrics.ts';
import Icon from './Icon.astro';

interface Props {
  lang?: 'en' | 'es' | 'ca';
}

const { lang = 'en' } = Astro.props;

const translations = {
  en: {
    title: 'Academic Achievement Dashboard',
    researchImpact: 'Research Impact',
    careerMilestones: 'Career Milestones',
    impactMetrics: 'Impact Metrics',
    citationTrend: 'Citation Trend',
    publicationGrowth: 'Publication Growth',
    collaborationReach: 'Collaboration Reach',
    journalPrestige: 'Journal Prestige',
    viewDetails: 'View Details',
    since: 'Since',
    total: 'Total',
    average: 'Average',
    growth: 'Growth',
    international: 'International',
    national: 'National',
    institutional: 'Institutional'
  },
  es: {
    title: 'Panel de Logros Académicos',
    researchImpact: 'Impacto Investigador',
    careerMilestones: 'Hitos Profesionales',
    impactMetrics: 'Métricas de Impacto',
    citationTrend: 'Tendencia de Citas',
    publicationGrowth: 'Crecimiento de Publicaciones',
    collaborationReach: 'Alcance de Colaboración',
    journalPrestige: 'Prestigio de Revistas',
    viewDetails: 'Ver Detalles',
    since: 'Desde',
    total: 'Total',
    average: 'Promedio',
    growth: 'Crecimiento',
    international: 'Internacional',
    national: 'Nacional',
    institutional: 'Institucional'
  },
  ca: {
    title: 'Tauler de Fites Acadèmiques',
    researchImpact: 'Impacte Investigador',
    careerMilestones: 'Fites Professionals',
    impactMetrics: 'Mètriques d\'Impacte',
    citationTrend: 'Tendència de Citacions',
    publicationGrowth: 'Creixement de Publicacions',
    collaborationReach: 'Abast de Col·laboració',
    journalPrestige: 'Prestigi de Revistes',
    viewDetails: 'Veure Detalls',
    since: 'Des de',
    total: 'Total',
    average: 'Mitjana',
    growth: 'Creixement',
    international: 'Internacional',
    national: 'Nacional',
    institutional: 'Institucional'
  }
};

const t = translations[lang];

// Calculate achievement metrics
const achievementData = {
  impactScore: metrics.impactScore || 85,
  citationVelocity: Math.round(metrics.citations / metrics.years),
  collaborationIndex: Math.round((metrics.collaborations / metrics.publications) * 10) / 10,
  internationalReach: Math.round((metrics.internationalCollaborations || 15) / metrics.collaborations * 100),
  journalQuality: 78, // Estimated based on journal distribution
  careerProgress: Math.round((2024 - 2017) / 15 * 100) // Progress toward 15-year career milestone
};

const progressMetrics = [
  {
    label: t.citationTrend,
    value: achievementData.citationVelocity,
    max: 50,
    unit: 'per year',
    color: 'bg-green-500',
    icon: 'trending-up'
  },
  {
    label: t.collaborationReach,
    value: achievementData.internationalReach,
    max: 100,
    unit: '%',
    color: 'bg-blue-500',
    icon: 'globe'
  },
  {
    label: t.journalPrestige,
    value: achievementData.journalQuality,
    max: 100,
    unit: 'score',
    color: 'bg-purple-500',
    icon: 'academic-cap'
  },
  {
    label: 'Career Progress',
    value: achievementData.careerProgress,
    max: 100,
    unit: '%',
    color: 'bg-orange-500',
    icon: 'chart-pie'
  }
];

const recentMilestones = researchMilestones
  .filter(milestone => parseInt(milestone.year) >= 2022)
  .sort((a, b) => parseInt(b.year) - parseInt(a.year))
  .slice(0, 4);
---

<div class="academic-achievement-dashboard" role="region" aria-labelledby="achievement-heading">
  <!-- Header -->
  <div class="text-center mb-12">
    <h2 id="achievement-heading" class="text-heading-xl mb-4 text-white">{t.title}</h2>
    <div class="w-24 h-1 bg-gradient-to-r from-red-600 to-red-400 mx-auto mb-6"></div>
  </div>

  <div class="grid lg:grid-cols-2 gap-8">
    <!-- Impact Metrics Section -->
    <div class="space-y-6">
      <div class="flex items-center gap-3 mb-6">
        <Icon name="chart-bar" size="lg" class="text-red-400" />
        <h3 class="text-heading-lg text-white">{t.impactMetrics}</h3>
      </div>

      <!-- Primary Impact Score -->
      <div class="relative p-8 bg-surface border border-gray-800 rounded-2xl">
        <div class="text-center mb-6">
          <div class="text-display-sm font-bold text-white mb-2">{achievementData.impactScore}</div>
          <div class="text-body text-gray-400">{t.researchImpact}</div>
        </div>
        
        <!-- Circular progress indicator -->
        <div class="relative w-32 h-32 mx-auto mb-6">
          <svg class="w-32 h-32 transform -rotate-90" viewBox="0 0 120 120">
            <!-- Background circle -->
            <circle
              cx="60"
              cy="60"
              r="50"
              stroke="currentColor"
              stroke-width="8"
              fill="none"
              class="text-gray-700"
            />
            <!-- Progress circle -->
            <circle
              cx="60"
              cy="60"
              r="50"
              stroke="currentColor"
              stroke-width="8"
              fill="none"
              stroke-linecap="round"
              class="text-red-500 transition-all duration-2000 ease-out"
              style={`stroke-dasharray: ${2 * Math.PI * 50}; stroke-dashoffset: ${2 * Math.PI * 50 * (1 - achievementData.impactScore / 100)}`}
              data-animate="circle"
            />
          </svg>
          <div class="absolute inset-0 flex items-center justify-center">
            <Icon name="lightning-bolt" size="xl" class="text-red-400" />
          </div>
        </div>

        <!-- Impact breakdown -->
        <div class="grid grid-cols-2 gap-4 text-center">
          <div>
            <div class="text-heading-sm text-white font-bold">{metrics.citations}</div>
            <div class="text-caption text-gray-400">Citations</div>
          </div>
          <div>
            <div class="text-heading-sm text-white font-bold">{metrics.hIndex}</div>
            <div class="text-caption text-gray-400">h-index</div>
          </div>
        </div>
      </div>

      <!-- Progress Bars -->
      <div class="space-y-4">
        {progressMetrics.map((metric, index) => (
          <div 
            class="p-4 bg-surface border border-gray-800 rounded-xl"
            style={`animation-delay: ${index * 0.2}s`}
          >
            <div class="flex items-center justify-between mb-3">
              <div class="flex items-center gap-3">
                <Icon name={metric.icon} size="md" class="text-gray-400" />
                <span class="text-body text-white">{metric.label}</span>
              </div>
              <span class="text-body-sm text-gray-300 font-medium">
                {metric.value}{metric.unit}
              </span>
            </div>
            
            <div class="w-full bg-gray-700 rounded-full h-3">
              <div 
                class={`h-3 rounded-full ${metric.color} transition-all duration-1500 ease-out`}
                style={`width: ${(metric.value / metric.max) * 100}%`}
                data-animate="progress"
                data-value={metric.value}
                data-max={metric.max}
              ></div>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Career Milestones Section -->
    <div class="space-y-6">
      <div class="flex items-center gap-3 mb-6">
        <Icon name="trophy" size="lg" class="text-yellow-400" />
        <h3 class="text-heading-lg text-white">{t.careerMilestones}</h3>
      </div>

      <!-- Timeline -->
      <div class="relative">
        <!-- Timeline line -->
        <div class="absolute left-6 top-0 bottom-0 w-0.5 bg-gradient-to-b from-red-500 via-yellow-500 to-green-500"></div>
        
        <div class="space-y-6">
          {recentMilestones.map((milestone, index) => (
            <div 
              class="relative flex items-start gap-6 group"
              style={`animation-delay: ${index * 0.3}s`}
            >
              <!-- Timeline dot -->
              <div class={`relative z-10 w-12 h-12 rounded-full border-4 border-gray-900 flex items-center justify-center flex-shrink-0`}
                   style={`background-color: ${milestone.color}`}>
                <Icon 
                  name={milestone.type === 'publication' ? 'document' : 
                        milestone.type === 'position' ? 'briefcase' : 
                        milestone.type === 'award' ? 'trophy' : 'star'} 
                  size="md" 
                  class="text-white" 
                />
              </div>
              
              <!-- Content -->
              <div class="flex-1 p-6 bg-surface border border-gray-800 rounded-xl group-hover:border-gray-700 transition-colors">
                <div class="flex items-start justify-between mb-3">
                  <h4 class="text-heading-sm text-white">{milestone.title}</h4>
                  <span class="text-caption text-gray-400 font-medium">{milestone.year}</span>
                </div>
                
                <p class="text-body text-gray-400 mb-3">{milestone.description}</p>
                
                {milestone.impact && (
                  <div class="inline-flex items-center gap-2 px-3 py-1 bg-green-600/10 border border-green-600/20 rounded-full">
                    <Icon name="fire" size="xs" class="text-green-400" />
                    <span class="text-caption text-green-300">{milestone.impact}</span>
                  </div>
                )}
                
                {milestone.institution && (
                  <div class="mt-2 text-caption text-gray-500">
                    @ {milestone.institution}
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Summary stats -->
      <div class="p-6 bg-gradient-to-r from-gray-900/50 to-gray-800/50 border border-gray-800 rounded-xl">
        <div class="grid grid-cols-3 gap-4 text-center">
          <div>
            <div class="text-heading-md text-white font-bold">{recentMilestones.length}</div>
            <div class="text-caption text-gray-400">Recent Milestones</div>
          </div>
          <div>
            <div class="text-heading-md text-white font-bold">{metrics.years}</div>
            <div class="text-caption text-gray-400">Years Active</div>
          </div>
          <div>
            <div class="text-heading-md text-white font-bold">{metrics.journals}</div>
            <div class="text-caption text-gray-400">Journal Venues</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .academic-achievement-dashboard {
    animation: fadeInUp 0.8s ease-out;
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(40px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Timeline animations */
  .academic-achievement-dashboard .relative.flex {
    animation: slideInLeft 0.6s ease-out;
    animation-fill-mode: both;
  }
  
  @keyframes slideInLeft {
    from {
      opacity: 0;
      transform: translateX(-30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  
  /* Progress bar animations */
  [data-animate="progress"] {
    width: 0% !important;
    transition: width 1.5s ease-out;
  }
  
  [data-animate="circle"] {
    stroke-dashoffset: 314px; /* Full circle */
    transition: stroke-dashoffset 2s ease-out;
  }
  
  /* Hover effects */
  .group:hover [data-animate="circle"] {
    filter: drop-shadow(0 0 8px currentColor);
  }
  
  /* Responsive design */
  @media (max-width: 1024px) {
    .academic-achievement-dashboard .grid.lg\\:grid-cols-2 {
      grid-template-columns: 1fr;
      gap: 2rem;
    }
  }
  
  /* Accessibility */
  @media (prefers-reduced-motion: reduce) {
    .academic-achievement-dashboard,
    .academic-achievement-dashboard * {
      animation: none !important;
      transition: none !important;
    }
  }
  
  @media (prefers-contrast: high) {
    .academic-achievement-dashboard .border {
      border-width: 2px;
    }
  }
</style>

<script>
  function initAchievementDashboard() {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Animate progress bars
          const progressBars = entry.target.querySelectorAll('[data-animate="progress"]');
          progressBars.forEach((bar: Element) => {
            const htmlBar = bar as HTMLElement;
            const value = parseInt(htmlBar.dataset.value || '0');
            const max = parseInt(htmlBar.dataset.max || '100');
            const percentage = (value / max) * 100;
            
            setTimeout(() => {
              htmlBar.style.width = `${percentage}%`;
            }, 100);
          });
          
          // Animate circular progress
          const circles = entry.target.querySelectorAll('[data-animate="circle"]');
          circles.forEach((circle: Element) => {
            const htmlCircle = circle as SVGCircleElement;
            setTimeout(() => {
              htmlCircle.style.strokeDashoffset = '31.4px'; // 10% of full circle
            }, 500);
          });
          
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);
    
    const dashboard = document.querySelector('.academic-achievement-dashboard');
    if (dashboard) {
      observer.observe(dashboard);
    }
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAchievementDashboard);
  } else {
    initAchievementDashboard();
  }
  
  // Add interaction handlers for accessibility
  document.querySelectorAll('.group').forEach(milestone => {
    milestone.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        milestone.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    });
  });
</script>