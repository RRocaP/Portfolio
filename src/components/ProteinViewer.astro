---
// This component will display a 3D protein viewer using NGL Viewer.
// It's designed to be stylish and match the existing aesthetic of the portfolio.
const { pdbId } = Astro.props;
---

<div class="protein-viewer-container">
  <div id={`ngl-viewer-${pdbId}`} style="width: 100%; height: 400px;"></div>
  <p class="viewer-caption">{pdbId ? `PDB: ${pdbId}` : 'Loading Protein...'}</p>
</div>

<script is:inline>
  // Load NGL Viewer library dynamically
  function loadNGLViewer() {
    return new Promise((resolve, reject) => {
      if (window.NGL) {
        resolve(window.NGL);
        return;
      }
      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/ngl@2.0.0-dev.37/dist/ngl.min.js';
      script.onload = () => resolve(window.NGL);
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }

  document.addEventListener('DOMContentLoaded', async () => {
    const pdbId = document.currentScript.closest('.protein-viewer-container').querySelector('.viewer-caption').textContent.split(': ')[1];
    if (!pdbId || pdbId === 'Loading Protein...') return; // Don't load if no PDB ID

    try {
      const NGL = await loadNGLViewer();
      const stage = new NGL.Stage(`ngl-viewer-${pdbId}`);

      // Handle window resizing
      window.addEventListener("resize", function () {
        stage.handleResize();
      });

      // Load the PDB structure
      let proteinComponent; // Declare a variable to hold the protein component

      stage.loadFile(`rcsb://${pdbId}`, { defaultRepresentation: true }).then(function (component) {
        proteinComponent = component; // Assign the component to the variable
        // Clear default representation and add custom ones for better styling
        proteinComponent.removeAllRepresentations();

        // Add a cartoon representation with a nice color scheme
        proteinComponent.addRepresentation("cartoon", { color: "sstruc", smoothSheet: true, aspectRatio: 3 });

        // Add a ball and stick representation for side chains
        proteinComponent.addRepresentation("ballandstick", { sele: "sidechain and not hetero", color: "element" });

        // Add a licorice representation for hetero atoms (e.g., ligands, ions)
        proteinComponent.addRepresentation("licorice", { sele: "hetero", color: "element" });

        // Center and zoom to the loaded structure
        proteinComponent.autoView();

        // Add scroll-based rotation
        const viewerContainer = document.querySelector('.protein-viewer-container');
        let lastScrollY = window.scrollY;

        window.addEventListener('scroll', () => {
          if (!proteinComponent) return;

          const currentScrollY = window.scrollY;
          const scrollDelta = currentScrollY - lastScrollY;

          // Get the bounding rectangle of the viewer container
          const rect = viewerContainer.getBoundingClientRect();
          // Check if the viewer is in the viewport
          const inViewport = rect.top < window.innerHeight && rect.bottom > 0;

          if (inViewport) {
            // Adjust rotation speed as needed
            const rotationSpeed = 0.005;
            proteinComponent.rotateY(scrollDelta * rotationSpeed);
          }

          lastScrollY = currentScrollY;
        });
      });

    } catch (error) {
      // Failed to load NGL Viewer
    }
  });
</script>

<style>
  .protein-viewer-container {
    background: var(--background-alt);
    padding: var(--space-md);
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    margin-top: var(--space-lg);
    text-align: center;
    border: 1px solid var(--border);
    transition: all 0.3s ease;
  }

  .protein-viewer-container:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.08);
    border-color: var(--accent-red);
  }

  /* Dynamic ID for NGL Viewer */
  div[id^="ngl-viewer-"] {
    border-radius: 4px;
    overflow: hidden; /* Ensures the viewer respects border-radius */
    background-color: var(--background); /* Match background for seamless look */
  }

  .viewer-caption {
    margin-top: var(--space-md);
    font-size: 0.9rem;
    color: var(--secondary);
    font-style: italic;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .protein-viewer-container {
      padding: var(--space-sm);
    }
    div[id^="ngl-viewer-"] {
      height: 300px; /* Adjust height for smaller screens */
    }
  }

  /* Dark Mode adjustments for NGL Viewer background */
  @media (prefers-color-scheme: dark) {
    .protein-viewer-container {
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }
    div[id^="ngl-viewer-"] {
      background-color: #1a1a1a; /* Darker background for NGL Viewer in dark mode */
    }
  }
</style>