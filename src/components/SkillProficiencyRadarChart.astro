---
import Icon from './Icon.astro';

interface Props {
  lang?: 'en' | 'es' | 'ca';
}

const { lang = 'en' } = Astro.props;

const translations = {
  en: {
    title: 'Research Expertise & Skills',
    researchAreas: 'Research Areas',
    technicalSkills: 'Technical Skills',
    proficiencyLevel: 'Proficiency Level',
    yearsExperience: 'Years of Experience',
    publications: 'Publications',
    projects: 'Projects',
    collaborations: 'Collaborations',
    expertiseOverview: 'Expertise Overview',
    coreCompetencies: 'Core Competencies',
    emergingSkills: 'Emerging Skills',
    researchMethodologies: 'Research Methodologies',
    labTechniques: 'Laboratory Techniques',
    computationalTools: 'Computational Tools',
    domainExpertise: 'Domain Expertise',
    interdisciplinary: 'Interdisciplinary Skills',
    beginner: 'Beginner',
    intermediate: 'Intermediate',
    advanced: 'Advanced',
    expert: 'Expert',
    proficiencyDescription: 'Radar chart shows relative expertise levels across different research domains',
    skillCategories: 'Skill Categories'
  },
  es: {
    title: 'Experiencia en Investigación y Habilidades',
    researchAreas: 'Áreas de Investigación',
    technicalSkills: 'Habilidades Técnicas',
    proficiencyLevel: 'Nivel de Competencia',
    yearsExperience: 'Años de Experiencia',
    publications: 'Publicaciones',
    projects: 'Proyectos',
    collaborations: 'Colaboraciones',
    expertiseOverview: 'Resumen de Experiencia',
    coreCompetencies: 'Competencias Básicas',
    emergingSkills: 'Habilidades Emergentes',
    researchMethodologies: 'Metodologías de Investigación',
    labTechniques: 'Técnicas de Laboratorio',
    computationalTools: 'Herramientas Computacionales',
    domainExpertise: 'Experiencia de Dominio',
    interdisciplinary: 'Habilidades Interdisciplinarias',
    beginner: 'Principiante',
    intermediate: 'Intermedio',
    advanced: 'Avanzado',
    expert: 'Experto',
    proficiencyDescription: 'El gráfico de radar muestra los niveles de experiencia relativos en diferentes dominios de investigación',
    skillCategories: 'Categorías de Habilidades'
  },
  ca: {
    title: 'Experiència en Recerca i Habilitats',
    researchAreas: 'Àrees de Recerca',
    technicalSkills: 'Habilitats Tècniques',
    proficiencyLevel: 'Nivell de Competència',
    yearsExperience: 'Anys d\'Experiència',
    publications: 'Publicacions',
    projects: 'Projectes',
    collaborations: 'Col·laboracions',
    expertiseOverview: 'Resum d\'Experiència',
    coreCompetencies: 'Competències Bàsiques',
    emergingSkills: 'Habilitats Emergents',
    researchMethodologies: 'Metodologies de Recerca',
    labTechniques: 'Tècniques de Laboratori',
    computationalTools: 'Eines Computacionals',
    domainExpertise: 'Experiència de Domini',
    interdisciplinary: 'Habilitats Interdisciplinàries',
    beginner: 'Principiant',
    intermediate: 'Intermedi',
    advanced: 'Avançat',
    expert: 'Expert',
    proficiencyDescription: 'El gràfic de radar mostra els nivells d\'experiència relatius en diferents dominis de recerca',
    skillCategories: 'Categories d\'Habilitats'
  }
};

const t = translations[lang];

// Comprehensive skill data based on Ramon's research background
const skillsData = {
  researchAreas: [
    { 
      skill: 'Protein Engineering', 
      proficiency: 95, 
      years: 7, 
      publications: 8, 
      description: 'Design and optimization of antimicrobial proteins and therapeutic peptides',
      category: 'core'
    },
    { 
      skill: 'Gene Therapy', 
      proficiency: 90, 
      years: 3, 
      publications: 4, 
      description: 'AAV vector development and CAR-T cell engineering',
      category: 'core'
    },
    { 
      skill: 'Inclusion Bodies', 
      proficiency: 92, 
      years: 6, 
      publications: 5, 
      description: 'Functional protein aggregates and biomaterial applications',
      category: 'core'
    },
    { 
      skill: 'Antimicrobial Resistance', 
      proficiency: 88, 
      years: 5, 
      publications: 6, 
      description: 'Novel antimicrobial strategies and resistance mechanisms',
      category: 'core'
    },
    { 
      skill: 'Biotechnology', 
      proficiency: 85, 
      years: 8, 
      publications: 12, 
      description: 'Applied biotechnology and bioprocess development',
      category: 'interdisciplinary'
    },
    { 
      skill: 'Structural Biology', 
      proficiency: 75, 
      years: 4, 
      publications: 3, 
      description: 'Protein structure-function relationships',
      category: 'emerging'
    },
    { 
      skill: 'Cell Biology', 
      proficiency: 80, 
      years: 6, 
      publications: 7, 
      description: 'Cellular mechanisms and therapeutic applications',
      category: 'interdisciplinary'
    },
    { 
      skill: 'Nanotechnology', 
      proficiency: 72, 
      years: 3, 
      publications: 4, 
      description: 'Protein nanoparticles and nanomaterial applications',
      category: 'emerging'
    }
  ],
  technicalSkills: [
    { 
      skill: 'Protein Expression', 
      proficiency: 95, 
      years: 7, 
      description: 'E. coli and mammalian expression systems',
      category: 'core'
    },
    { 
      skill: 'Protein Purification', 
      proficiency: 92, 
      years: 7, 
      description: 'Chromatography and downstream processing',
      category: 'core'
    },
    { 
      skill: 'Molecular Cloning', 
      proficiency: 90, 
      years: 8, 
      description: 'DNA manipulation and vector construction',
      category: 'core'
    },
    { 
      skill: 'Cell Culture', 
      proficiency: 88, 
      years: 6, 
      description: 'Mammalian and bacterial cell culture',
      category: 'core'
    },
    { 
      skill: 'FPLC/HPLC', 
      proficiency: 85, 
      years: 5, 
      description: 'Analytical and preparative chromatography',
      category: 'core'
    },
    { 
      skill: 'Mass Spectrometry', 
      proficiency: 75, 
      years: 4, 
      description: 'Protein characterization and analysis',
      category: 'interdisciplinary'
    },
    { 
      skill: 'Microscopy', 
      proficiency: 78, 
      years: 5, 
      description: 'Fluorescence and electron microscopy',
      category: 'interdisciplinary'
    },
    { 
      skill: 'Bioinformatics', 
      proficiency: 70, 
      years: 3, 
      description: 'Protein modeling and sequence analysis',
      category: 'emerging'
    }
  ]
};

// Combine and normalize data for radar chart
const radarData = skillsData.researchAreas.slice(0, 8).map(skill => ({
  axis: skill.skill,
  value: skill.proficiency,
  years: skill.years,
  publications: skill.publications,
  description: skill.description,
  category: skill.category
}));

// Calculate aggregate metrics
const coreSkills = [...skillsData.researchAreas, ...skillsData.technicalSkills].filter(s => s.category === 'core');
const emergingSkills = [...skillsData.researchAreas, ...skillsData.technicalSkills].filter(s => s.category === 'emerging');
const averageProficiency = Math.round(radarData.reduce((sum, d) => sum + d.value, 0) / radarData.length);
---

<div class="skill-radar-viz" role="region" aria-labelledby="skills-heading">
  <!-- Header -->
  <div class="text-center mb-12">
    <h2 id="skills-heading" class="text-heading-xl mb-4 text-white">{t.title}</h2>
    <div class="w-24 h-1 bg-gradient-to-r from-purple-600 via-blue-400 to-cyan-400 mx-auto mb-6"></div>
    <p class="text-body text-gray-400 max-w-2xl mx-auto">
      {t.proficiencyDescription}
    </p>
  </div>

  <div class="grid lg:grid-cols-3 gap-8">
    <!-- Main Radar Chart -->
    <div class="lg:col-span-2 space-y-6">
      <!-- Radar Chart Container -->
      <div class="radar-container bg-surface border border-gray-800 rounded-2xl p-8">
        <div class="flex items-center justify-between mb-6">
          <h3 class="text-heading-lg text-white">{t.researchAreas}</h3>
          <div class="flex items-center gap-4 text-caption text-gray-400">
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 rounded-full bg-red-500"></div>
              <span>Core</span>
            </div>
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 rounded-full bg-yellow-400"></div>
              <span>Interdisciplinary</span>
            </div>
            <div class="flex items-center gap-2">
              <div class="w-3 h-3 rounded-full bg-cyan-400"></div>
              <span>Emerging</span>
            </div>
          </div>
        </div>
        <div class="radar-chart-wrapper" id="radar-chart"></div>
      </div>

      <!-- Technical Skills Grid -->
      <div class="skills-grid bg-surface border border-gray-800 rounded-2xl p-8">
        <h3 class="text-heading-lg text-white mb-6">{t.technicalSkills}</h3>
        <div class="grid md:grid-cols-2 gap-4">
          {skillsData.technicalSkills.map((skill, index) => (
            <div 
              class="skill-item p-4 bg-gray-800/30 border border-gray-700 rounded-lg"
              style={`animation-delay: ${index * 0.1}s`}
            >
              <div class="flex items-center justify-between mb-2">
                <h4 class="text-body-sm font-semibold text-white">{skill.skill}</h4>
                <span class="text-caption text-cyan-400 font-medium">{skill.proficiency}%</span>
              </div>
              <div class="w-full bg-gray-700 rounded-full h-2 mb-2">
                <div 
                  class="bg-gradient-to-r from-cyan-500 to-blue-500 h-2 rounded-full transition-all duration-1000"
                  style={`width: ${skill.proficiency}%`}
                  data-animate="progress"
                ></div>
              </div>
              <div class="flex items-center justify-between text-caption text-gray-400">
                <span>{skill.years} years</span>
                <span>{skill.description}</span>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>

    <!-- Skills Sidebar -->
    <div class="space-y-6">
      <!-- Expertise Overview -->
      <div class="overview-panel p-6 bg-surface border border-gray-800 rounded-2xl">
        <div class="flex items-center gap-3 mb-6">
          <Icon name="academic-cap" size="lg" class="text-purple-400" />
          <h3 class="text-heading-md text-white">{t.expertiseOverview}</h3>
        </div>
        
        <div class="space-y-4">
          <div class="metric-item text-center p-4 bg-purple-600/5 border border-purple-600/20 rounded-xl">
            <div class="text-display-sm font-bold text-white mb-2">{averageProficiency}%</div>
            <div class="text-body-sm text-purple-400">Average Proficiency</div>
          </div>
          
          <div class="grid grid-cols-3 gap-3 text-center">
            <div>
              <div class="text-heading-sm font-bold text-white">{coreSkills.length}</div>
              <div class="text-caption text-red-400">Core Skills</div>
            </div>
            <div>
              <div class="text-heading-sm font-bold text-white">8</div>
              <div class="text-caption text-yellow-400">Research Areas</div>
            </div>
            <div>
              <div class="text-heading-sm font-bold text-white">{emergingSkills.length}</div>
              <div class="text-caption text-cyan-400">Emerging</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Core Competencies -->
      <div class="competencies-panel p-6 bg-surface border border-gray-800 rounded-2xl">
        <div class="flex items-center gap-3 mb-6">
          <Icon name="star" size="lg" class="text-red-400" />
          <h3 class="text-heading-md text-white">{t.coreCompetencies}</h3>
        </div>
        
        <div class="space-y-3">
          {coreSkills.slice(0, 5).map((skill, index) => (
            <div 
              class="competency-item p-3 bg-red-600/5 border border-red-600/20 rounded-lg"
              style={`animation-delay: ${index * 0.1}s`}
            >
              <div class="flex items-center justify-between mb-1">
                <h4 class="text-body-sm font-medium text-white">{skill.skill}</h4>
                <div class="flex items-center gap-1">
                  {Array.from({length: 5}, (_, i) => (
                    <div 
                      class={`w-2 h-2 rounded-full ${
                        i < Math.floor(skill.proficiency / 20) ? 'bg-red-400' : 'bg-gray-600'
                      }`}
                    ></div>
                  ))}
                </div>
              </div>
              <div class="text-caption text-gray-400">{skill.years} years experience</div>
            </div>
          ))}
        </div>
      </div>

      <!-- Emerging Skills -->
      <div class="emerging-panel p-6 bg-surface border border-gray-800 rounded-2xl">
        <div class="flex items-center gap-3 mb-6">
          <Icon name="trending-up" size="lg" class="text-cyan-400" />
          <h3 class="text-heading-md text-white">{t.emergingSkills}</h3>
        </div>
        
        <div class="space-y-3">
          {emergingSkills.map((skill, index) => (
            <div 
              class="emerging-item p-3 bg-cyan-600/5 border border-cyan-600/20 rounded-lg"
              style={`animation-delay: ${index * 0.1}s`}
            >
              <div class="flex items-center justify-between mb-1">
                <h4 class="text-body-sm font-medium text-white">{skill.skill}</h4>
                <span class="text-caption text-cyan-400 font-medium">{skill.proficiency}%</span>
              </div>
              <div class="w-full bg-gray-700 rounded-full h-1.5 mb-1">
                <div 
                  class="bg-cyan-400 h-1.5 rounded-full transition-all duration-1000"
                  style={`width: ${skill.proficiency}%`}
                ></div>
              </div>
              <div class="text-caption text-gray-400">Growing expertise</div>
            </div>
          ))}
        </div>
      </div>

      <!-- Skill Development Trajectory -->
      <div class="trajectory-panel p-6 bg-gradient-to-br from-purple-600/10 to-cyan-600/10 border border-gray-800 rounded-2xl">
        <div class="flex items-center gap-3 mb-6">
          <Icon name="chart-line" size="lg" class="text-purple-400" />
          <h3 class="text-heading-md text-white">Development Focus</h3>
        </div>
        
        <div class="space-y-4">
          <div class="focus-item p-3 bg-black/20 rounded-lg">
            <div class="flex items-center gap-2 mb-2">
              <Icon name="beaker" size="sm" class="text-purple-400" />
              <span class="text-body-sm font-medium text-white">Advanced Gene Editing</span>
            </div>
            <div class="text-caption text-gray-400">CRISPR-Cas systems for therapeutic applications</div>
          </div>
          
          <div class="focus-item p-3 bg-black/20 rounded-lg">
            <div class="flex items-center gap-2 mb-2">
              <Icon name="cpu" size="sm" class="text-cyan-400" />
              <span class="text-body-sm font-medium text-white">AI-Driven Design</span>
            </div>
            <div class="text-caption text-gray-400">Machine learning for protein optimization</div>
          </div>
          
          <div class="focus-item p-3 bg-black/20 rounded-lg">
            <div class="flex items-center gap-2 mb-2">
              <Icon name="globe" size="sm" class="text-green-400" />
              <span class="text-body-sm font-medium text-white">Clinical Translation</span>
            </div>
            <div class="text-caption text-gray-400">Bridging research to therapeutic applications</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- D3.js for radar chart -->
<script src="https://d3js.org/d3.v7.min.js"></script>

<style>
  .skill-radar-viz {
    animation: fadeInUp 0.8s ease-out;
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(40px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .skill-item,
  .competency-item,
  .emerging-item,
  .focus-item {
    animation: fadeInLeft 0.6s ease-out both;
  }
  
  @keyframes fadeInLeft {
    from {
      opacity: 0;
      transform: translateX(-20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  
  .radar-container,
  .skills-grid {
    background: linear-gradient(135deg, rgba(23, 23, 23, 0.8) 0%, rgba(17, 24, 39, 0.6) 100%);
    backdrop-filter: blur(10px);
  }
  
  .overview-panel,
  .competencies-panel,
  .emerging-panel,
  .trajectory-panel {
    backdrop-filter: blur(10px);
  }
  
  /* Radar chart styles */
  .radar-chart-wrapper {
    height: 400px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .radar-area {
    fill-opacity: 0.2;
    stroke-width: 2;
  }
  
  .radar-axis {
    stroke: #374151;
    stroke-width: 1;
  }
  
  .radar-axis-label {
    font-size: 12px;
    fill: #F3F4F6;
    font-weight: 500;
  }
  
  .radar-grid {
    stroke: #4B5563;
    stroke-width: 0.5;
    fill: none;
    stroke-dasharray: 2,2;
  }
  
  .radar-point {
    fill: #FFFFFF;
    stroke-width: 3;
    cursor: pointer;
  }
  
  /* Skill tooltip */
  .skill-tooltip {
    position: absolute;
    padding: 12px 16px;
    background: rgba(17, 24, 39, 0.95);
    border: 1px solid #374151;
    border-radius: 8px;
    color: #F3F4F6;
    font-size: 12px;
    line-height: 1.4;
    pointer-events: none;
    backdrop-filter: blur(12px);
    z-index: 1000;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.4);
    max-width: 280px;
  }
  
  /* Responsive adjustments */
  @media (max-width: 1024px) {
    .skill-radar-viz .grid.lg\\:grid-cols-3 {
      grid-template-columns: 1fr;
    }
    
    .skill-radar-viz .lg\\:col-span-2 {
      grid-column: span 1;
    }
    
    .radar-chart-wrapper {
      height: 300px !important;
    }
  }
  
  /* Accessibility */
  @media (prefers-reduced-motion: reduce) {
    .skill-radar-viz,
    .skill-radar-viz * {
      animation: none !important;
      transition: none !important;
    }
  }
  
  @media (prefers-contrast: high) {
    .radar-container,
    .skills-grid,
    .overview-panel,
    .competencies-panel,
    .emerging-panel,
    .trajectory-panel {
      border-width: 2px;
    }
  }
</style>

<script>
  const skillData = [
    { axis: 'Protein Engineering', value: 95, years: 7, publications: 8, category: 'core', color: '#EF4444' },
    { axis: 'Gene Therapy', value: 90, years: 3, publications: 4, category: 'core', color: '#EF4444' },
    { axis: 'Inclusion Bodies', value: 92, years: 6, publications: 5, category: 'core', color: '#EF4444' },
    { axis: 'Antimicrobial Resistance', value: 88, years: 5, publications: 6, category: 'core', color: '#EF4444' },
    { axis: 'Biotechnology', value: 85, years: 8, publications: 12, category: 'interdisciplinary', color: '#FBBF24' },
    { axis: 'Structural Biology', value: 75, years: 4, publications: 3, category: 'emerging', color: '#22D3EE' },
    { axis: 'Cell Biology', value: 80, years: 6, publications: 7, category: 'interdisciplinary', color: '#FBBF24' },
    { axis: 'Nanotechnology', value: 72, years: 3, publications: 4, category: 'emerging', color: '#22D3EE' }
  ];

  function createRadarChart() {
    const container = d3.select('#radar-chart');
    if (container.empty()) return;

    // Clear previous content
    container.selectAll('*').remove();

    const margin = { top: 60, right: 60, bottom: 60, left: 60 };
    const width = container.node().getBoundingClientRect().width - margin.left - margin.right;
    const height = 350 - margin.top - margin.bottom;
    const radius = Math.min(width, height) / 2;

    const svg = container.append('svg')
      .attr('width', width + margin.left + margin.right)
      .attr('height', height + margin.top + margin.bottom)
      .append('g')
      .attr('transform', `translate(${width/2 + margin.left}, ${height/2 + margin.top})`);

    // Scales
    const angleScale = d3.scaleLinear()
      .domain([0, skillData.length])
      .range([0, 2 * Math.PI]);

    const radiusScale = d3.scaleLinear()
      .domain([0, 100])
      .range([0, radius]);

    // Draw grid circles
    const gridLevels = [20, 40, 60, 80, 100];
    gridLevels.forEach(level => {
      svg.append('circle')
        .attr('r', radiusScale(level))
        .attr('class', 'radar-grid')
        .style('stroke', level === 100 ? '#6B7280' : '#374151')
        .style('stroke-width', level === 100 ? 1 : 0.5)
        .style('fill', 'none')
        .style('stroke-dasharray', '2,2');

      // Add level labels
      if (level > 0) {
        svg.append('text')
          .attr('x', 5)
          .attr('y', -radiusScale(level) + 5)
          .style('font-size', '10px')
          .style('fill', '#9CA3AF')
          .text(level + '%');
      }
    });

    // Draw axes
    skillData.forEach((d, i) => {
      const angle = angleScale(i) - Math.PI / 2;
      const x = Math.cos(angle) * radius;
      const y = Math.sin(angle) * radius;

      svg.append('line')
        .attr('x1', 0)
        .attr('y1', 0)
        .attr('x2', x)
        .attr('y2', y)
        .attr('class', 'radar-axis');

      // Add axis labels
      const labelRadius = radius + 25;
      const labelX = Math.cos(angle) * labelRadius;
      const labelY = Math.sin(angle) * labelRadius;

      svg.append('text')
        .attr('x', labelX)
        .attr('y', labelY)
        .attr('class', 'radar-axis-label')
        .attr('text-anchor', 'middle')
        .attr('dominant-baseline', 'middle')
        .style('font-size', '11px')
        .style('font-weight', '500')
        .style('fill', '#F3F4F6')
        .text(d.axis)
        .call(wrap, 80); // Wrap long labels
    });

    // Create radar area
    const radarLine = d3.lineRadial()
      .angle((d, i) => angleScale(i))
      .radius(d => radiusScale(d.value))
      .curve(d3.curveLinearClosed);

    // Add main radar area
    svg.append('path')
      .datum(skillData)
      .attr('class', 'radar-area')
      .attr('d', radarLine)
      .style('fill', '#DA291C')
      .style('fill-opacity', 0.1)
      .style('stroke', '#DA291C')
      .style('stroke-width', 2)
      .style('stroke-opacity', 0.8);

    // Add data points
    const points = svg.selectAll('.radar-point')
      .data(skillData)
      .enter().append('circle')
      .attr('class', 'radar-point')
      .attr('cx', (d, i) => {
        const angle = angleScale(i) - Math.PI / 2;
        return Math.cos(angle) * radiusScale(d.value);
      })
      .attr('cy', (d, i) => {
        const angle = angleScale(i) - Math.PI / 2;
        return Math.sin(angle) * radiusScale(d.value);
      })
      .attr('r', 0)
      .style('fill', d => d.color)
      .style('stroke', '#0A0A0A')
      .style('stroke-width', 2)
      .style('cursor', 'pointer');

    // Animate points
    points.transition()
      .delay((d, i) => i * 100)
      .duration(600)
      .attr('r', 6);

    // Add interactivity
    points
      .on('mouseover', function(event, d) {
        d3.select(this)
          .transition().duration(200)
          .attr('r', 8)
          .style('stroke-width', 3);

        const tooltip = d3.select('body').append('div')
          .attr('class', 'skill-tooltip')
          .style('opacity', 0);

        tooltip.transition().duration(200).style('opacity', .95);
        tooltip.html(`
          <strong>${d.axis}</strong><br/>
          Proficiency: ${d.value}%<br/>
          Experience: ${d.years} years<br/>
          Publications: ${d.publications}<br/>
          Category: ${d.category.charAt(0).toUpperCase() + d.category.slice(1)}
        `)
          .style('left', (event.pageX + 10) + 'px')
          .style('top', (event.pageY - 10) + 'px');
      })
      .on('mousemove', function(event) {
        d3.select('.skill-tooltip')
          .style('left', (event.pageX + 10) + 'px')
          .style('top', (event.pageY - 10) + 'px');
      })
      .on('mouseout', function(event, d) {
        d3.select(this)
          .transition().duration(200)
          .attr('r', 6)
          .style('stroke-width', 2);

        d3.selectAll('.skill-tooltip').remove();
      });

    // Animate the radar area
    const totalLength = svg.select('.radar-area').node().getTotalLength();
    svg.select('.radar-area')
      .attr('stroke-dasharray', totalLength + ' ' + totalLength)
      .attr('stroke-dashoffset', totalLength)
      .transition()
      .duration(2000)
      .ease(d3.easeLinear)
      .attr('stroke-dashoffset', 0);
  }

  // Text wrapping function for axis labels
  function wrap(text, width) {
    text.each(function() {
      const text = d3.select(this);
      const words = text.text().split(/\s+/).reverse();
      let word;
      let line = [];
      let lineNumber = 0;
      const lineHeight = 1.1; // ems
      const y = text.attr('y');
      const dy = parseFloat(text.attr('dy')) || 0;
      let tspan = text.text(null).append('tspan').attr('x', 0).attr('y', y).attr('dy', dy + 'em');
      
      while (word = words.pop()) {
        line.push(word);
        tspan.text(line.join(' '));
        if (tspan.node().getComputedTextLength() > width) {
          line.pop();
          tspan.text(line.join(' '));
          line = [word];
          tspan = text.append('tspan').attr('x', 0).attr('y', y).attr('dy', ++lineNumber * lineHeight + dy + 'em').text(word);
        }
      }
    });
  }

  // Animate progress bars
  function animateProgressBars() {
    const progressBars = document.querySelectorAll('[data-animate="progress"]');
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting && !entry.target.dataset.animated) {
          entry.target.style.width = entry.target.style.width || '0%';
          entry.target.dataset.animated = 'true';
        }
      });
    }, { threshold: 0.1 });

    progressBars.forEach(bar => observer.observe(bar.parentElement));
  }

  // Initialize everything
  function initializeSkillsViz() {
    createRadarChart();
    animateProgressBars();
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeSkillsViz);
  } else {
    initializeSkillsViz();
  }

  // Handle window resize
  let resizeTimeout;
  window.addEventListener('resize', () => {
    clearTimeout(resizeTimeout);
    resizeTimeout = setTimeout(() => {
      createRadarChart();
    }, 250);
  });
</script>