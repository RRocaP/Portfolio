---
/**
 * Premium Scroll Animations Component
 * Implements magnetic buttons, scroll progress, and enhanced interactions
 */
export interface Props {
  enableMagneticButtons?: boolean;
  enableScrollProgress?: boolean;
  enableParallax?: boolean;
}

const { 
  enableMagneticButtons = true,
  enableScrollProgress = true,
  enableParallax = true 
} = Astro.props;
---

<!-- Scroll Progress Indicator -->
{enableScrollProgress && (
  <div class="scroll-progress-container">
    <div class="scroll-progress-bar" id="scrollProgress"></div>
  </div>
)}

<style>
  /* Scroll Progress Bar */
  .scroll-progress-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 3px;
    z-index: 9999;
    background: rgba(255, 255, 255, 0.05);
  }

  .scroll-progress-bar {
    height: 100%;
    width: 0%;
    background: linear-gradient(
      90deg,
      var(--accent-red, #DA291C) 0%,
      var(--accent-yellow, #FFD93D) 100%
    );
    transition: width 0.1s ease-out;
    box-shadow: 0 0 10px rgba(218, 41, 28, 0.5);
  }

  /* Magnetic Button Styles */
  .magnetic-button {
    position: relative;
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    will-change: transform;
  }

  .magnetic-button.active {
    transform: scale(1.05);
  }

  /* Loading Spinner */
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid rgba(255, 255, 255, 0.1);
    border-top: 3px solid var(--accent-red, #DA291C);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  .loading-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem;
    gap: 1rem;
  }

  .loading-text {
    color: rgba(255, 255, 255, 0.6);
    font-size: 0.875rem;
  }

  /* Parallax Elements */
  .parallax-element {
    will-change: transform;
    transition: transform 0.1s linear;
  }

  /* Smooth Fade In */
  .fade-in-element {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.8s ease-out, transform 0.8s ease-out;
  }

  .fade-in-element.visible {
    opacity: 1;
    transform: translateY(0);
  }

  /* Stagger Animation */
  .stagger-element {
    opacity: 0;
    transform: translateY(30px);
  }

  .stagger-element.visible {
    animation: staggerIn 0.6s ease-out forwards;
  }

  @keyframes staggerIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Smooth Scroll Hint */
  .scroll-hint {
    position: absolute;
    bottom: 2rem;
    left: 50%;
    transform: translateX(-50%);
    animation: bounce 2s infinite;
  }

  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateX(-50%) translateY(0);
    }
    40% {
      transform: translateX(-50%) translateY(-10px);
    }
    60% {
      transform: translateX(-50%) translateY(-5px);
    }
  }

  /* Mobile Responsive Adjustments */
  @media (max-width: 768px) {
    .scroll-progress-bar {
      height: 2px; /* Thinner on mobile */
    }
    
    .loading-spinner {
      width: 32px;
      height: 32px;
    }
    
    .scroll-hint {
      bottom: 1rem; /* Closer to bottom on mobile */
    }
  }
  
  /* Reduced Motion Support */
  @media (prefers-reduced-motion: reduce) {
    .magnetic-button,
    .parallax-element,
    .fade-in-element,
    .stagger-element {
      transition: none !important;
      animation: none !important;
    }
    
    .scroll-progress-bar {
      transition: none !important;
    }
  }
</style>

<script>
  import { getAnimationController, animations } from '../utils/animations';

  // Enhanced scroll animations using AnimationController
  class ScrollAnimations {
    private animationController = getAnimationController({
      enableDebugMode: false,
      enablePerformanceMonitoring: true,
      respectReducedMotion: true
    });
    
    private scrollProgress: HTMLElement | null;
    private magneticButtons: NodeListOf<Element>;
    private parallaxElements: NodeListOf<Element>;
    private fadeElements: NodeListOf<Element>;
    private staggerElements: NodeListOf<Element>;
    private lastScrollY: number = 0;
    private ticking: boolean = false;
    private prefersReducedMotion: boolean;

    constructor() {
      this.scrollProgress = document.getElementById('scrollProgress');
      this.magneticButtons = document.querySelectorAll('.magnetic-button, .btn-magnetic, button:not([data-no-magnetic])');
      this.parallaxElements = document.querySelectorAll('.parallax-element, [data-parallax]');
      this.fadeElements = document.querySelectorAll('.fade-in-element, [data-fade-in]');
      this.staggerElements = document.querySelectorAll('.stagger-element, [data-stagger]');
      
      // Check for reduced motion preference
      this.prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
      
      if (!this.prefersReducedMotion) {
        this.init();
      }
    }

    init() {
      // Initialize scroll progress
      if (this.scrollProgress) {
        this.initScrollProgress();
      }

      // Initialize magnetic buttons
      if (this.magneticButtons.length > 0) {
        this.initMagneticButtons();
      }

      // Initialize parallax
      if (this.parallaxElements.length > 0) {
        this.initParallax();
      }

      // Initialize fade in animations
      if (this.fadeElements.length > 0) {
        this.initFadeIn();
      }

      // Initialize stagger animations
      if (this.staggerElements.length > 0) {
        this.initStagger();
      }

      // Smooth scroll for anchor links
      this.initSmoothScroll();
    }

    initScrollProgress() {
      const updateProgress = () => {
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        const scrollHeight = document.documentElement.scrollHeight - document.documentElement.clientHeight;
        const scrollPercent = (scrollTop / scrollHeight) * 100;
        
        if (this.scrollProgress) {
          this.scrollProgress.style.width = `${scrollPercent}%`;
        }
      };

      window.addEventListener('scroll', () => {
        if (!this.ticking) {
          window.requestAnimationFrame(() => {
            updateProgress();
            this.ticking = false;
          });
          this.ticking = true;
        }
      });
    }

    initMagneticButtons() {
      // Use AnimationController for magnetic button effects
      this.magneticButtons.forEach((button, index) => {
        const btn = button as HTMLElement;
        const buttonId = `magnetic-button-${index}`;
        
        this.animationController.magneticButton(
          buttonId,
          btn,
          0.3, // strength
          'medium' // priority
        );
      });
    }

    initParallax() {
      // Use AnimationController for parallax effects
      this.parallaxElements.forEach((element, index) => {
        const el = element as HTMLElement;
        const speed = parseFloat(el.dataset.parallaxSpeed || '0.5');
        const parallaxId = `parallax-element-${index}`;
        
        this.animationController.parallax(
          parallaxId,
          el,
          speed,
          'low' // Low priority for background effects
        );
      });
    }

    initFadeIn() {
      // Use AnimationController for scroll-triggered fade-in animations
      this.fadeElements.forEach((element, index) => {
        const el = element as HTMLElement;
        const fadeId = `fade-in-${index}`;
        
        this.animationController.onScroll(
          fadeId,
          el,
          animations.fadeIn,
          {
            duration: 800,
            easing: 'cubic-bezier(0.2, 0.8, 0.2, 1)',
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
          }
        );
      });
    }

    initStagger() {
      // Use AnimationController for stagger animations
      this.staggerElements.forEach((element, index) => {
        const el = element as HTMLElement;
        const children = Array.from(el.children) as HTMLElement[];
        const staggerId = `stagger-group-${index}`;
        
        if (children.length > 0) {
          // Create intersection observer for this stagger group
          const observer = new IntersectionObserver(
            (entries) => {
              entries.forEach(entry => {
                if (entry.isIntersecting) {
                  // Use AnimationController's stagger method
                  this.animationController.stagger(
                    staggerId,
                    children,
                    animations.slideUp,
                    {
                      duration: 600,
                      easing: 'cubic-bezier(0.2, 0.8, 0.2, 1)',
                      staggerDelay: 100
                    }
                  );
                  observer.unobserve(entry.target);
                }
              });
            },
            {
              threshold: 0.1,
              rootMargin: '0px 0px -50px 0px'
            }
          );
          
          observer.observe(el);
        }
      });
    }

    initSmoothScroll() {
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', (e) => {
          e.preventDefault();
          const target = document.querySelector(anchor.getAttribute('href') || '');
          
          if (target) {
            const offset = 80; // Account for fixed header
            const targetPosition = target.getBoundingClientRect().top + window.pageYOffset - offset;
            
            window.scrollTo({
              top: targetPosition,
              behavior: 'smooth'
            });
          }
        });
      });
    }
  }

  // Initialize on DOM ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new ScrollAnimations());
  } else {
    new ScrollAnimations();
  }

  // Export for use in other components
  (window as any).ScrollAnimations = ScrollAnimations;
</script>