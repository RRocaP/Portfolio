---
import { researchMilestones } from '../data/metrics.ts';
import { publications } from '../data/publications.js';
import Icon from './Icon.astro';

interface Props {
  lang?: 'en' | 'es' | 'ca';
}

const { lang = 'en' } = Astro.props;

const translations = {
  en: {
    title: 'Research Timeline',
    careerProgression: 'Career Progression & Milestones',
    timeline: 'Timeline',
    milestones: 'Key Milestones',
    publications: 'Publications',
    achievements: 'Achievements',
    yearlyBreakdown: 'Yearly Breakdown',
    impactEvolution: 'Impact Evolution',
    researchPhases: 'Research Phases',
    currentPhase: 'Current Phase',
    nextMilestone: 'Next Milestone',
    totalMilestones: 'Total Milestones',
    activeYears: 'Active Years',
    majorBreakthroughs: 'Major Breakthroughs',
    viewDetails: 'View Details'
  },
  es: {
    title: 'Cronología de Investigación',
    careerProgression: 'Progresión Profesional e Hitos',
    timeline: 'Cronología',
    milestones: 'Hitos Clave',
    publications: 'Publicaciones',
    achievements: 'Logros',
    yearlyBreakdown: 'Desglose Anual',
    impactEvolution: 'Evolución del Impacto',
    researchPhases: 'Fases de Investigación',
    currentPhase: 'Fase Actual',
    nextMilestone: 'Próximo Hito',
    totalMilestones: 'Hitos Totales',
    activeYears: 'Años Activos',
    majorBreakthroughs: 'Avances Importantes',
    viewDetails: 'Ver Detalles'
  },
  ca: {
    title: 'Cronologia de Recerca',
    careerProgression: 'Progressió Professional i Fites',
    timeline: 'Cronologia',
    milestones: 'Fites Clau',
    publications: 'Publicacions',
    achievements: 'Assoliments',
    yearlyBreakdown: 'Desglossament Anual',
    impactEvolution: 'Evolució de l\'Impacte',
    researchPhases: 'Fases de Recerca',
    currentPhase: 'Fase Actual',
    nextMilestone: 'Propera Fita',
    totalMilestones: 'Fites Totals',
    activeYears: 'Anys Actius',
    majorBreakthroughs: 'Avanços Importants',
    viewDetails: 'Veure Detalls'
  }
};

const t = translations[lang];

// Process timeline data
const sortedMilestones = researchMilestones.sort((a, b) => parseInt(a.year) - parseInt(b.year));
const timelineYears = Array.from(new Set([
  ...researchMilestones.map(m => parseInt(m.year)),
  ...publications.map(p => parseInt(p.year))
])).sort();

// Create yearly breakdown with publications and milestones
const yearlyData = timelineYears.map(year => {
  const yearMilestones = researchMilestones.filter(m => parseInt(m.year) === year);
  const yearPublications = publications.filter(p => parseInt(p.year) === year);
  
  return {
    year,
    milestones: yearMilestones,
    publications: yearPublications,
    publicationCount: yearPublications.length,
    hasEvents: yearMilestones.length > 0 || yearPublications.length > 0
  };
});

// Research phases
const researchPhases = [
  {
    name: 'Foundation Phase',
    years: '2017-2019',
    description: 'Early research and PhD work',
    color: '#3B82F6',
    achievements: ['PhD start', 'First publications', 'Research methodology'],
    progress: 100
  },
  {
    name: 'Breakthrough Phase',
    years: '2020-2022',
    description: 'Major discoveries and recognition',
    color: '#10B981',
    achievements: ['Key publications', 'Method innovations', 'International recognition'],
    progress: 100
  },
  {
    name: 'Innovation Phase',
    years: '2023-Present',
    description: 'Leading research and new directions',
    color: '#EF4444',
    achievements: ['Leadership role', 'Cutting-edge research', 'Global impact'],
    progress: 75
  }
];

const timelineStats = {
  totalMilestones: researchMilestones.length,
  activeYears: timelineYears.length,
  majorBreakthroughs: researchMilestones.filter(m => m.type === 'publication' && m.impact).length,
  currentPhase: researchPhases[researchPhases.length - 1].name
};
---

<div class="enhanced-research-timeline" role="region" aria-labelledby="timeline-heading">
  <!-- Header -->
  <div class="text-center mb-12">
    <h2 id="timeline-heading" class="text-heading-xl mb-4 text-white">{t.title}</h2>
    <div class="w-24 h-1 bg-gradient-to-r from-purple-600 to-purple-400 mx-auto mb-6"></div>
    <p class="text-body text-gray-400 max-w-2xl mx-auto">{t.careerProgression}</p>
  </div>

  <div class="grid lg:grid-cols-4 gap-8">
    <!-- Main Timeline -->
    <div class="lg:col-span-3 space-y-8">
      <!-- Research Phases -->
      <div class="mb-8">
        <h3 class="text-heading-lg text-white mb-6 flex items-center gap-3">
          <Icon name="beaker" size="lg" class="text-purple-400" />
          {t.researchPhases}
        </h3>
        
        <div class="grid md:grid-cols-3 gap-4">
          {researchPhases.map((phase, index) => (
            <div 
              class="relative p-6 bg-surface border border-gray-800 rounded-2xl overflow-hidden"
              style={`animation-delay: ${index * 0.2}s`}
            >
              <!-- Progress background -->
              <div 
                class="absolute inset-0 opacity-10 transition-all duration-1000"
                style={`background: linear-gradient(135deg, ${phase.color}22 0%, transparent 50%); width: ${phase.progress}%`}
                data-animate="phase-bg"
                data-progress={phase.progress}
              ></div>
              
              <div class="relative z-10">
                <div class="flex items-center justify-between mb-4">
                  <h4 class="text-heading-sm text-white font-bold">{phase.name}</h4>
                  <span class="text-caption text-gray-400 font-medium">{phase.years}</span>
                </div>
                
                <p class="text-body-sm text-gray-400 mb-4">{phase.description}</p>
                
                <!-- Progress bar -->
                <div class="w-full bg-gray-700 rounded-full h-2 mb-4">
                  <div 
                    class="h-2 rounded-full transition-all duration-1500 ease-out"
                    style={`background-color: ${phase.color}; width: ${phase.progress}%`}
                    data-animate="progress"
                    data-width={phase.progress}
                  ></div>
                </div>
                
                <!-- Achievements -->
                <div class="space-y-2">
                  {phase.achievements.map((achievement, achievementIndex) => (
                    <div 
                      class="flex items-center gap-2 text-caption text-gray-300"
                      style={`animation-delay: ${(index * 0.2) + (achievementIndex * 0.1)}s`}
                    >
                      <div class="w-1.5 h-1.5 rounded-full" style={`background-color: ${phase.color}`}></div>
                      <span>{achievement}</span>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      <!-- Detailed Timeline -->
      <div class="relative">
        <h3 class="text-heading-lg text-white mb-8 flex items-center gap-3">
          <Icon name="clock" size="lg" class="text-purple-400" />
          {t.timeline}
        </h3>
        
        <!-- Timeline line -->
        <div class="absolute left-8 top-20 bottom-0 w-0.5 bg-gradient-to-b from-purple-500 via-blue-500 to-green-500" data-animate="timeline-line"></div>
        
        <div class="space-y-8">
          {yearlyData.filter(data => data.hasEvents).reverse().map((yearData, index) => (
            <div 
              class="relative flex items-start gap-8"
              style={`animation-delay: ${index * 0.15}s`}
            >
              <!-- Year marker -->
              <div class="relative z-10 flex-shrink-0">
                <div class="w-16 h-16 bg-surface border-4 border-purple-500 rounded-full flex items-center justify-center">
                  <span class="text-body-sm font-bold text-white">{yearData.year}</span>
                </div>
                
                <!-- Pulse effect for recent years -->
                {yearData.year >= 2022 && (
                  <div class="absolute inset-0 bg-purple-500 rounded-full animate-ping opacity-20"></div>
                )}
              </div>
              
              <!-- Year content -->
              <div class="flex-1 pb-8">
                <div class="flex items-center gap-4 mb-4">
                  <h4 class="text-heading-md text-white font-bold">{yearData.year}</h4>
                  {yearData.publicationCount > 0 && (
                    <span class="px-3 py-1 bg-blue-600/10 border border-blue-600/20 rounded-full text-caption text-blue-300">
                      {yearData.publicationCount} {t.publications}
                    </span>
                  )}
                </div>
                
                <!-- Milestones -->
                {yearData.milestones.length > 0 && (
                  <div class="space-y-4 mb-6">
                    {yearData.milestones.map((milestone, milestoneIndex) => (
                      <div 
                        class="p-4 bg-surface border border-gray-800 rounded-xl"
                        style={`animation-delay: ${(index * 0.15) + (milestoneIndex * 0.1)}s`}
                      >
                        <div class="flex items-start gap-4">
                          <div class={`p-3 rounded-xl flex-shrink-0`} style={`background-color: ${milestone.color}22; border: 1px solid ${milestone.color}44`}>
                            <Icon 
                              name={milestone.type === 'publication' ? 'document' : 
                                    milestone.type === 'position' ? 'briefcase' : 
                                    milestone.type === 'award' ? 'trophy' : 'star'} 
                              size="md" 
                              style={`color: ${milestone.color}`}
                            />
                          </div>
                          
                          <div class="flex-1">
                            <h5 class="text-body font-medium text-white mb-2">{milestone.title}</h5>
                            <p class="text-body-sm text-gray-400 mb-3">{milestone.description}</p>
                            
                            {milestone.impact && (
                              <div class="inline-flex items-center gap-2 px-3 py-1 bg-green-600/10 border border-green-600/20 rounded-full text-caption text-green-300">
                                <Icon name="lightning-bolt" size="xs" />
                                {milestone.impact}
                              </div>
                            )}
                            
                            {milestone.institution && (
                              <div class="mt-2 text-caption text-gray-500">
                                @ {milestone.institution}
                              </div>
                            )}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
                
                <!-- Publications for the year -->
                {yearData.publications.length > 0 && (
                  <div class="grid gap-3">
                    {yearData.publications.slice(0, 2).map((pub, pubIndex) => (
                      <div 
                        class="p-3 bg-gray-800/30 border border-gray-700 rounded-lg"
                        style={`animation-delay: ${(index * 0.15) + 0.3 + (pubIndex * 0.05)}s`}
                      >
                        <div class="flex items-start justify-between gap-3">
                          <div class="flex-1">
                            <h6 class="text-body-sm font-medium text-white mb-1">{pub.title}</h6>
                            <div class="flex items-center gap-3 text-caption text-gray-400">
                              <span>{pub.journal}</span>
                              {pub.featured && (
                                <>
                                  <span>•</span>
                                  <span class="text-yellow-400 flex items-center gap-1">
                                    <Icon name="star" size="xs" />
                                    Featured
                                  </span>
                                </>
                              )}
                            </div>
                          </div>
                          <a 
                            href={pub.url} 
                            target="_blank" 
                            rel="noopener noreferrer"
                            class="p-2 bg-blue-600/10 border border-blue-600/20 rounded-lg hover:bg-blue-600/20 transition-colors"
                            aria-label={`View publication: ${pub.title}`}
                          >
                            <Icon name="external-link" size="xs" class="text-blue-400" />
                          </a>
                        </div>
                      </div>
                    ))}
                    
                    {yearData.publications.length > 2 && (
                      <div class="text-caption text-gray-500 text-center">
                        +{yearData.publications.length - 2} more publications
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>

    <!-- Timeline Statistics -->
    <div class="space-y-6">
      <div class="flex items-center gap-3 mb-6">
        <Icon name="chart-bar" size="lg" class="text-purple-400" />
        <h3 class="text-heading-lg text-white">Timeline Stats</h3>
      </div>

      <!-- Key Statistics -->
      <div class="space-y-4">
        <div class="p-6 bg-surface border border-gray-800 rounded-2xl text-center">
          <div class="text-display-sm font-bold text-white mb-2">{timelineStats.totalMilestones}</div>
          <div class="text-body text-gray-400 mb-4">{t.totalMilestones}</div>
          
          <!-- Progress ring -->
          <div class="relative w-20 h-20 mx-auto">
            <svg class="w-20 h-20 transform -rotate-90" viewBox="0 0 64 64">
              <circle
                cx="32"
                cy="32"
                r="24"
                stroke="currentColor"
                stroke-width="4"
                fill="none"
                class="text-gray-700"
              />
              <circle
                cx="32"
                cy="32"
                r="24"
                stroke="currentColor"
                stroke-width="4"
                fill="none"
                stroke-linecap="round"
                class="text-purple-500 transition-all duration-2000 ease-out"
                style={`stroke-dasharray: ${2 * Math.PI * 24}; stroke-dashoffset: ${2 * Math.PI * 24 * 0.3}`}
                data-animate="circle"
              />
            </svg>
            <div class="absolute inset-0 flex items-center justify-center">
              <Icon name="trophy" size="lg" class="text-purple-400" />
            </div>
          </div>
        </div>
        
        <div class="space-y-3">
          <div class="p-4 bg-surface border border-gray-800 rounded-xl">
            <div class="flex items-center justify-between">
              <span class="text-body text-gray-300">{t.activeYears}</span>
              <span class="text-body-sm text-white font-medium">{timelineStats.activeYears}</span>
            </div>
          </div>
          
          <div class="p-4 bg-surface border border-gray-800 rounded-xl">
            <div class="flex items-center justify-between">
              <span class="text-body text-gray-300">{t.majorBreakthroughs}</span>
              <span class="text-body-sm text-white font-medium">{timelineStats.majorBreakthroughs}</span>
            </div>
          </div>
          
          <div class="p-4 bg-surface border border-gray-800 rounded-xl">
            <div class="flex items-center justify-between">
              <span class="text-body text-gray-300">{t.currentPhase}</span>
              <span class="text-body-sm text-white font-medium">Innovation</span>
            </div>
          </div>
        </div>
      </div>
      
      <!-- Current Phase Details -->
      <div class="p-6 bg-gradient-to-br from-purple-600/10 to-red-600/10 border border-gray-800 rounded-2xl">
        <div class="text-center">
          <Icon name="rocket" size="xl" class="text-purple-400 mx-auto mb-4" />
          <div class="text-heading-lg text-white font-bold mb-2">{t.currentPhase}</div>
          <div class="text-body text-gray-300 mb-4">Innovation Phase</div>
          <div class="text-caption text-gray-400 mb-4">Leading cutting-edge research at CMRI</div>
          
          <!-- Phase progress -->
          <div class="w-full bg-gray-700 rounded-full h-3">
            <div class="h-3 rounded-full bg-gradient-to-r from-purple-500 to-red-500 transition-all duration-1500 ease-out" style="width: 75%" data-animate="progress"></div>
          </div>
          <div class="text-caption text-gray-400 mt-2">75% Complete</div>
        </div>
      </div>
      
      <!-- Upcoming Milestones -->
      <div class="p-6 bg-surface border border-gray-800 rounded-2xl">
        <h4 class="text-heading-md text-white mb-4 flex items-center gap-2">
          <Icon name="calendar" size="md" class="text-yellow-400" />
          Upcoming Goals
        </h4>
        
        <div class="space-y-3">
          <div class="p-3 bg-yellow-600/5 border border-yellow-600/20 rounded-lg">
            <div class="text-body-sm text-white font-medium mb-1">Research Leadership</div>
            <div class="text-caption text-gray-400">Expand research team and international collaborations</div>
          </div>
          
          <div class="p-3 bg-blue-600/5 border border-blue-600/20 rounded-lg">
            <div class="text-body-sm text-white font-medium mb-1">Technology Transfer</div>
            <div class="text-caption text-gray-400">Translate research into clinical applications</div>
          </div>
          
          <div class="p-3 bg-green-600/5 border border-green-600/20 rounded-lg">
            <div class="text-body-sm text-white font-medium mb-1">Global Impact</div>
            <div class="text-caption text-gray-400">Establish international research consortiums</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .enhanced-research-timeline {
    animation: fadeInUp 0.8s ease-out;
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(40px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Timeline animations */
  .enhanced-research-timeline .relative.flex {
    animation: slideInLeft 0.6s ease-out;
    animation-fill-mode: both;
  }
  
  @keyframes slideInLeft {
    from {
      opacity: 0;
      transform: translateX(-30px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
  
  /* Timeline line animation */
  [data-animate="timeline-line"] {
    height: 0;
    transition: height 2s ease-out;
  }
  
  /* Progress animations */
  [data-animate="progress"] {
    width: 0% !important;
    transition: width 1.5s ease-out;
  }
  
  [data-animate="phase-bg"] {
    width: 0% !important;
    transition: width 2s ease-out;
  }
  
  /* Responsive design */
  @media (max-width: 1024px) {
    .enhanced-research-timeline .grid.lg\\:grid-cols-4 {
      grid-template-columns: 1fr;
    }
    
    .enhanced-research-timeline .lg\\:col-span-3 {
      grid-column: span 1;
    }
  }
  
  @media (max-width: 768px) {
    .enhanced-research-timeline .grid.md\\:grid-cols-3 {
      grid-template-columns: 1fr;
    }
    
    .enhanced-research-timeline .absolute.left-8 {
      left: 2rem;
    }
    
    .enhanced-research-timeline .gap-8 {
      gap: 1.5rem;
    }
  }
  
  /* Accessibility */
  @media (prefers-reduced-motion: reduce) {
    .enhanced-research-timeline,
    .enhanced-research-timeline * {
      animation: none !important;
      transition: none !important;
    }
  }
  
  @media (prefers-contrast: high) {
    .enhanced-research-timeline .border {
      border-width: 2px;
    }
  }
</style>

<script>
  function initTimelineViz() {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Animate timeline line
          const timelineLine = entry.target.querySelector('[data-animate="timeline-line"]');
          if (timelineLine) {
            setTimeout(() => {
              (timelineLine as HTMLElement).style.height = '100%';
            }, 500);
          }
          
          // Animate progress bars
          const progressBars = entry.target.querySelectorAll('[data-animate="progress"]');
          progressBars.forEach((bar: Element, index: number) => {
            const htmlBar = bar as HTMLElement;
            const width = htmlBar.dataset.width || htmlBar.style.width || '0%';
            setTimeout(() => {
              htmlBar.style.width = width;
            }, 1000 + (index * 200));
          });
          
          // Animate phase backgrounds
          const phaseBgs = entry.target.querySelectorAll('[data-animate="phase-bg"]');
          phaseBgs.forEach((bg: Element, index: number) => {
            const htmlBg = bg as HTMLElement;
            const progress = htmlBg.dataset.progress || '0';
            setTimeout(() => {
              htmlBg.style.width = `${progress}%`;
            }, 1500 + (index * 300));
          });
          
          // Animate circular progress
          const circles = entry.target.querySelectorAll('[data-animate="circle"]');
          circles.forEach((circle: Element) => {
            setTimeout(() => {
              (circle as SVGCircleElement).style.strokeDashoffset = '30px';
            }, 2000);
          });
          
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);
    
    const timeline = document.querySelector('.enhanced-research-timeline');
    if (timeline) {
      observer.observe(timeline);
    }
  }
  
  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initTimelineViz);
  } else {
    initTimelineViz();
  }
  
  // Add keyboard navigation for publication links
  document.querySelectorAll('.enhanced-research-timeline a[target="_blank"]').forEach(link => {
    link.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        (link as HTMLAnchorElement).click();
      }
    });
  });
</script>