---
---

<button 
  class="scroll-indicator"
  aria-label="Scroll down to about section"
  role="button"
  tabindex="0"
>
  <div class="mouse" aria-hidden="true">
    <div class="wheel"></div>
  </div>
  <span class="scroll-text">Scroll down</span>
  <div class="arrow-down" aria-hidden="true">
    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" role="presentation">
      <path d="M12 5v14"/>
      <path d="m19 12-7 7-7-7"/>
    </svg>
  </div>
</button>

<style>
  .scroll-indicator {
    position: fixed;
    bottom: 30px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 10px;
    z-index: 100;
    opacity: 1;
    transition: opacity 0.3s ease;
    animation: fade-in-bounce 2s ease-out;
  }

  .scroll-indicator.hidden {
    opacity: 0;
    pointer-events: none;
  }

  .mouse {
    width: 24px;
    height: 40px;
    border: 2px solid var(--accent-red);
    border-radius: 12px;
    position: relative;
    background: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
  }

  .wheel {
    width: 4px;
    height: 8px;
    background: var(--accent-red);
    border-radius: 2px;
    position: absolute;
    top: 8px;
    left: 50%;
    transform: translateX(-50%);
    animation: scroll-wheel 2s infinite;
  }

  .scroll-text {
    font-size: 12px;
    color: var(--accent-red);
    font-weight: var(--font-weight-medium);
    letter-spacing: 0.5px;
    text-transform: uppercase;
    opacity: 0.8;
  }

  .arrow-down {
    width: 16px;
    height: 16px;
    color: var(--accent-red);
    animation: bounce-arrow 2s infinite;
  }

  @keyframes scroll-wheel {
    0% {
      top: 8px;
      opacity: 1;
    }
    50% {
      top: 16px;
      opacity: 0.5;
    }
    100% {
      top: 24px;
      opacity: 0;
    }
  }

  @keyframes bounce-arrow {
    0%, 20%, 50%, 80%, 100% {
      transform: translateY(0);
    }
    40% {
      transform: translateY(-3px);
    }
    60% {
      transform: translateY(-2px);
    }
  }

  @keyframes fade-in-bounce {
    0% {
      opacity: 0;
      transform: translateX(-50%) translateY(20px);
    }
    50% {
      opacity: 0.7;
      transform: translateX(-50%) translateY(-5px);
    }
    100% {
      opacity: 1;
      transform: translateX(-50%) translateY(0);
    }
  }

  @media (max-width: 768px) {
    .scroll-indicator {
      bottom: 20px;
    }
    
    .scroll-text {
      font-size: 11px;
    }
  }

  /* Dark mode adjustments */
  @media (prefers-color-scheme: dark) {
    .mouse {
      background: rgba(0, 0, 0, 0.3);
      border-color: var(--accent-red);
    }
  }
</style>

<script>
  // Enhanced scroll indicator with accessibility and performance
  class ScrollIndicatorManager {
    constructor() {
      this.indicator = document.querySelector('.scroll-indicator');
      this.isVisible = true;
      this.scrollThreshold = 0.3; // 30% of viewport height
      
      this.init();
    }

    init() {
      if (!this.indicator) return;
      
      this.setupScrollHandler();
      this.setupClickHandler();
      this.setupKeyboardHandler();
    }

    setupScrollHandler() {
      let ticking = false;
      
      const handleScroll = () => {
        if (!ticking) {
          requestAnimationFrame(() => {
            this.updateVisibility();
            ticking = false;
          });
          ticking = true;
        }
      };

      // Use passive listener for better performance
      window.addEventListener('scroll', handleScroll, { passive: true });
      
      // Set initial state
      this.updateVisibility();
    }

    updateVisibility() {
      const scrollPosition = window.scrollY;
      const windowHeight = window.innerHeight;
      const shouldHide = scrollPosition > windowHeight * this.scrollThreshold;
      
      if (shouldHide !== !this.isVisible) {
        this.isVisible = !shouldHide;
        this.indicator.classList.toggle('hidden', shouldHide);
        
        // Update ARIA attributes for screen readers
        this.indicator.setAttribute('aria-hidden', shouldHide.toString());
        
        if (shouldHide) {
          this.indicator.setAttribute('tabindex', '-1');
        } else {
          this.indicator.setAttribute('tabindex', '0');
        }
      }
    }

    setupClickHandler() {
      this.indicator.addEventListener('click', (e) => {
        e.preventDefault();
        this.scrollToNextSection();
      });
    }

    setupKeyboardHandler() {
      this.indicator.addEventListener('keydown', (e) => {
        if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          this.scrollToNextSection();
        }
      });
    }

    scrollToNextSection() {
      const aboutSection = document.getElementById('about');
      
      if (aboutSection) {
        // Smooth scroll with better browser support
        if ('scrollBehavior' in document.documentElement.style) {
          aboutSection.scrollIntoView({ 
            behavior: 'smooth',
            block: 'start'
          });
        } else {
          // Fallback for older browsers
          const targetPosition = aboutSection.offsetTop - 80; // Account for fixed header
          window.scrollTo({
            top: targetPosition,
            behavior: 'smooth'
          });
        }
        
        // Focus management for accessibility
        setTimeout(() => {
          aboutSection.focus();
        }, 1000); // Wait for scroll to complete
      }
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new ScrollIndicatorManager());
  } else {
    new ScrollIndicatorManager();
  }
</script>