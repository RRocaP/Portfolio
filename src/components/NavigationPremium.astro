---
import Search from './Search.tsx';
import Icon from './Icon.astro';

// Use client-side language detection for static builds
const { pathname = '/' } = Astro.props;
const currentPath = pathname || (typeof Astro !== 'undefined' && Astro.url ? Astro.url.pathname : '/');
const currentLang = currentPath.includes('/es/') ? 'es' : currentPath.includes('/ca/') ? 'ca' : 'en';

const navItems = {
  en: [
    { href: '#home', label: 'Home' },
    { href: '#position', label: 'Position' },
    { href: '#about', label: 'About' },
    { href: '#research', label: 'Research' },
    { href: '#publications', label: 'Publications' },
    { href: '#contact', label: 'Contact' }
  ],
  es: [
    { href: '#home', label: 'Inicio' },
    { href: '#position', label: 'Posición' },
    { href: '#about', label: 'Acerca' },
    { href: '#research', label: 'Investigación' },
    { href: '#publications', label: 'Publicaciones' },
    { href: '#contact', label: 'Contacto' }
  ],
  ca: [
    { href: '#home', label: 'Inici' },
    { href: '#position', label: 'Posició' },
    { href: '#about', label: 'Sobre' },
    { href: '#research', label: 'Recerca' },
    { href: '#publications', label: 'Publicacions' },
    { href: '#contact', label: 'Contacte' }
  ]
};

const items = navItems[currentLang];
---

<!-- Skip to main content link for accessibility -->
<a href="#main-content" class="skip-link" tabindex="0">Skip to main content</a>

<!-- Navigation Progress Indicator -->
<div class="nav-progress" aria-hidden="true"></div>

<nav class="nav-premium" role="navigation" aria-label="Main navigation">
  <div class="nav-container">
    <!-- Logo with enhanced styling -->
    <a href={`/Portfolio/${currentLang}/`} class="nav-logo magnetic-button touch-feedback" aria-label="Ramon Roca Pinilla - Home">
      <span class="logo-text">RRP</span>
      <span class="logo-subtitle" aria-hidden="true">Portfolio</span>
    </a>
    
    <!-- Desktop Navigation Menu -->
    <ul class="nav-menu" role="menubar" aria-label="Site navigation" id="nav-menu">
      {items.map((item, index) => (
        <li role="none">
          <a 
            href={item.href} 
            class="nav-link magnetic-button touch-feedback" 
            role="menuitem"
            data-section={item.href.replace('#', '')}
            tabindex={index === 0 ? "0" : "-1"}
          >
            {item.label}
            <span class="nav-link-indicator" aria-hidden="true"></span>
          </a>
        </li>
      ))}
    </ul>
    
    <!-- Search Component -->
    <div class="nav-search">
      <Search lang={currentLang} className="search-compact" client:load />
    </div>
    
    <!-- Enhanced Language Switcher -->
    <div class="nav-lang" role="navigation" aria-label="Language selector">
      <div class="lang-dropdown">
        <button class="lang-toggle magnetic-button touch-feedback" aria-expanded="false" aria-haspopup="listbox">
          <Icon name="globe" size="sm" />
          <span class="lang-current">{currentLang.toUpperCase()}</span>
          <Icon name="chevron-down" size="xs" class="lang-chevron" />
        </button>
        <ul class="lang-menu" role="listbox">
          <li role="option" class={currentLang === 'en' ? 'active' : ''}>
            <a href="/Portfolio/en/" class="magnetic-button touch-feedback" aria-label="English" aria-current={currentLang === 'en' ? 'page' : undefined}>
              <span class="lang-code">EN</span>
              <span class="lang-name">English</span>
            </a>
          </li>
          <li role="option" class={currentLang === 'es' ? 'active' : ''}>
            <a href="/Portfolio/es/" class="magnetic-button touch-feedback" aria-label="Español" aria-current={currentLang === 'es' ? 'page' : undefined}>
              <span class="lang-code">ES</span>
              <span class="lang-name">Español</span>
            </a>
          </li>
          <li role="option" class={currentLang === 'ca' ? 'active' : ''}>
            <a href="/Portfolio/ca/" class="magnetic-button touch-feedback" aria-label="Català" aria-current={currentLang === 'ca' ? 'page' : undefined}>
              <span class="lang-code">CA</span>
              <span class="lang-name">Català</span>
            </a>
          </li>
        </ul>
      </div>
    </div>
    
    <!-- Enhanced Mobile Menu Toggle -->
    <button class="nav-toggle magnetic-button touch-feedback" aria-label="Toggle navigation menu" aria-expanded="false" aria-controls="nav-menu">
      <span class="hamburger-line"></span>
      <span class="hamburger-line"></span>
      <span class="hamburger-line"></span>
    </button>
  </div>
  
  <!-- Mobile Menu Overlay -->
  <div class="nav-overlay" aria-hidden="true">
    <div class="nav-overlay-content">
      <div class="nav-overlay-header">
        <a href={`/Portfolio/${currentLang}/`} class="nav-overlay-logo">
          <span class="logo-text">RRP</span>
        </a>
        <button class="nav-overlay-close" aria-label="Close navigation menu">
          <Icon name="x" size="lg" />
        </button>
      </div>
      
      <ul class="nav-overlay-menu" role="menubar">
        {items.map((item, index) => (
          <li role="none">
            <a 
              href={item.href} 
              class="nav-overlay-link magnetic-button touch-feedback" 
              role="menuitem"
              data-section={item.href.replace('#', '')}
              tabindex="-1"
            >
              <span class="nav-overlay-link-text">{item.label}</span>
              <Icon name="arrow-right" size="sm" class="nav-overlay-link-icon" />
            </a>
          </li>
        ))}
      </ul>
      
      <div class="nav-overlay-footer">
        <div class="nav-overlay-search">
          <Search lang={currentLang} className="search-overlay" client:load />
        </div>
        
        <div class="nav-overlay-lang">
          <h3 class="nav-overlay-lang-title">Language</h3>
          <div class="nav-overlay-lang-options">
            <a href="/Portfolio/en/" class={`nav-overlay-lang-option ${currentLang === 'en' ? 'active' : ''}`}>
              <span class="lang-code">EN</span>
              <span class="lang-name">English</span>
            </a>
            <a href="/Portfolio/es/" class={`nav-overlay-lang-option ${currentLang === 'es' ? 'active' : ''}`}>
              <span class="lang-code">ES</span>
              <span class="lang-name">Español</span>
            </a>
            <a href="/Portfolio/ca/" class={`nav-overlay-lang-option ${currentLang === 'ca' ? 'active' : ''}`}>
              <span class="lang-code">CA</span>
              <span class="lang-name">Català</span>
            </a>
          </div>
        </div>
      </div>
    </div>
  </div>
</nav>

<style>
  /* Enhanced GPU Acceleration for Navigation */
  .nav-premium,
  .nav-container,
  .nav-logo,
  .nav-link,
  .nav-lang a,
  .nav-toggle,
  .nav-menu {
    will-change: transform, opacity;
    transform: translate3d(0, 0, 0);
    backface-visibility: hidden;
    perspective: 1000px;
  }

  .nav-premium {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1000;
    background: radial-gradient(120% 100% at 50% -20%, rgba(15,15,15,0.75) 0%, rgba(10,10,10,0.72) 60%, rgba(10,10,10,0.7) 100%);
    backdrop-filter: blur(16px);
    border-bottom: 1px solid rgba(255, 255, 255, 0.05);
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1), background-color 0.3s ease, box-shadow 0.3s ease;
  }
  
  .nav-premium.scrolled {
    background: rgba(10, 10, 10, 0.95);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.35);
  }
  
  .nav-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1.25rem 2rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 2rem;
  }
  
  .nav-logo {
    font-size: 1.5rem;
    font-weight: 600;
    color: #FFFFFF;
    text-decoration: none;
    letter-spacing: -0.02em;
    transition: color 0.3s ease;
  }
  
  .logo-text {
    background: linear-gradient(135deg, #FFFFFF 0%, #DC2626 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }
  
  .nav-logo:hover .logo-text {
    background: linear-gradient(135deg, #DC2626 0%, #EF4444 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  
  .nav-menu {
    display: flex;
    list-style: none;
    gap: 2.5rem;
    margin: 0;
    padding: 0;
  }
  
  .nav-link {
    color: #B8B8B8; /* Better contrast */
    text-decoration: none;
    font-size: 0.9375rem;
    font-weight: 400;
    letter-spacing: 0.02em;
    transition: color 0.3s ease;
    position: relative;
  }
  
  .nav-link::after {
    content: '';
    position: absolute;
    bottom: -5px;
    left: 0;
    width: 0;
    height: 2px;
    background: #EF4444;
    transition: width 0.3s ease;
  }
  
  .nav-link:hover {
    color: #FFFFFF;
  }
  
  .nav-link:hover::after,
  .nav-link.active::after {
    width: 100%;
  }
  
  .nav-link.active {
    color: #FFFFFF;
  }
  
  .nav-lang {
    display: flex;
    gap: 0.75rem;
  }
  
  .nav-lang a {
    padding: 0.25rem 0.5rem; /* Smaller pills */
    color: #999999;
    font-size: 0.875rem;
    font-weight: 500;
    border: 1px solid transparent;
    border-radius: 6px;
    transition: all 0.3s ease;
  }
  
  .nav-lang a:hover {
    color: #FFFFFF;
    background: rgba(255, 255, 255, 0.05);
  }
  
  .nav-lang a.active {
    color: #EF4444; /* Better contrast */
    background: linear-gradient(180deg, rgba(239,68,68,0.14) 0%, rgba(239,68,68,0.08) 100%);
    border-color: rgba(239, 68, 68, 0.3);
  }
  
  .nav-search {
    flex: 1;
    max-width: 400px;
    min-width: 200px;
  }
  
  /* Compact search styles for navigation */
  .nav-search :global(.search-compact) {
    max-width: 100%;
  }
  
  .nav-search :global(.search-compact input) {
    height: 2.5rem;
    background: rgba(255, 255, 255, 0.05);
    border: 1px solid rgba(255, 255, 255, 0.1);
    font-size: 0.875rem;
    padding: 0.5rem 0.75rem 0.5rem 2.5rem;
  }
  
  .nav-search :global(.search-compact input:focus) {
    background: rgba(255, 255, 255, 0.08);
    border-color: rgba(239, 68, 68, 0.5);
  }
  
  .nav-toggle {
    display: none;
    flex-direction: column;
    gap: 4px;
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 0;
  }
  
  .nav-toggle span {
    width: 24px;
    height: 2px;
    background: #FFFFFF;
    border-radius: 2px;
    transition: all 0.3s ease;
  }
  
  /* Mobile styles */
  @media (max-width: 768px) {
    .nav-container {
      flex-wrap: wrap;
      gap: 1rem;
    }
    
    .nav-search {
      order: 3;
      flex-basis: 100%;
      max-width: none;
      margin-top: 0.5rem;
    }
    
    .nav-menu {
      position: fixed;
      left: 0;
      top: 72px;
      width: 100%;
      height: calc(100vh - 72px);
      background: rgba(10, 10, 10, 0.98);
      backdrop-filter: blur(20px);
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
      padding: 3rem 0;
      gap: 2rem;
      transform: translateX(100%);
      transition: transform 0.3s ease;
    }
    
    .nav-menu.active {
      transform: translateX(0);
    }
    
    .nav-toggle {
      display: flex;
    }
    
    .nav-toggle.active span:nth-child(1) {
      transform: rotate(45deg) translate(5px, 5px);
    }
    
    .nav-toggle.active span:nth-child(2) {
      opacity: 0;
    }
    
    .nav-toggle.active span:nth-child(3) {
      transform: rotate(-45deg) translate(5px, -5px);
    }
    
    .nav-lang {
      position: absolute;
      right: 60px;
    }
  }
  
  /* Ultra-mobile styles */
  @media (max-width: 480px) {
    .nav-container {
      padding: 1rem;
    }
    
    .nav-search {
      margin-top: 0.75rem;
    }
    
    .nav-search :global(.search-compact input) {
      font-size: 0.8rem;
      padding: 0.5rem 0.5rem 0.5rem 2rem;
    }
  }
</style>

<script>
  import { getAnimationController } from '../utils/animations';

  // ==========================================================================
  // Enhanced Navigation Controller with Premium UX
  // ==========================================================================

  class NavigationController {
    constructor() {
      this.nav = document.querySelector('.nav-premium');
      this.progress = document.querySelector('.nav-progress');
      this.toggle = document.querySelector('.nav-toggle');
      this.overlay = document.querySelector('.nav-overlay');
      this.overlayClose = document.querySelector('.nav-overlay-close');
      this.langToggle = document.querySelector('.lang-toggle');
      this.sections = document.querySelectorAll('section[id], div[id]');
      this.navLinks = document.querySelectorAll('.nav-link, .nav-overlay-link');
      
      this.lastScroll = 0;
      this.ticking = false;
      this.isOverlayOpen = false;
      
      this.init();
    }
    
    init() {
      this.setupScrollEffects();
      this.setupMobileMenu();
      this.setupSmoothScroll();
      this.setupScrollSpy();
      this.setupLanguageDropdown();
      this.setupAccessibility();
      
      // Initialize animation controller
      this.animationController = getAnimationController({
        enableGPUAcceleration: true,
        enableWillChangeManagement: true,
        enableHapticFeedback: true
      });
      
      this.registerMagneticEffects();
    }

    setupScrollEffects() {
      const updateNavigation = () => {
        const currentScroll = window.pageYOffset;
        const documentHeight = document.documentElement.scrollHeight - window.innerHeight;
        
        // Update progress bar
        if (this.progress) {
          const progress = Math.min((currentScroll / documentHeight) * 100, 100);
          this.progress.style.width = `${progress}%`;
        }
        
        // Hide/show nav based on scroll direction
        if (currentScroll > this.lastScroll && currentScroll > 100) {
          this.nav?.classList.add('hidden');
        } else {
          this.nav?.classList.remove('hidden');
        }
        
        // Add scrolled class for enhanced styling
        if (currentScroll > 50) {
          this.nav?.classList.add('scrolled');
        } else {
          this.nav?.classList.remove('scrolled');
        }
        
        this.lastScroll = currentScroll;
        this.ticking = false;
      };
      
      const requestTick = () => {
        if (!this.ticking) {
          requestAnimationFrame(updateNavigation);
          this.ticking = true;
        }
      };
      
      window.addEventListener('scroll', requestTick, { passive: true });
    }

    setupMobileMenu() {
      if (!this.toggle || !this.overlay) return;
      
      const toggleMenu = () => {
        this.isOverlayOpen = !this.isOverlayOpen;
        
        if (this.isOverlayOpen) {
          this.openOverlay();
        } else {
          this.closeOverlay();
        }
      };
      
      this.toggle.addEventListener('click', toggleMenu);
      this.overlayClose?.addEventListener('click', () => this.closeOverlay());
      
      // Close on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isOverlayOpen) {
          this.closeOverlay();
        }
      });
      
      // Close on overlay background click
      this.overlay.addEventListener('click', (e) => {
        if (e.target === this.overlay) {
          this.closeOverlay();
        }
      });
      
      // Close on link click
      this.overlay.querySelectorAll('.nav-overlay-link').forEach(link => {
        link.addEventListener('click', () => this.closeOverlay());
      });
    }

    openOverlay() {
      this.overlay?.classList.add('active');
      this.toggle?.classList.add('active');
      this.toggle?.setAttribute('aria-expanded', 'true');
      
      // Disable body scroll
      document.body.style.overflow = 'hidden';
      
      // Focus management
      setTimeout(() => {
        this.overlayClose?.focus();
      }, 100);
      
      // Haptic feedback
      if (navigator.vibrate) {
        navigator.vibrate(50);
      }
    }
    
    closeOverlay() {
      this.isOverlayOpen = false;
      this.overlay?.classList.remove('active');
      this.toggle?.classList.remove('active');
      this.toggle?.setAttribute('aria-expanded', 'false');
      
      // Re-enable body scroll
      document.body.style.overflow = '';
      
      // Return focus to toggle button
      this.toggle?.focus();
    }

    setupSmoothScroll() {
      this.navLinks.forEach(link => {
        if (link.getAttribute('href')?.startsWith('#')) {
          link.addEventListener('click', (e) => {
            e.preventDefault();
            
            const targetId = link.getAttribute('href')?.substring(1);
            const targetElement = document.getElementById(targetId);
            
            if (targetElement) {
              const headerOffset = 80; // Account for fixed header
              const elementPosition = targetElement.getBoundingClientRect().top;
              const offsetPosition = elementPosition + window.pageYOffset - headerOffset;
              
              window.scrollTo({
                top: offsetPosition,
                behavior: 'smooth'
              });
              
              // Close mobile menu if open
              if (this.isOverlayOpen) {
                this.closeOverlay();
              }
            }
          });
        }
      });
    }

    setupScrollSpy() {
      const updateActiveLink = () => {
        let current = '';
        const scrollPosition = window.scrollY + 100; // Offset for fixed header
        
        // Find current section
        this.sections.forEach(section => {
          const sectionTop = section.offsetTop;
          const sectionBottom = sectionTop + section.offsetHeight;
          
          if (scrollPosition >= sectionTop && scrollPosition < sectionBottom) {
            current = section.getAttribute('id') || '';
          }
        });
        
        // Update active states
        this.navLinks.forEach(link => {
          link.classList.remove('active');
          const href = link.getAttribute('href');
          if (href === `#${current}`) {
            link.classList.add('active');
          }
        });
      };
      
      // Throttled scroll listener for performance
      let scrollTimeout;
      const throttledUpdate = () => {
        if (scrollTimeout) clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(updateActiveLink, 16); // ~60fps
      };
      
      window.addEventListener('scroll', throttledUpdate, { passive: true });
      updateActiveLink(); // Set initial state
    }

    setupLanguageDropdown() {
      if (!this.langToggle) return;
      
      const langMenu = document.querySelector('.lang-menu');
      let isOpen = false;
      
      const toggleDropdown = () => {
        isOpen = !isOpen;
        this.langToggle?.setAttribute('aria-expanded', isOpen.toString());
      };
      
      this.langToggle.addEventListener('click', toggleDropdown);
      
      // Close on outside click
      document.addEventListener('click', (e) => {
        if (!this.langToggle?.contains(e.target) && !langMenu?.contains(e.target)) {
          isOpen = false;
          this.langToggle?.setAttribute('aria-expanded', 'false');
        }
      });
      
      // Close on escape
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && isOpen) {
          isOpen = false;
          this.langToggle?.setAttribute('aria-expanded', 'false');
          this.langToggle?.focus();
        }
      });
    }
    
    setupAccessibility() {
      // Enhanced keyboard navigation
      this.navLinks.forEach((link, index) => {
        link.addEventListener('keydown', (e) => {
          if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {
            e.preventDefault();
            const nextIndex = (index + 1) % this.navLinks.length;
            this.navLinks[nextIndex]?.focus();
          } else if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {
            e.preventDefault();
            const prevIndex = (index - 1 + this.navLinks.length) % this.navLinks.length;
            this.navLinks[prevIndex]?.focus();
          }
        });
      });
    }
    
    registerMagneticEffects() {
      // Register magnetic effects for interactive elements
      if (this.toggle) {
        this.animationController.magneticButton('nav-toggle', this.toggle, 0.2, 'high');
      }
      
      this.navLinks.forEach((link, index) => {
        this.animationController.magneticButton(`nav-link-${index}`, link, 0.15, 'medium');
      });
      
      const logo = document.querySelector('.nav-logo');
      if (logo) {
        this.animationController.magneticButton('nav-logo', logo, 0.1, 'medium');
      }
      
      const langToggle = document.querySelector('.lang-toggle');
      if (langToggle) {
        this.animationController.magneticButton('lang-toggle', langToggle, 0.1, 'medium');
      }
    }
  }
  
  // Initialize navigation controller
  document.addEventListener('DOMContentLoaded', () => {
    new NavigationController();
  });
  
  // Initialize immediately if DOM is already loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      new NavigationController();
    });
  } else {
    new NavigationController();
  }
</script>
