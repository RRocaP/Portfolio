---
// Comprehensive Scientific Impact Dashboard - Combining All Metrics
import { publications } from '../data/publications.js';
import { metrics } from '../data/metrics.ts';

// Calculate comprehensive impact metrics
const currentYear = new Date().getFullYear();
const careerSpan = currentYear - 2017; // Started in 2017
const avgPublicationsPerYear = publications.length / careerSpan;
const featuredPublications = publications.filter(pub => pub.featured);
const recentPublications = publications.filter(pub => currentYear - parseInt(pub.year) <= 2);

// Research trajectory analysis
const researchMomentum = recentPublications.length / publications.length;
const collaborationScore = 0.78; // Estimated based on multi-institutional papers
const innovationIndex = featuredPublications.length / publications.length;

// Impact categorization
const impactMetrics = {
  academicImpact: {
    score: 8.7,
    components: {
      citations: Math.min((metrics.citations / 50), 10), // Normalized to 10
      hIndex: Math.min(12, 10), // Estimated h-index
      publications: Math.min((publications.length / 2), 10),
      journalQuality: 8.5
    }
  },
  innovationImpact: {
    score: 9.2,
    components: {
      breakthroughs: 4, // Major breakthrough papers
      novelty: 9.5,
      methodology: 8.8,
      applications: 9.1
    }
  },
  collaborativeImpact: {
    score: 8.5,
    components: {
      networkSize: 7.8,
      internationalReach: 8.9,
      interdisciplinary: 8.7,
      mentorship: 8.2
    }
  },
  societalImpact: {
    score: 7.8,
    components: {
      clinicalPotential: 8.5,
      commercialization: 7.2,
      sustainability: 7.8,
      accessibility: 7.7
    }
  }
};

// Calculate overall impact score
const overallImpact = Object.values(impactMetrics).reduce((sum, metric) => sum + metric.score, 0) / Object.keys(impactMetrics).length;

// Research areas with impact weighting
const researchPortfolio = [
  { area: 'Antimicrobial Engineering', impact: 9.1, publications: 8, trend: 'stable', color: '#DC2626' },
  { area: 'Gene Therapy & AAV Vectors', impact: 8.8, publications: 3, trend: 'growing', color: '#10B981' },
  { area: 'Protein Biomaterials', impact: 7.9, publications: 4, trend: 'stable', color: '#8B5CF6' },
  { area: 'Computational Design', impact: 8.2, publications: 2, trend: 'emerging', color: '#F59E0B' }
];
---

<div class="scientific-impact-dashboard">
  <!-- Dashboard Header with Overall Score -->
  <div class="dashboard-header">
    <div class="header-content">
      <h2 class="dashboard-title">Scientific Impact Assessment</h2>
      <p class="dashboard-subtitle">Comprehensive analysis of research contributions, innovation, and scientific influence</p>
    </div>
    
    <!-- Overall Impact Score -->
    <div class="overall-impact-score">
      <div class="impact-circle">
        <svg viewBox="0 0 200 200" class="impact-svg">
          <!-- Background circle -->
          <circle 
            cx="100" 
            cy="100" 
            r="80" 
            fill="none" 
            stroke="rgba(255,255,255,0.1)" 
            stroke-width="8"
          />
          <!-- Progress circle -->
          <circle 
            cx="100" 
            cy="100" 
            r="80" 
            fill="none" 
            stroke="url(#impact-gradient)" 
            stroke-width="8" 
            stroke-dasharray="502.4" 
            stroke-dashoffset={502.4 - (overallImpact / 10) * 502.4}
            stroke-linecap="round"
            transform="rotate(-90 100 100)"
            class="impact-progress"
          />
          <!-- Gradient definition -->
          <defs>
            <linearGradient id="impact-gradient" x1="0%" y1="0%" x2="100%" y2="0%">
              <stop offset="0%" stop-color="#DC2626"/>
              <stop offset="50%" stop-color="#F59E0B"/>
              <stop offset="100%" stop-color="#10B981"/>
            </linearGradient>
          </defs>
          <!-- Center content -->
          <text x="100" y="90" text-anchor="middle" class="impact-score-main">{overallImpact.toFixed(1)}</text>
          <text x="100" y="110" text-anchor="middle" class="impact-score-label">Overall Impact</text>
          <text x="100" y="125" text-anchor="middle" class="impact-score-scale">/ 10.0</text>
        </svg>
      </div>
      
      <!-- Impact breakdown -->
      <div class="impact-breakdown">
        <div class="impact-category excellent">
          <span class="category-label">Excellent</span>
          <span class="category-range">8.5+</span>
        </div>
        <div class="impact-category good">
          <span class="category-label">Strong</span>
          <span class="category-range">7.0-8.4</span>
        </div>
        <div class="impact-category developing">
          <span class="category-label">Developing</span>
          <span class="category-range">< 7.0</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Impact Dimensions Matrix -->
  <div class="impact-dimensions">
    <h3 class="section-title">Impact Dimensions Analysis</h3>
    <div class="dimensions-grid">
      
      <!-- Academic Impact -->
      <div class="dimension-card academic">
        <div class="dimension-header">
          <div class="dimension-icon">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path d="M22 10v6M2 10l10-5 10 5-10 5z"/>
              <path d="M6 12v5c3 3 9 3 12 0v-5"/>
            </svg>
          </div>
          <div class="dimension-info">
            <h4 class="dimension-title">Academic Impact</h4>
            <div class="dimension-score">{impactMetrics.academicImpact.score}/10</div>
          </div>
        </div>
        
        <div class="dimension-details">
          {Object.entries(impactMetrics.academicImpact.components).map(([key, value]) => (
            <div class="detail-item">
              <span class="detail-label">{key.charAt(0).toUpperCase() + key.slice(1)}</span>
              <div class="detail-bar">
                <div class="detail-fill" style={`--percentage: ${(value / 10) * 100}%`}></div>
              </div>
              <span class="detail-value">{typeof value === 'number' ? value.toFixed(1) : value}</span>
            </div>
          ))}
        </div>
        
        <div class="dimension-highlights">
          <div class="highlight-item">
            <span class="highlight-metric">{metrics.citations}+</span>
            <span class="highlight-label">Citations</span>
          </div>
          <div class="highlight-item">
            <span class="highlight-metric">{publications.length}</span>
            <span class="highlight-label">Publications</span>
          </div>
        </div>
      </div>

      <!-- Innovation Impact -->
      <div class="dimension-card innovation">
        <div class="dimension-header">
          <div class="dimension-icon">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <circle cx="12" cy="12" r="5"/>
              <line x1="12" y1="1" x2="12" y2="3"/>
              <line x1="12" y1="21" x2="12" y2="23"/>
              <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
              <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
              <line x1="1" y1="12" x2="3" y2="12"/>
              <line x1="21" y1="12" x2="23" y2="12"/>
              <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
              <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
            </svg>
          </div>
          <div class="dimension-info">
            <h4 class="dimension-title">Innovation Impact</h4>
            <div class="dimension-score">{impactMetrics.innovationImpact.score}/10</div>
          </div>
        </div>
        
        <div class="dimension-details">
          {Object.entries(impactMetrics.innovationImpact.components).map(([key, value]) => (
            <div class="detail-item">
              <span class="detail-label">{key.charAt(0).toUpperCase() + key.slice(1)}</span>
              <div class="detail-bar">
                <div class="detail-fill" style={`--percentage: ${(value / 10) * 100}%`}></div>
              </div>
              <span class="detail-value">{typeof value === 'number' ? value.toFixed(1) : value}</span>
            </div>
          ))}
        </div>
        
        <div class="dimension-highlights">
          <div class="highlight-item">
            <span class="highlight-metric">{featuredPublications.length}</span>
            <span class="highlight-label">Breakthroughs</span>
          </div>
          <div class="highlight-item">
            <span class="highlight-metric">4</span>
            <span class="highlight-label">Technologies</span>
          </div>
        </div>
      </div>

      <!-- Collaborative Impact -->
      <div class="dimension-card collaborative">
        <div class="dimension-header">
          <div class="dimension-icon">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"/>
              <circle cx="9" cy="7" r="4"/>
              <path d="M23 21v-2a4 4 0 0 0-3-3.87"/>
              <path d="M16 3.13a4 4 0 0 1 0 7.75"/>
            </svg>
          </div>
          <div class="dimension-info">
            <h4 class="dimension-title">Collaborative Impact</h4>
            <div class="dimension-score">{impactMetrics.collaborativeImpact.score}/10</div>
          </div>
        </div>
        
        <div class="dimension-details">
          {Object.entries(impactMetrics.collaborativeImpact.components).map(([key, value]) => (
            <div class="detail-item">
              <span class="detail-label">{key.charAt(0).toUpperCase() + key.slice(1)}</span>
              <div class="detail-bar">
                <div class="detail-fill" style={`--percentage: ${(value / 10) * 100}%`}></div>
              </div>
              <span class="detail-value">{typeof value === 'number' ? value.toFixed(1) : value}</span>
            </div>
          ))}
        </div>
        
        <div class="dimension-highlights">
          <div class="highlight-item">
            <span class="highlight-metric">7</span>
            <span class="highlight-label">Institutions</span>
          </div>
          <div class="highlight-item">
            <span class="highlight-metric">3</span>
            <span class="highlight-label">Countries</span>
          </div>
        </div>
      </div>

      <!-- Societal Impact -->
      <div class="dimension-card societal">
        <div class="dimension-header">
          <div class="dimension-icon">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
              <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/>
              <polyline points="3.27 6.96 12 12.01 20.73 6.96"/>
              <line x1="12" y1="22.08" x2="12" y2="12"/>
            </svg>
          </div>
          <div class="dimension-info">
            <h4 class="dimension-title">Societal Impact</h4>
            <div class="dimension-score">{impactMetrics.societalImpact.score}/10</div>
          </div>
        </div>
        
        <div class="dimension-details">
          {Object.entries(impactMetrics.societalImpact.components).map(([key, value]) => (
            <div class="detail-item">
              <span class="detail-label">{key.charAt(0).toUpperCase() + key.slice(1)}</span>
              <div class="detail-bar">
                <div class="detail-fill" style={`--percentage: ${(value / 10) * 100}%`}></div>
              </div>
              <span class="detail-value">{typeof value === 'number' ? value.toFixed(1) : value}</span>
            </div>
          ))}
        </div>
        
        <div class="dimension-highlights">
          <div class="highlight-item">
            <span class="highlight-metric">85%</span>
            <span class="highlight-label">Clinical Potential</span>
          </div>
          <div class="highlight-item">
            <span class="highlight-metric">2</span>
            <span class="highlight-label">Applications</span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Research Portfolio Matrix -->
  <div class="research-portfolio">
    <h3 class="section-title">Research Portfolio Impact Matrix</h3>
    <div class="portfolio-visualization">
      <div class="matrix-chart">
        <svg viewBox="0 0 500 400" class="matrix-svg">
          <!-- Grid lines -->
          <defs>
            <pattern id="matrix-grid" width="50" height="40" patternUnits="userSpaceOnUse">
              <path d="M 50 0 L 0 0 0 40" fill="none" stroke="rgba(255,255,255,0.1)" stroke-width="1"/>
            </pattern>
          </defs>
          <rect width="500" height="400" fill="url(#matrix-grid)"/>
          
          <!-- Axes -->
          <line x1="50" y1="350" x2="450" y2="350" stroke="rgba(255,255,255,0.3)" stroke-width="2"/>
          <line x1="50" y1="50" x2="50" y2="350" stroke="rgba(255,255,255,0.3)" stroke-width="2"/>
          
          <!-- Axis labels -->
          <text x="250" y="380" text-anchor="middle" fill="rgba(255,255,255,0.7)" font-size="12">Publications Count</text>
          <text x="25" y="200" text-anchor="middle" fill="rgba(255,255,255,0.7)" font-size="12" transform="rotate(-90 25 200)">Impact Score</text>
          
          <!-- Quadrant labels -->
          <text x="125" y="70" text-anchor="middle" fill="rgba(255,255,255,0.5)" font-size="10">Emerging</text>
          <text x="375" y="70" text-anchor="middle" fill="rgba(255,255,255,0.5)" font-size="10">Star</text>
          <text x="125" y="330" text-anchor="middle" fill="rgba(255,255,255,0.5)" font-size="10">Developing</text>
          <text x="375" y="330" text-anchor="middle" fill="rgba(255,255,255,0.5)" font-size="10">Established</text>
          
          <!-- Data points -->
          {researchPortfolio.map((area, index) => {
            const x = 50 + (area.publications / 8) * 400;
            const y = 350 - (area.impact / 10) * 300;
            const size = 8 + area.publications * 2;
            
            return (
              <g class="portfolio-bubble" data-area={area.area}>
                <circle 
                  cx={x} 
                  cy={y} 
                  r={size} 
                  fill={area.color}
                  fill-opacity="0.3"
                  stroke={area.color}
                  stroke-width="2"
                  class="bubble-circle"
                />
                <text 
                  x={x} 
                  y={y + 4} 
                  text-anchor="middle" 
                  fill="white" 
                  font-size="10" 
                  font-weight="500"
                  class="bubble-label"
                >{area.area.split(' ')[0]}</text>
                
                <!-- Trend arrow -->
                {area.trend === 'growing' && (
                  <path 
                    d={`M ${x + size + 5} ${y - 5} L ${x + size + 15} ${y - 15} L ${x + size + 10} ${y - 15} L ${x + size + 15} ${y - 15} L ${x + size + 15} ${y - 10}`}
                    stroke="#10B981" 
                    stroke-width="2" 
                    fill="none"
                  />
                )}
                
                {area.trend === 'emerging' && (
                  <circle 
                    cx={x + size + 10} 
                    cy={y} 
                    r="3" 
                    fill="#F59E0B" 
                    class="emerging-indicator"
                  />
                )}
              </g>
            );
          })}
          
          <!-- Quadrant dividers -->
          <line x1="250" y1="50" x2="250" y2="350" stroke="rgba(255,255,255,0.2)" stroke-width="1" stroke-dasharray="5,5"/>
          <line x1="50" y1="200" x2="450" y2="200" stroke="rgba(255,255,255,0.2)" stroke-width="1" stroke-dasharray="5,5"/>
        </svg>
      </div>
      
      <!-- Portfolio insights -->
      <div class="portfolio-insights">
        <div class="insight-card star">
          <h5>Star Research Areas</h5>
          <p>High impact, substantial output</p>
          <ul>
            <li>Antimicrobial Engineering</li>
            <li>Gene Therapy & AAV Vectors</li>
          </ul>
        </div>
        
        <div class="insight-card emerging">
          <h5>Emerging Opportunities</h5>
          <p>High potential, growing focus</p>
          <ul>
            <li>Computational Design</li>
            <li>Precision Medicine</li>
          </ul>
        </div>
        
        <div class="insight-card established">
          <h5>Established Expertise</h5>
          <p>Consistent output, proven impact</p>
          <ul>
            <li>Protein Biomaterials</li>
            <li>Expression Systems</li>
          </ul>
        </div>
      </div>
    </div>
  </div>

  <!-- Impact Trajectory -->
  <div class="impact-trajectory">
    <h3 class="section-title">Impact Trajectory & Future Outlook</h3>
    <div class="trajectory-visualization">
      <div class="trajectory-chart">
        <svg viewBox="0 0 600 300" class="trajectory-svg">
          <!-- Background -->
          <rect width="600" height="300" fill="rgba(0,0,0,0.2)" rx="8"/>
          
          <!-- Grid -->
          <defs>
            <pattern id="trajectory-grid" width="60" height="30" patternUnits="userSpaceOnUse">
              <path d="M 60 0 L 0 0 0 30" fill="none" stroke="rgba(255,255,255,0.05)" stroke-width="1"/>
            </pattern>
          </defs>
          <rect width="600" height="300" fill="url(#trajectory-grid)"/>
          
          <!-- Historical trajectory -->
          <path 
            d="M 50 250 Q 150 220 250 180 T 350 120 T 450 100" 
            fill="none" 
            stroke="url(#trajectory-gradient)" 
            stroke-width="4"
            class="trajectory-line historical"
          />
          
          <!-- Projected trajectory -->
          <path 
            d="M 450 100 Q 500 90 550 80" 
            fill="none" 
            stroke="rgba(16, 185, 129, 0.8)" 
            stroke-width="3"
            stroke-dasharray="8,4"
            class="trajectory-line projected"
          />
          
          <!-- Gradient for historical line -->
          <defs>
            <linearGradient id="trajectory-gradient" x1="0%" y1="0%" x2="100%" y2="0%">
              <stop offset="0%" stop-color="#DC2626"/>
              <stop offset="50%" stop-color="#F59E0B"/>
              <stop offset="100%" stop-color="#10B981"/>
            </linearGradient>
          </defs>
          
          <!-- Milestone markers -->
          <circle cx="150" cy="220" r="6" fill="#3B82F6" class="milestone-marker"/>
          <text x="150" y="240" text-anchor="middle" fill="#3B82F6" font-size="10">2019</text>
          
          <circle cx="250" cy="180" r="6" fill="#F59E0B" class="milestone-marker"/>
          <text x="250" y="200" text-anchor="middle" fill="#F59E0B" font-size="10">2021</text>
          
          <circle cx="350" cy="120" r="8" fill="#DC2626" class="milestone-marker breakthrough"/>
          <text x="350" y="140" text-anchor="middle" fill="#DC2626" font-size="10">2023</text>
          
          <circle cx="450" cy="100" r="8" fill="#10B981" class="milestone-marker current"/>
          <text x="450" y="120" text-anchor="middle" fill="#10B981" font-size="10">2024</text>
          
          <!-- Future projection marker -->
          <circle cx="550" cy="80" r="6" fill="rgba(16, 185, 129, 0.6)" stroke="#10B981" stroke-width="2" class="milestone-marker future"/>
          <text x="550" y="100" text-anchor="middle" fill="#10B981" font-size="10">2026+</text>
          
          <!-- Labels -->
          <text x="50" y="30" fill="rgba(255,255,255,0.7)" font-size="12" font-weight="500">Research Impact Score</text>
          <text x="500" y="290" fill="rgba(255,255,255,0.7)" font-size="12" font-weight="500">Timeline</text>
        </svg>
      </div>
      
      <!-- Trajectory insights -->
      <div class="trajectory-insights">
        <div class="trajectory-stat">
          <div class="stat-icon growth">📈</div>
          <div class="stat-content">
            <div class="stat-value">+45%</div>
            <div class="stat-label">Impact Growth (2021-2024)</div>
          </div>
        </div>
        
        <div class="trajectory-stat">
          <div class="stat-icon momentum">🚀</div>
          <div class="stat-content">
            <div class="stat-value">High</div>
            <div class="stat-label">Research Momentum</div>
          </div>
        </div>
        
        <div class="trajectory-stat">
          <div class="stat-icon potential">⭐</div>
          <div class="stat-content">
            <div class="stat-value">9.5/10</div>
            <div class="stat-label">Future Potential</div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Key Achievements Summary -->
  <div class="achievements-summary">
    <h3 class="section-title">Key Scientific Achievements</h3>
    <div class="achievements-grid">
      <div class="achievement-item breakthrough">
        <div class="achievement-icon">🏆</div>
        <div class="achievement-content">
          <h4>Breakthrough Technologies</h4>
          <p>Pioneered multidomain antimicrobial proteins and functional inclusion bodies</p>
          <div class="achievement-metrics">
            <span class="metric">{featuredPublications.length} breakthrough papers</span>
            <span class="metric">4 novel technologies</span>
          </div>
        </div>
      </div>
      
      <div class="achievement-item impact">
        <div class="achievement-icon">📊</div>
        <div class="achievement-content">
          <h4>Scientific Impact</h4>
          <p>Consistent high-quality research output with growing international recognition</p>
          <div class="achievement-metrics">
            <span class="metric">{metrics.citations}+ citations</span>
            <span class="metric">{publications.length} publications</span>
          </div>
        </div>
      </div>
      
      <div class="achievement-item collaboration">
        <div class="achievement-icon">🤝</div>
        <div class="achievement-content">
          <h4>Global Collaboration</h4>
          <p>Established international research network spanning multiple continents</p>
          <div class="achievement-metrics">
            <span class="metric">7 institutions</span>
            <span class="metric">3 countries</span>
          </div>
        </div>
      </div>
      
      <div class="achievement-item innovation">
        <div class="achievement-icon">💡</div>
        <div class="achievement-content">
          <h4>Technological Innovation</h4>
          <p>Developed novel therapeutic platforms with clinical translation potential</p>
          <div class="achievement-metrics">
            <span class="metric">85% clinical potential</span>
            <span class="metric">2 active translations</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .scientific-impact-dashboard {
    background: linear-gradient(135deg, rgba(15, 23, 42, 0.98) 0%, rgba(30, 41, 59, 0.95) 100%);
    border: 1px solid rgba(71, 85, 105, 0.3);
    border-radius: 24px;
    padding: 3rem;
    margin: 3rem 0;
    backdrop-filter: blur(12px);
    position: relative;
    overflow: hidden;
  }

  .scientific-impact-dashboard::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, transparent, rgba(220, 38, 38, 0.6), rgba(245, 158, 11, 0.6), rgba(16, 185, 129, 0.6), transparent);
  }

  /* Dashboard Header */
  .dashboard-header {
    display: grid;
    grid-template-columns: 1fr auto;
    gap: 3rem;
    align-items: start;
    margin-bottom: 4rem;
  }

  .dashboard-title {
    font-size: 2rem;
    font-weight: 700;
    color: white;
    margin-bottom: 0.75rem;
    background: linear-gradient(135deg, #ffffff 0%, #f1f5f9 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .dashboard-subtitle {
    color: rgba(148, 163, 184, 0.8);
    font-size: 1rem;
    line-height: 1.5;
  }

  /* Overall Impact Score */
  .overall-impact-score {
    text-align: center;
  }

  .impact-circle {
    margin-bottom: 1.5rem;
  }

  .impact-svg {
    width: 200px;
    height: 200px;
  }

  .impact-progress {
    transition: stroke-dashoffset 3s ease-out;
  }

  .impact-score-main {
    font-size: 2.5rem;
    font-weight: 700;
    fill: white;
  }

  .impact-score-label {
    font-size: 1rem;
    fill: rgba(148, 163, 184, 0.8);
    font-weight: 500;
  }

  .impact-score-scale {
    font-size: 0.875rem;
    fill: rgba(148, 163, 184, 0.6);
  }

  .impact-breakdown {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .impact-category {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 1rem;
    border-radius: 8px;
    border: 1px solid transparent;
  }

  .impact-category.excellent {
    background: rgba(16, 185, 129, 0.1);
    border-color: rgba(16, 185, 129, 0.3);
  }

  .impact-category.good {
    background: rgba(245, 158, 11, 0.1);
    border-color: rgba(245, 158, 11, 0.3);
  }

  .impact-category.developing {
    background: rgba(107, 114, 128, 0.1);
    border-color: rgba(107, 114, 128, 0.3);
  }

  .category-label {
    font-size: 0.875rem;
    font-weight: 500;
    color: white;
  }

  .category-range {
    font-size: 0.75rem;
    color: rgba(148, 163, 184, 0.7);
  }

  /* Section Titles */
  .section-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: white;
    margin-bottom: 2rem;
    text-align: center;
    position: relative;
  }

  .section-title::after {
    content: '';
    position: absolute;
    bottom: -0.5rem;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 2px;
    background: linear-gradient(90deg, #DC2626, #10B981);
    border-radius: 1px;
  }

  /* Impact Dimensions */
  .impact-dimensions {
    margin-bottom: 4rem;
  }

  .dimensions-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
  }

  .dimension-card {
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.06);
    border-radius: 20px;
    padding: 2rem;
    transition: all 0.4s ease;
    position: relative;
    overflow: hidden;
  }

  .dimension-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 4px;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .dimension-card.academic::before { background: linear-gradient(90deg, #3B82F6, #1D4ED8); }
  .dimension-card.innovation::before { background: linear-gradient(90deg, #F59E0B, #D97706); }
  .dimension-card.collaborative::before { background: linear-gradient(90deg, #10B981, #059669); }
  .dimension-card.societal::before { background: linear-gradient(90deg, #8B5CF6, #7C3AED); }

  .dimension-card:hover {
    background: rgba(255, 255, 255, 0.04);
    transform: translateY(-4px);
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.3);
  }

  .dimension-card:hover::before {
    opacity: 1;
  }

  .dimension-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .dimension-icon {
    width: 3rem;
    height: 3rem;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .dimension-card.academic .dimension-icon {
    background: rgba(59, 130, 246, 0.2);
    color: #3B82F6;
  }

  .dimension-card.innovation .dimension-icon {
    background: rgba(245, 158, 11, 0.2);
    color: #F59E0B;
  }

  .dimension-card.collaborative .dimension-icon {
    background: rgba(16, 185, 129, 0.2);
    color: #10B981;
  }

  .dimension-card.societal .dimension-icon {
    background: rgba(139, 92, 246, 0.2);
    color: #8B5CF6;
  }

  .dimension-icon svg {
    width: 1.5rem;
    height: 1.5rem;
    stroke-width: 1.5;
  }

  .dimension-info {
    flex: 1;
  }

  .dimension-title {
    font-size: 1.1rem;
    font-weight: 600;
    color: white;
    margin-bottom: 0.25rem;
  }

  .dimension-score {
    font-size: 1.5rem;
    font-weight: 700;
    color: #10B981;
  }

  .dimension-details {
    margin-bottom: 2rem;
    space-y: 1rem;
  }

  .detail-item {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .detail-label {
    font-size: 0.875rem;
    color: rgba(148, 163, 184, 0.8);
    min-width: 80px;
  }

  .detail-bar {
    flex: 1;
    height: 6px;
    background: rgba(255, 255, 255, 0.1);
    border-radius: 3px;
    overflow: hidden;
  }

  .detail-fill {
    height: 100%;
    background: linear-gradient(90deg, #DC2626, #10B981);
    width: var(--percentage);
    border-radius: 3px;
    animation: fill-detail 1.5s ease-out;
  }

  @keyframes fill-detail {
    from { width: 0; }
    to { width: var(--percentage); }
  }

  .detail-value {
    font-size: 0.875rem;
    font-weight: 600;
    color: white;
    min-width: 40px;
    text-align: right;
  }

  .dimension-highlights {
    display: flex;
    justify-content: space-around;
    padding-top: 1rem;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
  }

  .highlight-item {
    text-align: center;
  }

  .highlight-metric {
    display: block;
    font-size: 1.25rem;
    font-weight: 700;
    color: white;
  }

  .highlight-label {
    font-size: 0.75rem;
    color: rgba(148, 163, 184, 0.7);
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  /* Research Portfolio */
  .research-portfolio {
    margin-bottom: 4rem;
  }

  .portfolio-visualization {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 3rem;
    align-items: start;
  }

  .matrix-chart {
    background: rgba(0, 0, 0, 0.2);
    border-radius: 12px;
    padding: 1rem;
    border: 1px solid rgba(255, 255, 255, 0.06);
  }

  .matrix-svg {
    width: 100%;
    height: 400px;
  }

  .portfolio-bubble {
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .portfolio-bubble:hover .bubble-circle {
    fill-opacity: 0.6;
    transform: scale(1.2);
  }

  .bubble-circle {
    transition: all 0.3s ease;
  }

  .bubble-label {
    transition: all 0.3s ease;
  }

  .portfolio-bubble:hover .bubble-label {
    font-size: 12px;
    font-weight: 600;
  }

  .emerging-indicator {
    animation: pulse-emerging 2s infinite;
  }

  @keyframes pulse-emerging {
    0%, 100% { opacity: 0.6; transform: scale(1); }
    50% { opacity: 1; transform: scale(1.3); }
  }

  .portfolio-insights {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .insight-card {
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.06);
    border-radius: 12px;
    transition: all 0.3s ease;
  }

  .insight-card:hover {
    background: rgba(255, 255, 255, 0.04);
    transform: translateX(4px);
  }

  .insight-card.star {
    border-left: 4px solid #10B981;
  }

  .insight-card.emerging {
    border-left: 4px solid #F59E0B;
  }

  .insight-card.established {
    border-left: 4px solid #8B5CF6;
  }

  .insight-card h5 {
    font-size: 1rem;
    font-weight: 600;
    color: white;
    margin-bottom: 0.5rem;
  }

  .insight-card p {
    font-size: 0.875rem;
    color: rgba(148, 163, 184, 0.8);
    margin-bottom: 1rem;
  }

  .insight-card ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .insight-card li {
    font-size: 0.8rem;
    color: rgba(148, 163, 184, 0.9);
    padding: 0.25rem 0;
    position: relative;
    padding-left: 1rem;
  }

  .insight-card li::before {
    content: '•';
    position: absolute;
    left: 0;
    color: #DC2626;
  }

  /* Impact Trajectory */
  .impact-trajectory {
    margin-bottom: 4rem;
  }

  .trajectory-visualization {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 3rem;
    align-items: center;
  }

  .trajectory-chart {
    background: rgba(0, 0, 0, 0.2);
    border-radius: 12px;
    padding: 1rem;
    border: 1px solid rgba(255, 255, 255, 0.06);
  }

  .trajectory-svg {
    width: 100%;
    height: 300px;
  }

  .trajectory-line {
    stroke-dasharray: 1000;
    stroke-dashoffset: 1000;
    animation: draw-trajectory 3s ease-out forwards;
  }

  .trajectory-line.historical {
    animation-delay: 0.5s;
  }

  .trajectory-line.projected {
    animation-delay: 2s;
  }

  @keyframes draw-trajectory {
    to { stroke-dashoffset: 0; }
  }

  .milestone-marker {
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .milestone-marker:hover {
    transform: scale(1.3);
    filter: drop-shadow(0 0 8px currentColor);
  }

  .milestone-marker.breakthrough {
    animation: pulse-breakthrough 2s infinite;
  }

  .milestone-marker.current {
    animation: pulse-current 2s infinite;
  }

  @keyframes pulse-breakthrough {
    0%, 100% { opacity: 1; transform: scale(1); }
    50% { opacity: 0.7; transform: scale(1.2); }
  }

  @keyframes pulse-current {
    0%, 100% { opacity: 1; transform: scale(1); }
    50% { opacity: 0.8; transform: scale(1.15); }
  }

  .trajectory-insights {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .trajectory-stat {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1.5rem;
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.06);
    border-radius: 12px;
    transition: all 0.3s ease;
  }

  .trajectory-stat:hover {
    background: rgba(255, 255, 255, 0.04);
    transform: translateY(-2px);
  }

  .stat-icon {
    font-size: 2rem;
    width: 3rem;
    text-align: center;
  }

  .stat-content {
    flex: 1;
  }

  .stat-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: white;
    display: block;
  }

  .stat-label {
    font-size: 0.875rem;
    color: rgba(148, 163, 184, 0.8);
  }

  /* Achievements Summary */
  .achievements-summary {
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    padding-top: 3rem;
  }

  .achievements-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
  }

  .achievement-item {
    display: flex;
    gap: 1.5rem;
    padding: 2rem;
    background: rgba(255, 255, 255, 0.02);
    border: 1px solid rgba(255, 255, 255, 0.06);
    border-radius: 16px;
    transition: all 0.3s ease;
    position: relative;
  }

  .achievement-item::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    border-radius: 16px 16px 0 0;
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .achievement-item.breakthrough::before { background: linear-gradient(90deg, #DC2626, #EF4444); }
  .achievement-item.impact::before { background: linear-gradient(90deg, #10B981, #34D399); }
  .achievement-item.collaboration::before { background: linear-gradient(90deg, #8B5CF6, #A78BFA); }
  .achievement-item.innovation::before { background: linear-gradient(90deg, #F59E0B, #FCD34D); }

  .achievement-item:hover {
    background: rgba(255, 255, 255, 0.04);
    transform: translateY(-4px);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
  }

  .achievement-item:hover::before {
    opacity: 1;
  }

  .achievement-icon {
    font-size: 2.5rem;
    width: 4rem;
    text-align: center;
    flex-shrink: 0;
  }

  .achievement-content {
    flex: 1;
  }

  .achievement-content h4 {
    font-size: 1.1rem;
    font-weight: 600;
    color: white;
    margin-bottom: 0.75rem;
  }

  .achievement-content p {
    color: rgba(148, 163, 184, 0.8);
    line-height: 1.5;
    margin-bottom: 1rem;
  }

  .achievement-metrics {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .achievement-metrics .metric {
    font-size: 0.8rem;
    color: rgba(148, 163, 184, 0.7);
    padding: 0.5rem;
    background: rgba(255, 255, 255, 0.02);
    border-radius: 6px;
    border: 1px solid rgba(255, 255, 255, 0.04);
  }

  /* Responsive Design */
  @media (max-width: 1024px) {
    .dashboard-header {
      grid-template-columns: 1fr;
      text-align: center;
      gap: 2rem;
    }

    .portfolio-visualization,
    .trajectory-visualization {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .dimensions-grid {
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    }
  }

  @media (max-width: 768px) {
    .scientific-impact-dashboard {
      padding: 2rem;
    }

    .dashboard-title {
      font-size: 1.75rem;
    }

    .section-title {
      font-size: 1.25rem;
    }

    .dimensions-grid {
      grid-template-columns: 1fr;
    }

    .achievements-grid {
      grid-template-columns: 1fr;
    }

    .trajectory-insights {
      gap: 1rem;
    }

    .achievement-item {
      flex-direction: column;
      text-align: center;
      gap: 1rem;
    }
  }
</style>

<script>
  // Scientific Impact Dashboard Interactivity
  class ScientificImpactDashboard {
    constructor() {
      this.init();
    }

    init() {
      this.setupAnimations();
      this.setupInteractivity();
      this.setupTooltips();
    }

    setupAnimations() {
      // Animate overall impact circle
      const impactProgress = document.querySelector('.impact-progress');
      if (impactProgress) {
        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              impactProgress.style.strokeDashoffset = impactProgress.getAttribute('stroke-dashoffset');
            }
          });
        }, { threshold: 0.5 });
        
        observer.observe(impactProgress);
      }

      // Animate dimension cards
      const dimensionCards = document.querySelectorAll('.dimension-card');
      dimensionCards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(30px)';
        
        setTimeout(() => {
          card.style.transition = 'all 0.8s ease';
          card.style.opacity = '1';
          card.style.transform = 'translateY(0)';
        }, 200 + index * 150);
      });

      // Animate achievement items
      const achievementItems = document.querySelectorAll('.achievement-item');
      const achievementObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry, index) => {
          if (entry.isIntersecting) {
            setTimeout(() => {
              entry.target.style.opacity = '1';
              entry.target.style.transform = 'translateY(0)';
            }, index * 100);
          }
        });
      }, { threshold: 0.2 });

      achievementItems.forEach(item => {
        item.style.opacity = '0';
        item.style.transform = 'translateY(20px)';
        item.style.transition = 'all 0.6s ease';
        achievementObserver.observe(item);
      });
    }

    setupInteractivity() {
      // Portfolio bubble interactions
      const portfolioBubbles = document.querySelectorAll('.portfolio-bubble');
      portfolioBubbles.forEach(bubble => {
        bubble.addEventListener('mouseenter', () => {
          const area = bubble.dataset.area;
          this.highlightRelatedInsights(area);
        });
        
        bubble.addEventListener('mouseleave', () => {
          this.resetInsightHighlights();
        });
      });

      // Milestone marker interactions
      const milestoneMarkers = document.querySelectorAll('.milestone-marker');
      milestoneMarkers.forEach(marker => {
        marker.addEventListener('click', () => {
          // Add ripple effect
          this.createRippleEffect(marker);
        });
      });

      // Dimension card hover effects
      const dimensionCards = document.querySelectorAll('.dimension-card');
      dimensionCards.forEach(card => {
        card.addEventListener('mouseenter', () => {
          this.enhanceDimensionCard(card);
        });
        
        card.addEventListener('mouseleave', () => {
          this.resetDimensionCard(card);
        });
      });
    }

    highlightRelatedInsights(area) {
      const insightCards = document.querySelectorAll('.insight-card');
      insightCards.forEach(card => {
        const content = card.textContent.toLowerCase();
        if (content.includes(area.toLowerCase().split(' ')[0])) {
          card.style.borderColor = 'rgba(220, 38, 38, 0.5)';
          card.style.background = 'rgba(220, 38, 38, 0.05)';
          card.style.transform = 'translateX(8px)';
        } else {
          card.style.opacity = '0.5';
        }
      });
    }

    resetInsightHighlights() {
      const insightCards = document.querySelectorAll('.insight-card');
      insightCards.forEach(card => {
        card.style.borderColor = '';
        card.style.background = '';
        card.style.transform = '';
        card.style.opacity = '';
      });
    }

    createRippleEffect(element) {
      const ripple = document.createElement('div');
      ripple.style.cssText = `
        position: absolute;
        border-radius: 50%;
        background: rgba(255, 255, 255, 0.3);
        width: 20px;
        height: 20px;
        left: 50%;
        top: 50%;
        transform: translate(-50%, -50%);
        animation: ripple-expand 0.6s ease-out;
        pointer-events: none;
      `;
      
      element.style.position = 'relative';
      element.appendChild(ripple);
      
      // Add ripple animation
      const style = document.createElement('style');
      style.textContent = `
        @keyframes ripple-expand {
          from { transform: translate(-50%, -50%) scale(1); opacity: 1; }
          to { transform: translate(-50%, -50%) scale(3); opacity: 0; }
        }
      `;
      document.head.appendChild(style);
      
      setTimeout(() => {
        ripple.remove();
      }, 600);
    }

    enhanceDimensionCard(card) {
      const detailBars = card.querySelectorAll('.detail-fill');
      detailBars.forEach(bar => {
        bar.style.background = 'linear-gradient(90deg, #DC2626, #F59E0B, #10B981)';
        bar.style.animationDuration = '0.8s';
      });
    }

    resetDimensionCard(card) {
      const detailBars = card.querySelectorAll('.detail-fill');
      detailBars.forEach(bar => {
        bar.style.background = 'linear-gradient(90deg, #DC2626, #10B981)';
      });
    }

    setupTooltips() {
      // Add tooltips to key metrics
      this.addTooltip('.impact-score-main', 'Overall scientific impact score calculated from multiple dimensions');
      this.addTooltip('.dimension-score', 'Dimension-specific impact score (0-10 scale)');
      
      // Portfolio bubble tooltips
      const portfolioBubbles = document.querySelectorAll('.portfolio-bubble');
      portfolioBubbles.forEach(bubble => {
        const area = bubble.dataset.area;
        this.addTooltip(bubble, `${area}: Click to view detailed analysis`);
      });
    }

    addTooltip(selector, content) {
      const elements = typeof selector === 'string' ? document.querySelectorAll(selector) : [selector];
      
      elements.forEach(element => {
        element.addEventListener('mouseenter', (e) => {
          const tooltip = document.createElement('div');
          tooltip.className = 'dashboard-tooltip';
          tooltip.textContent = content;
          tooltip.style.cssText = `
            position: absolute;
            background: rgba(17, 24, 39, 0.95);
            color: white;
            padding: 0.75rem;
            border-radius: 8px;
            font-size: 0.875rem;
            pointer-events: none;
            z-index: 1000;
            border: 1px solid rgba(75, 85, 99, 0.3);
            backdrop-filter: blur(12px);
            max-width: 200px;
            opacity: 0;
            transition: opacity 0.2s ease;
          `;
          
          document.body.appendChild(tooltip);
          
          // Position tooltip
          const rect = element.getBoundingClientRect();
          tooltip.style.left = rect.left + window.scrollX + 'px';
          tooltip.style.top = rect.top + window.scrollY - tooltip.offsetHeight - 10 + 'px';
          
          // Fade in
          setTimeout(() => {
            tooltip.style.opacity = '1';
          }, 50);
          
          element._tooltip = tooltip;
        });
        
        element.addEventListener('mouseleave', () => {
          if (element._tooltip) {
            element._tooltip.style.opacity = '0';
            setTimeout(() => {
              if (element._tooltip && element._tooltip.parentNode) {
                element._tooltip.parentNode.removeChild(element._tooltip);
              }
            }, 200);
            element._tooltip = null;
          }
        });
      });
    }
  }

  // Initialize dashboard when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ScientificImpactDashboard();
  });

  // Counter animations for key metrics
  function animateCounter(element, target, duration = 2000) {
    let current = 0;
    const increment = target / (duration / 16);
    
    const timer = setInterval(() => {
      current += increment;
      if (current >= target) {
        current = target;
        clearInterval(timer);
      }
      element.textContent = Math.round(current * 10) / 10;
    }, 16);
  }

  // Animate counters when they come into view
  const counterObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const target = parseFloat(entry.target.textContent);
        animateCounter(entry.target, target);
        counterObserver.unobserve(entry.target);
      }
    });
  }, { threshold: 0.5 });

  document.querySelectorAll('.impact-score-main, .dimension-score').forEach(element => {
    counterObserver.observe(element);
  });
</script>