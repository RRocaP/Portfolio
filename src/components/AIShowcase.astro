---
import { proteinVideos } from '../data/proteinVideos.js';

interface Props {
  lang?: 'en' | 'es' | 'ca';
}

const { lang = 'en' } = Astro.props;

// Add sample AI-generated content and videos
const aiContent = [
  {
    type: 'video',
    title: 'Protein Folding Dynamics Visualization',
    description: 'AI-generated visualization of antimicrobial peptide folding pathways using molecular dynamics simulation data.',
    thumbnail: '/Portfolio/protein-folding-thumb.jpg',
    videoUrl: 'https://example.com/protein-folding.mp4',
    duration: '2:34',
    tags: ['AI-Generated', 'Molecular Dynamics', 'Visualization']
  },
  {
    type: 'animation',
    title: 'AAV Vector Assembly Process',
    description: 'Procedurally generated animation showing the step-by-step assembly of adeno-associated virus vectors.',
    thumbnail: '/Portfolio/aav-assembly-thumb.jpg',
    videoUrl: 'https://example.com/aav-assembly.mp4',
    duration: '1:45',
    tags: ['AI-Generated', 'Vector Systems', 'Animation']
  },
  {
    type: 'simulation',
    title: 'Antimicrobial Action Mechanism',
    description: 'AI-driven simulation showcasing how engineered antimicrobial proteins interact with bacterial membranes.',
    thumbnail: '/Portfolio/antimicrobial-action-thumb.jpg',
    videoUrl: 'https://example.com/antimicrobial-action.mp4',
    duration: '3:12',
    tags: ['AI-Generated', 'Mechanism', 'Antimicrobial']
  }
];
---

<section class="ai-showcase-section">
  <div class="container">
    <div class="section-header">
      <h2 class="section-title">AI-Generated Research Content</h2>
      <p class="section-subtitle">
        Visualizations and animations created using artificial intelligence to illustrate complex biological processes
      </p>
    </div>
    
    <div class="content-grid">
      {aiContent.map((content, index) => (
        <article class="content-card" data-index={index}>
          <div class="card-header">
            <div class="content-type-badge">
              <span class="type-icon">
                {content.type === 'video' && (
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polygon points="23 7 16 12 23 17 23 7"/>
                    <rect x="1" y="5" width="15" height="14" rx="2" ry="2"/>
                  </svg>
                )}
                {content.type === 'animation' && (
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                  </svg>
                )}
                {content.type === 'simulation' && (
                  <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"/>
                    <polyline points="3.27 6.96 12 12.01 20.73 6.96"/>
                    <line x1="12" y1="22.08" x2="12" y2="12"/>
                  </svg>
                )}
              </span>
              <span class="type-text">{content.type}</span>
            </div>
            
            <div class="duration-badge">{content.duration}</div>
          </div>
          
          <div class="thumbnail-container">
            <div class="thumbnail-placeholder">
              <div class="ai-badge">AI</div>
              <div class="play-button">
                <svg viewBox="0 0 24 24" fill="currentColor">
                  <polygon points="5,3 19,12 5,21"/>
                </svg>
              </div>
              <div class="thumbnail-overlay"></div>
            </div>
          </div>
          
          <div class="card-content">
            <h3 class="content-title">{content.title}</h3>
            <p class="content-description">{content.description}</p>
            
            <div class="tags-container">
              {content.tags.map(tag => (
                <span class="tag">{tag}</span>
              ))}
            </div>
            
            <div class="card-actions">
              <button class="action-btn primary" data-video-url={content.videoUrl}>
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <polygon points="5,3 19,12 5,21"/>
                </svg>
                Watch Video
              </button>
              <button class="action-btn secondary">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                  <polyline points="7,10 12,15 17,10"/>
                  <line x1="12" y1="15" x2="12" y2="3"/>
                </svg>
                Download
              </button>
            </div>
          </div>
          
          <div class="card-glow"></div>
        </article>
      ))}
    </div>
    
    <div class="protein-videos-section">
      <h3 class="subsection-title">Protein Structure Videos</h3>
      <div class="protein-grid">
        {proteinVideos.map(video => (
          <div class="protein-video-card">
            <div class="video-thumbnail">
              <div class="pdb-badge">{video.pdbId || 'Custom'}</div>
              <div class="video-play-btn">
                <svg viewBox="0 0 24 24" fill="currentColor">
                  <polygon points="5,3 19,12 5,21"/>
                </svg>
              </div>
            </div>
            <div class="video-info">
              <h4 class="video-title">{video.title}</h4>
              <p class="video-description">{video.description}</p>
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  .ai-showcase-section {
    padding: 8rem 0;
    background: var(--background-alt);
    position: relative;
    overflow: hidden;
  }
  
  .ai-showcase-section::before {
    content: '';
    position: absolute;
    top: 0;
    left: 50%;
    width: 200%;
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent 0%,
      rgba(var(--accent-red-rgb), 0.5) 25%,
      var(--accent-yellow) 50%,
      rgba(var(--accent-red-rgb), 0.5) 75%,
      transparent 100%
    );
    transform: translateX(-50%);
  }
  
  .section-header {
    text-align: center;
    margin-bottom: 5rem;
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }
  
  .section-title {
    font-size: clamp(2.5rem, 5vw, 3.5rem);
    font-weight: 700;
    background: linear-gradient(
      135deg,
      var(--primary) 0%,
      var(--accent-yellow) 50%,
      var(--accent-red) 100%
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-bottom: 1.5rem;
    letter-spacing: -0.02em;
  }
  
  .section-subtitle {
    font-size: 1.25rem;
    color: var(--secondary);
    font-weight: 300;
    line-height: 1.6;
    opacity: 0.9;
  }
  
  .content-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
    gap: 2rem;
    margin-bottom: 6rem;
  }
  
  .content-card {
    background: var(--background-card);
    border: 1px solid var(--border);
    border-radius: 20px;
    overflow: hidden;
    position: relative;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    backdrop-filter: blur(10px);
  }
  
  .content-card:hover {
    transform: translateY(-12px) scale(1.02);
    border-color: rgba(var(--accent-red-rgb), 0.4);
    box-shadow: 
      0 25px 50px rgba(0, 0, 0, 0.4),
      0 0 0 1px rgba(var(--accent-red-rgb), 0.2);
  }
  
  .card-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem 1.5rem 0;
  }
  
  .content-type-badge {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: rgba(var(--accent-yellow), 0.1);
    border: 1px solid rgba(var(--accent-yellow), 0.3);
    border-radius: 50px;
    color: var(--accent-yellow);
    font-size: 0.875rem;
    font-weight: 500;
  }
  
  .type-icon svg {
    width: 16px;
    height: 16px;
  }
  
  .duration-badge {
    background: rgba(var(--accent-red-rgb), 0.1);
    border: 1px solid rgba(var(--accent-red-rgb), 0.3);
    color: var(--accent-red);
    padding: 0.375rem 0.75rem;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 600;
    font-family: var(--font-mono);
  }
  
  .thumbnail-container {
    margin: 1.5rem;
    position: relative;
    border-radius: 12px;
    overflow: hidden;
    aspect-ratio: 16/9;
  }
  
  .thumbnail-placeholder {
    width: 100%;
    height: 100%;
    background: linear-gradient(
      135deg,
      rgba(var(--accent-red-rgb), 0.2) 0%,
      var(--background) 50%,
      rgba(var(--accent-yellow), 0.2) 100%
    );
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .thumbnail-placeholder:hover {
    background: linear-gradient(
      135deg,
      rgba(var(--accent-red-rgb), 0.3) 0%,
      var(--background-elevated) 50%,
      rgba(var(--accent-yellow), 0.3) 100%
    );
  }
  
  .ai-badge {
    position: absolute;
    top: 12px;
    left: 12px;
    background: linear-gradient(135deg, var(--accent-red) 0%, var(--accent-yellow) 100%);
    color: var(--background);
    padding: 0.25rem 0.75rem;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 700;
    letter-spacing: 0.05em;
  }
  
  .play-button {
    width: 60px;
    height: 60px;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--background);
    transition: all 0.3s ease;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
  }
  
  .play-button svg {
    width: 24px;
    height: 24px;
    margin-left: 3px;
  }
  
  .thumbnail-placeholder:hover .play-button {
    transform: scale(1.1);
    background: rgba(255, 255, 255, 1);
  }
  
  .card-content {
    padding: 0 1.5rem 1.5rem;
  }
  
  .content-title {
    font-size: 1.375rem;
    font-weight: 600;
    color: var(--primary);
    margin-bottom: 0.75rem;
    line-height: 1.3;
  }
  
  .content-description {
    color: var(--secondary);
    line-height: 1.6;
    margin-bottom: 1.5rem;
    font-size: 0.95rem;
  }
  
  .tags-container {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
  }
  
  .tag {
    background: rgba(var(--accent-red-rgb), 0.1);
    color: var(--accent-red);
    padding: 0.25rem 0.75rem;
    border-radius: 15px;
    font-size: 0.75rem;
    font-weight: 500;
    border: 1px solid rgba(var(--accent-red-rgb), 0.2);
  }
  
  .card-actions {
    display: flex;
    gap: 0.75rem;
  }
  
  .action-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.25rem;
    border-radius: 50px;
    font-weight: 500;
    transition: all 0.3s ease;
    border: none;
    cursor: pointer;
    font-size: 0.875rem;
  }
  
  .action-btn svg {
    width: 16px;
    height: 16px;
  }
  
  .action-btn.primary {
    background: var(--accent-red);
    color: var(--background);
  }
  
  .action-btn.primary:hover {
    background: var(--accent-red-hover);
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(var(--accent-red-rgb), 0.4);
  }
  
  .action-btn.secondary {
    background: rgba(var(--accent-red-rgb), 0.1);
    color: var(--accent-red);
    border: 1px solid rgba(var(--accent-red-rgb), 0.3);
  }
  
  .action-btn.secondary:hover {
    background: rgba(var(--accent-red-rgb), 0.2);
    border-color: rgba(var(--accent-red-rgb), 0.5);
    transform: translateY(-2px);
  }
  
  .card-glow {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(
      400px circle at var(--mouse-x, 50%) var(--mouse-y, 50%),
      rgba(var(--accent-red-rgb), 0.1) 0%,
      transparent 40%
    );
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none;
    border-radius: 20px;
  }
  
  .content-card:hover .card-glow {
    opacity: 1;
  }
  
  .protein-videos-section {
    margin-top: 4rem;
    padding-top: 4rem;
    border-top: 1px solid var(--border);
  }
  
  .subsection-title {
    font-size: 2rem;
    font-weight: 600;
    color: var(--primary);
    margin-bottom: 2rem;
    text-align: center;
  }
  
  .protein-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.5rem;
  }
  
  .protein-video-card {
    background: var(--background-card);
    border: 1px solid var(--border);
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.3s ease;
  }
  
  .protein-video-card:hover {
    transform: translateY(-4px);
    border-color: rgba(var(--accent-red-rgb), 0.3);
    box-shadow: 0 12px 30px rgba(0, 0, 0, 0.2);
  }
  
  .video-thumbnail {
    aspect-ratio: 16/9;
    background: linear-gradient(
      135deg,
      rgba(var(--accent-red-rgb), 0.1) 0%,
      var(--background) 100%
    );
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
  }
  
  .pdb-badge {
    position: absolute;
    top: 8px;
    right: 8px;
    background: rgba(var(--accent-red-rgb), 0.9);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: 6px;
    font-size: 0.75rem;
    font-weight: 600;
    font-family: var(--font-mono);
  }
  
  .video-play-btn {
    width: 48px;
    height: 48px;
    background: rgba(255, 255, 255, 0.9);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--background);
    transition: all 0.3s ease;
  }
  
  .video-play-btn svg {
    width: 20px;
    height: 20px;
    margin-left: 2px;
  }
  
  .video-thumbnail:hover .video-play-btn {
    transform: scale(1.1);
    background: white;
  }
  
  .video-info {
    padding: 1.25rem;
  }
  
  .video-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--primary);
    margin-bottom: 0.5rem;
    line-height: 1.3;
  }
  
  .video-description {
    color: var(--secondary);
    font-size: 0.875rem;
    line-height: 1.5;
  }
  
  /* Mobile responsiveness */
  @media (max-width: 768px) {
    .ai-showcase-section {
      padding: 4rem 0;
    }
    
    .content-grid {
      grid-template-columns: 1fr;
      gap: 1.5rem;
      margin-bottom: 3rem;
    }
    
    .protein-grid {
      grid-template-columns: 1fr;
    }
    
    .card-actions {
      flex-direction: column;
    }
    
    .action-btn {
      justify-content: center;
    }
  }
  
  @media (max-width: 480px) {
    .content-grid {
      grid-template-columns: 1fr;
    }
    
    .card-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }
  }
</style>

<script>
  // Add mouse tracking for card glow effect
  document.addEventListener('DOMContentLoaded', () => {
    const cards = document.querySelectorAll('.content-card');
    
    cards.forEach(card => {
      card.addEventListener('mousemove', (e) => {
        const rect = card.getBoundingClientRect();
        const x = e.clientX - rect.left;
        const y = e.clientY - rect.top;
        
        card.style.setProperty('--mouse-x', `${x}px`);
        card.style.setProperty('--mouse-y', `${y}px`);
      });
    });
    
    // Handle video playback buttons
    const videoButtons = document.querySelectorAll('[data-video-url]');
    videoButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        const videoUrl = button.getAttribute('data-video-url');
        // Placeholder for video modal/player logic
        console.log('Play video:', videoUrl);
        alert('Video player would open here with URL: ' + videoUrl);
      });
    });
  });
</script>