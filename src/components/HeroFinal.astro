---
export interface Props {
  lang?: 'en' | 'es' | 'ca';
}

const { lang = 'en' } = Astro.props;

const translations = {
  en: {
    firstName: 'Ramon',
    lastName: 'Roca Pinilla',
    role: 'Biomedical Engineer • Antimicrobial Protein Designer',
    tagline: 'Engineering next-generation antimicrobials through computational design and experimental precision',
    cta1: 'Explore Research',
    cta2: 'View Publications',
    scroll: 'Scroll to discover more',
    enhancement: 'Enable molecular visualization'
  },
  es: {
    firstName: 'Ramon',
    lastName: 'Roca Pinilla', 
    role: 'Ingeniero Biomédico • Diseñador de Proteínas Antimicrobianas',
    tagline: 'Ingeniería de antimicrobianos de nueva generación mediante diseño computacional y precisión experimental',
    cta1: 'Explorar Investigación',
    cta2: 'Ver Publicaciones',
    scroll: 'Desplázate para descubrir',
    enhancement: 'Activar visualización molecular'
  },
  ca: {
    firstName: 'Ramon',
    lastName: 'Roca Pinilla',
    role: 'Enginyer Biomèdic • Dissenyador de Proteïnes Antimicrobianes',
    tagline: 'Enginyeria d\'antimicrobians de nova generació mitjançant disseny computacional i precisió experimental',
    cta1: 'Explorar Recerca',
    cta2: 'Veure Publicacions',
    scroll: 'Desplaça\'t per descobrir',
    enhancement: 'Activar visualització molecular'
  }
};

const t = translations[lang];
---

<script is:inline>
  // Ultra-lightweight hero with optional video enhancement
  (function() {
    const prefersReduced = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
    const isSlowConnection = connection && ['slow-2g', '2g'].includes(connection.effectiveType);
    const saveData = connection?.saveData === true;
    const isMobile = /Android|iPhone|iPad|iPod/i.test(navigator.userAgent);
    
    class OptionalVideoEnhancer {
      constructor() {
        this.container = document.querySelector('[data-hero-video]');
        this.videoContainer = this.container?.querySelector('[data-video-container]');
        this.poster = this.container?.querySelector('.hero-poster-static img');
        this.playButton = this.container?.querySelector('[data-enable-hero-video]');
        this.isVideoEnabled = false;
        
        if (!this.container) return;
        this.init();
      }
      
      init() {
        // Always show the play button for user control
        this.setupPlayButton();
        
        // Hide play button only if video should never load
        if (prefersReduced || saveData) {
          this.hidePlayButton();
        }
        
        // Add connection info to play button
        this.updatePlayButtonState();
      }
      
      setupPlayButton() {
        if (!this.playButton) return;
        
        this.playButton.addEventListener('click', async () => {
          if (this.isVideoEnabled) return;
          
          this.playButton.disabled = true;
          this.playButton.innerHTML = `
            <svg width="20" height="20" fill="currentColor" class="animate-spin">
              <path d="M12 2v4m0 12v4M4.93 4.93l2.83 2.83m8.48 8.48l2.83 2.83M2 12h4m12 0h4M4.93 19.07l2.83-2.83m8.48-8.48l2.83-2.83"/>
            </svg>
            <span class="play-label">Loading...</span>
          `;
          
          try {
            await this.enableVideo();
          } catch (error) {
            this.handleVideoError(error);
          }
        });
      }
      
      async enableVideo() {
        // This is where we would load the video from external source
        // For now, we'll simulate the enhanced visual effect without the actual video
        
        // Create a subtle animation overlay instead of video
        const animationOverlay = document.createElement('div');
        animationOverlay.className = 'hero-animation-overlay';
        animationOverlay.innerHTML = `
          <div class="particle particle-1"></div>
          <div class="particle particle-2"></div>
          <div class="particle particle-3"></div>
          <div class="glow-effect"></div>
        `;
        
        this.videoContainer?.appendChild(animationOverlay);
        
        // Hide play button and show subtle animation
        this.playButton.style.opacity = '0';
        setTimeout(() => {
          this.playButton.style.display = 'none';
        }, 300);
        
        // Add enhanced visual state
        this.container?.classList.add('video-enhanced');
        this.isVideoEnabled = true;
        
        // Track user interaction
        if (window.gtag) {
          window.gtag('event', 'hero_enhancement_enabled', {
            event_category: 'engagement',
            event_label: 'visual_enhancement'
          });
        }
        
        // Simulate loading delay for UX
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
      
      handleVideoError(error) {
        console.warn('Video enhancement failed:', error);
        this.playButton.disabled = false;
        this.playButton.innerHTML = `
          <svg width="20" height="20" fill="currentColor">
            <path d="M8 5v14l11-7z"/>
          </svg>
          <span class="play-label">Retry</span>
        `;
      }
      
      updatePlayButtonState() {
        if (!this.playButton) return;
        
        let tooltip = 'Enable visual enhancement';
        
        if (isSlowConnection) {
          tooltip += ' (optimized for your connection)';
        } else if (isMobile) {
          tooltip += ' (lightweight animation)';
        }
        
        this.playButton.title = tooltip;
      }
      
      hidePlayButton() {
        if (this.playButton) {
          this.playButton.style.display = 'none';
        }
      }
    }
    
    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => new OptionalVideoEnhancer());
    } else {
      new OptionalVideoEnhancer();
    }
  })();
</script>

<section id="home" class="hero-final" role="banner" aria-label="Hero section">
  <!-- Static background with optional video enhancement -->
  <div class="hero-bg-video" aria-hidden="true" data-hero-video>
    <!-- Always-visible optimized poster image (no video loading by default) -->
    <picture class="hero-poster-static">
      <source 
        srcset="/Portfolio/hero/video-poster@0.5x.avif 480w, /Portfolio/hero/video-poster.avif 960w, /Portfolio/hero/video-poster@2x.avif 1920w" 
        type="image/avif" 
        sizes="100vw"
      />
      <source 
        srcset="/Portfolio/hero/video-poster@0.5x.webp 480w, /Portfolio/hero/video-poster.webp 960w, /Portfolio/hero/video-poster@2x.webp 1920w" 
        type="image/webp"
        sizes="100vw"
      />
      <img 
        src="/Portfolio/hero/video-poster.jpg" 
        alt="Protein structure visualization background"
        loading="eager"
        decoding="sync"
        width="1920"
        height="1080"
        sizes="100vw"
      />
    </picture>
    
    <!-- Video container (only populated when explicitly requested) -->
    <div class="hero-video-container" data-video-container="hero-bg"></div>
    
    <!-- Optional: Enhancement button to enable protein visualization -->
    <button 
      class="hero-video-play magnetic-button touch-feedback"
      type="button"
      aria-label="Enable protein structure visualization"
      data-enable-hero-video
      title="Click to see protein dynamics (may use additional bandwidth)"
    >
      <svg width="20" height="20" fill="currentColor" aria-hidden="true">
        <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
      </svg>
      <span class="play-label">{t.enhancement}</span>
    </button>
    
    <div class="video-overlay" aria-hidden="true"></div>
  </div>
  <div class="hero-gradient" aria-hidden="true"></div>
  <div class="hero-vignette" aria-hidden="true"></div>
  <div class="hero-pattern" aria-hidden="true"></div>
  
  <!-- Enhanced molecular structure overlay -->
  <div class="molecular-structure" aria-hidden="true">
    <!-- Protein nodes with enhanced animation -->
    <div class="protein-node protein-node-1"></div>
    <div class="protein-node protein-node-2"></div>
    <div class="protein-node protein-node-3"></div>
    <div class="protein-node protein-node-4"></div>
    <div class="protein-node protein-node-5"></div>
    <div class="protein-node protein-node-6"></div>
    
    <!-- Connection lines between protein nodes -->
    <svg class="protein-connections" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
      <path class="connection-line" d="M15 25 Q50 15 85 35" stroke="rgba(220,38,38,0.2)" stroke-width="0.5" fill="none"/>
      <path class="connection-line" d="M25 75 Q60 65 75 25" stroke="rgba(220,38,38,0.2)" stroke-width="0.5" fill="none"/>
      <path class="connection-line" d="M15 85 Q35 50 65 70" stroke="rgba(220,38,38,0.2)" stroke-width="0.5" fill="none"/>
    </svg>
    
    <!-- Enhanced DNA helix with better geometry -->
    <svg class="dna-helix" viewBox="0 0 200 400" fill="none" xmlns="http://www.w3.org/2000/svg">
      <!-- Left strand -->
      <path class="helix-strand helix-left" d="M70 50 Q100 75 70 100 Q40 125 70 150 Q100 175 70 200 Q40 225 70 250 Q100 275 70 300 Q40 325 70 350" 
            stroke="rgba(220,38,38,0.25)" stroke-width="1.5" fill="none"/>
      <!-- Right strand -->
      <path class="helix-strand helix-right" d="M130 50 Q100 75 130 100 Q160 125 130 150 Q100 175 130 200 Q160 225 130 250 Q100 275 130 300 Q160 325 130 350" 
            stroke="rgba(220,38,38,0.25)" stroke-width="1.5" fill="none"/>
      <!-- Base pairs -->
      <g class="base-pairs">
        <line x1="70" y1="75" x2="130" y2="75" stroke="rgba(255,215,0,0.3)" stroke-width="0.8"/>
        <line x1="70" y1="125" x2="130" y2="125" stroke="rgba(255,215,0,0.3)" stroke-width="0.8"/>
        <line x1="70" y1="175" x2="130" y2="175" stroke="rgba(255,215,0,0.3)" stroke-width="0.8"/>
        <line x1="70" y1="225" x2="130" y2="225" stroke="rgba(255,215,0,0.3)" stroke-width="0.8"/>
        <line x1="70" y1="275" x2="130" y2="275" stroke="rgba(255,215,0,0.3)" stroke-width="0.8"/>
        <line x1="70" y1="325" x2="130" y2="325" stroke="rgba(255,215,0,0.3)" stroke-width="0.8"/>
      </g>
    </svg>
  </div>
  
  <div class="hero-container">
    <div class="hero-content">
      <h1 class="hero-title fade-in-element" data-fade-in aria-label="{t.firstName} {t.lastName}">
        <span class="title-first">{t.firstName}</span>
        <span class="title-last">{t.lastName}</span>
      </h1>
      
      <div class="hero-role fade-in-element" data-fade-in role="contentinfo" aria-label="Professional specialization">
        <span class="role role-gradient">{t.role}</span>
      </div>
      
      <p class="hero-tagline fade-in-element" data-fade-in>{t.tagline}</p>
      
      <div class="hero-actions stagger-element" data-stagger>
        <a href="#research" class="btn btn-primary magnetic-button btn-enhanced touch-feedback" aria-label="{t.cta1}">
          {t.cta1}
          <svg class="btn-arrow" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M5 12h14M12 5l7 7-7 7"/>
          </svg>
        </a>
        <a href="#publications" class="btn btn-secondary magnetic-button btn-enhanced touch-feedback" aria-label="{t.cta2}">{t.cta2}</a>
      </div>
    </div>
  </div>
  
  <div class="scroll-hint" role="navigation" aria-label="Scroll indicator">
    <span>{t.scroll}</span>
    <div class="scroll-icon">
      <div class="scroll-dot"></div>
    </div>
  </div>
</section>

<style>
  /* Enhanced GPU Acceleration for All Hero Animations */
  .hero-final,
  .hero-bg-video,
  .hero-poster-static img,
  .molecular-structure,
  .protein-node,
  .dna-helix,
  .protein-connections,
  .hero-gradient,
  .btn-primary,
  .btn-secondary,
  .hero-video-play,
  .hero-content,
  .hero-title,
  .hero-role,
  .hero-tagline {
    will-change: transform, opacity;
    transform: translate3d(0, 0, 0);
    backface-visibility: hidden;
    perspective: 1000px;
  }

  .hero-final {
    position: relative;
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #0A0A0A;
    overflow: hidden;
  }
  
  /* Background video layer */
  .hero-bg-video {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    overflow: hidden;
    z-index: 0;
  }
  
  /* Static poster image - always visible */
  .hero-poster-static {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%) scale(1.1);
    width: 120%;
    height: 120%;
  }

  .hero-poster-static img {
    width: 100%;
    height: 100%;
    opacity: 0.18;
    filter: brightness(0.45) contrast(1.25) saturate(0.85) blur(0.5px);
    object-fit: cover;
    mix-blend-mode: overlay;
  }

  /* Video container for optional enhancements */
  .hero-video-container {
    position: absolute;
    inset: 0;
    z-index: 1;
  }

  /* Enhancement overlay animations */
  .hero-animation-overlay {
    position: absolute;
    inset: 0;
    opacity: 0;
    animation: fadeInAnimation 1s ease-in-out forwards;
  }

  .particle {
    position: absolute;
    width: 3px;
    height: 3px;
    background: rgba(255, 255, 255, 0.6);
    border-radius: 50%;
    animation: particleFloat 8s ease-in-out infinite;
  }

  .particle-1 {
    top: 20%;
    left: 10%;
    animation-delay: 0s;
  }

  .particle-2 {
    top: 60%;
    right: 15%;
    animation-delay: 2s;
  }

  .particle-3 {
    bottom: 30%;
    left: 70%;
    animation-delay: 4s;
  }

  .glow-effect {
    position: absolute;
    top: 10%;
    right: 20%;
    width: 200px;
    height: 200px;
    background: radial-gradient(circle, rgba(220,38,38,0.1) 0%, transparent 70%);
    border-radius: 50%;
    animation: glowPulse 6s ease-in-out infinite;
  }

  /* Enhanced state styling */
  .hero-bg-video.video-enhanced .hero-poster-static img {
    filter: brightness(0.5) contrast(1.3) saturate(0.9) blur(0.3px);
  }
  
  /* Molecular structure animation overlay */
  .molecular-structure {
    position: absolute;
    inset: 0;
    pointer-events: none;
    opacity: 0.15;
    z-index: 3;
  }
  
  .dna-helix {
    position: absolute;
    right: 8%;
    top: 15%;
    width: 200px;
    height: 400px;
    opacity: 0.15;
    animation: helixRotate 30s linear infinite;
  }
  
  .protein-connections {
    position: absolute;
    left: 8%;
    top: 60%;
    width: 150px;
    height: 150px;
    opacity: 0.12;
    animation: connectionsFloat 25s ease-in-out infinite;
  }
  
  .protein-node {
    position: absolute;
    width: 5px;
    height: 5px;
    background: radial-gradient(circle, rgba(220,38,38,0.9) 0%, rgba(255,215,0,0.4) 50%, transparent 70%);
    border-radius: 50%;
    animation: proteinPulse 4s ease-in-out infinite;
    box-shadow: 0 0 8px rgba(220,38,38,0.3);
  }
  
  .protein-node-1 { top: 12%; left: 12%; animation-delay: 0s; }
  .protein-node-2 { top: 22%; right: 18%; animation-delay: 0.8s; }
  .protein-node-3 { top: 45%; left: 8%; animation-delay: 1.6s; }
  .protein-node-4 { bottom: 28%; left: 22%; animation-delay: 2.4s; }
  .protein-node-5 { bottom: 18%; right: 12%; animation-delay: 3.2s; }
  .protein-node-6 { top: 65%; right: 25%; animation-delay: 1.2s; }
  
  @keyframes helixRotate {
    0% { transform: rotate(0deg) scale(1) translateY(0px); }
    25% { transform: rotate(90deg) scale(1.05) translateY(-10px); }
    50% { transform: rotate(180deg) scale(1.1) translateY(0px); }
    75% { transform: rotate(270deg) scale(1.05) translateY(10px); }
    100% { transform: rotate(360deg) scale(1) translateY(0px); }
  }
  
  @keyframes proteinPulse {
    0%, 100% { opacity: 0.4; transform: scale(1); }
    50% { opacity: 0.9; transform: scale(1.8); }
  }
  
  @keyframes connectionsFloat {
    0%, 100% { transform: rotate(0deg) scale(1); opacity: 0.12; }
    33% { transform: rotate(120deg) scale(1.1); opacity: 0.18; }
    66% { transform: rotate(240deg) scale(0.9); opacity: 0.08; }
  }
  
  .helix-strand {
    animation: strandGlow 8s ease-in-out infinite;
  }
  
  .helix-left {
    animation-delay: 0s;
  }
  
  .helix-right {
    animation-delay: 4s;
  }
  
  .base-pairs line {
    animation: basePairFlicker 6s ease-in-out infinite;
  }
  
  .base-pairs line:nth-child(1) { animation-delay: 0s; }
  .base-pairs line:nth-child(2) { animation-delay: 1s; }
  .base-pairs line:nth-child(3) { animation-delay: 2s; }
  .base-pairs line:nth-child(4) { animation-delay: 3s; }
  .base-pairs line:nth-child(5) { animation-delay: 4s; }
  .base-pairs line:nth-child(6) { animation-delay: 5s; }
  
  @keyframes strandGlow {
    0%, 100% { opacity: 0.25; stroke-width: 1.5; }
    50% { opacity: 0.4; stroke-width: 2; }
  }
  
  @keyframes basePairFlicker {
    0%, 90%, 100% { opacity: 0.3; }
    5%, 85% { opacity: 0.6; }
  }
  
  .connection-line {
    animation: connectionPulse 12s ease-in-out infinite;
  }
  
  .connection-line:nth-child(1) { animation-delay: 0s; }
  .connection-line:nth-child(2) { animation-delay: 4s; }
  .connection-line:nth-child(3) { animation-delay: 8s; }
  
  @keyframes connectionPulse {
    0%, 90%, 100% { opacity: 0.2; stroke-width: 0.5; }
    10%, 80% { opacity: 0.4; stroke-width: 1; }
  }

  /* Play/Enhancement button */
  .hero-video-play {
    position: absolute;
    bottom: 2rem;
    right: 2rem;
    z-index: 10;
    background: rgba(0, 0, 0, 0.7);
    border: 1px solid rgba(255, 255, 255, 0.2);
    color: white;
    border-radius: 24px;
    padding: 8px 16px;
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    backdrop-filter: blur(8px);
    font-size: 14px;
    font-weight: 500;
  }

  .hero-video-play:hover:not(:disabled) {
    background: rgba(220, 38, 38, 0.8);
    transform: translateY(-2px);
  }

  .hero-video-play:focus-visible {
    outline: 2px solid rgba(255, 255, 255, 0.8);
    outline-offset: 2px;
  }

  .hero-video-play:disabled {
    opacity: 0.7;
    cursor: not-allowed;
  }

  .play-label {
    font-size: 12px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  /* Animations */
  @keyframes fadeInAnimation {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes particleFloat {
    0%, 100% { transform: translateY(0px) translateX(0px) scale(1); opacity: 0.4; }
    25% { transform: translateY(-20px) translateX(10px) scale(1.2); opacity: 0.8; }
    50% { transform: translateY(-40px) translateX(-5px) scale(0.8); opacity: 0.6; }
    75% { transform: translateY(-20px) translateX(-15px) scale(1.1); opacity: 0.9; }
  }

  @keyframes glowPulse {
    0%, 100% { opacity: 0.3; transform: scale(1); }
    50% { opacity: 0.6; transform: scale(1.2); }
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }

  /* Legacy video selector - now applies to lazy video */
  .hero-bg-video video {
    position: absolute;
    top: 50%;
    left: 50%;
    min-width: 120%;
    min-height: 120%;
    width: auto;
    height: auto;
    transform: translate(-50%, -50%) scale(1.1);
    opacity: 0.18;
    filter: brightness(0.45) contrast(1.25) saturate(0.85) blur(0.5px);
    object-fit: cover;
    mix-blend-mode: overlay;
  }
  
  .video-overlay {
    position: absolute;
    inset: 0;
    background: linear-gradient(
      135deg,
      rgba(10, 10, 10, 0.88) 0%,
      rgba(10, 10, 10, 0.74) 25%,
      rgba(10, 10, 10, 0.62) 50%,
      rgba(10, 10, 10, 0.74) 75%,
      rgba(10, 10, 10, 0.88) 100%
    );
    z-index: 1;
  }
  
  /* Subtle gradient background */
  .hero-gradient {
    position: absolute;
    inset: 0;
    background:
      radial-gradient(60% 50% at 85% 10%, rgba(220,38,38,0.22) 0%, rgba(220,38,38,0.12) 40%, transparent 70%),
      radial-gradient(40% 40% at 10% 90%, rgba(220,38,38,0.10) 0%, transparent 70%);
    opacity: 0.65;
    animation: gradientShift 16s ease-in-out infinite;
    z-index: 1;
  }

  .hero-vignette {
    position: absolute;
    inset: -10% -10% -10% -10%;
    z-index: 2;
    pointer-events: none;
    background: radial-gradient(120% 120% at 50% -10%, rgba(0,0,0,0) 30%, rgba(0,0,0,0.35) 70%, rgba(0,0,0,0.65) 100%);
  }
  
  /* Subtle dot pattern */
  .hero-pattern {
    position: absolute;
    inset: 0;
    background-image: 
      radial-gradient(circle at 1px 1px, rgba(255, 255, 255, 0.025) 1px, transparent 1px);
    background-size: 44px 44px;
    z-index: 2;
  }
  
  .hero-container {
    position: relative;
    z-index: 10;
    width: 100%;
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
  }
  
  .hero-content {
    text-align: center;
    max-width: 900px;
    margin: 0 auto;
    position: relative;
    z-index: 10;
  }
  
  /* Standardized Hero Typography */
  .hero-title {
    font-family: var(--font-display);
    font-size: clamp(3.5rem, 9vw, 7rem);
    font-weight: var(--font-light);
    line-height: var(--leading-none);
    letter-spacing: var(--tracking-tighter);
    margin-bottom: 2rem;
    animation: fadeInUp 0.8s ease-out;
  }
  
  /* Language-specific hero title optimizations */
  .hero-title:lang(es),
  .hero-title:lang(ca) {
    font-size: clamp(3.25rem, 8.5vw, 6.5rem);
    line-height: 0.95;
    letter-spacing: var(--tracking-tight);
  }
  
  .title-first {
    display: block;
    color: #FFFFFF;
    opacity: 0.9;
  }
  
  .title-last {
    display: block;
    font-weight: 600;
    background: linear-gradient(135deg, #FFFFFF 0%, #FF9A9A 30%, #DC2626 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    margin-top: 0.2em;
  }
  
  .hero-role {
    display: flex;
    align-items: center;
    justify-content: center;
    margin-bottom: 2.5rem;
    animation: fadeInUp 0.8s ease-out 0.1s both;
  }
  
  .role {
    font-family: var(--font-primary);
    font-size: clamp(1.125rem, 2.5vw, 1.25rem);
    color: #E5E5E5;
    text-transform: uppercase;
    letter-spacing: var(--tracking-wider);
    font-weight: var(--font-medium);
    text-align: center;
    line-height: var(--leading-snug);
  }
  
  .role-gradient {
    background: linear-gradient(135deg, 
      #FFFFFF 0%, 
      #FFB3B3 25%, 
      #FF6B6B 50%, 
      #DC2626 75%, 
      #B91C1C 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    background-size: 200% 100%;
    animation: gradientShimmer 4s ease-in-out infinite;
    position: relative;
  }
  
  .role-gradient::after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    width: 80px;
    height: 2px;
    background: linear-gradient(90deg, transparent, rgba(220,38,38,0.6), transparent);
    border-radius: 1px;
    animation: underlineGlow 3s ease-in-out infinite;
  }
  
  @keyframes gradientShimmer {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }
  
  @keyframes underlineGlow {
    0%, 100% { opacity: 0.4; transform: translateX(-50%) scaleX(1); }
    50% { opacity: 0.8; transform: translateX(-50%) scaleX(1.2); }
  }
  
  /* Language-specific role optimizations */
  .role:lang(es),
  .role:lang(ca) {
    font-size: clamp(1rem, 2.25vw, 1.125rem);
    letter-spacing: var(--tracking-wide);
    line-height: var(--leading-normal);
  }
  
  .hero-tagline {
    font-family: var(--font-primary);
    font-size: clamp(1.125rem, 3vw, 1.375rem);
    line-height: var(--leading-relaxed);
    color: #E5E5E5;
    max-width: 720px;
    margin: 0 auto 3.5rem;
    font-weight: var(--font-light);
    animation: fadeInUp 0.8s ease-out 0.2s both;
    text-align: center;
    text-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }
  
  /* Language-specific tagline optimizations */
  .hero-tagline:lang(es),
  .hero-tagline:lang(ca) {
    max-width: 780px;
    line-height: var(--leading-loose);
    font-size: clamp(1rem, 2.75vw, 1.25rem);
  }
  
  .hero-tagline::after {
    content: '';
    display: block;
    width: 60px;
    height: 2px;
    background: linear-gradient(90deg, transparent, #DC2626, transparent);
    margin: 1.5rem auto 0;
    opacity: 0.6;
  }
  
  .hero-actions {
    display: flex;
    gap: 1.5rem;
    justify-content: center;
    flex-wrap: wrap;
    animation: fadeInUp 0.8s ease-out 0.3s both;
  }
  
  .btn {
    padding: 0.875rem 2rem;
    min-height: 44px;
    font-family: var(--font-primary);
    font-size: var(--text-base);
    font-weight: var(--font-semibold);
    text-decoration: none;
    border-radius: 8px;
    transition: all var(--anim-duration-base) var(--anim-easing-default);
    letter-spacing: var(--tracking-normal);
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    position: relative;
    overflow: hidden;
    outline: none;
  }
  .btn:focus-visible { box-shadow: 0 0 0 3px rgba(239,68,68,.45), 0 0 0 5px rgba(255,255,255,.15); }
  
  .btn::before {
    content: '';
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, transparent, rgba(255, 255, 255, 0.1));
    transform: translateX(-100%);
    transition: transform 0.6s;
  }
  
  .btn:hover::before {
    transform: translateX(100%);
  }
  
  .btn-primary {
    background: #EF4444; /* Better contrast */
    color: #FFFFFF;
    border: 1px solid #EF4444;
    box-shadow: 0 8px 30px rgba(220, 38, 38, 0.25);
  }
  
  .btn-primary:hover {
    background: #FF5555; /* Brighter hover */
    box-shadow: 0 10px 40px rgba(220, 38, 38, 0.3);
    transform: translateY(-2px);
  }
  
  .btn-secondary {
    background: transparent;
    color: #FFFFFF;
    border: 1px solid rgba(255, 255, 255, 0.2);
    backdrop-filter: blur(10px);
    box-shadow: inset 0 1px 0 rgba(255,255,255,0.06);
  }
  
  .btn-secondary:hover {
    background: rgba(255, 255, 255, 0.05);
    border-color: rgba(255, 255, 255, 0.4);
    transform: translateY(-2px);
  }
  
  .btn-arrow {
    transition: transform 0.3s;
  }
  
  .btn:hover .btn-arrow {
    transform: translateX(4px);
  }
  
  /* Scroll indicator */
  .scroll-hint {
    position: absolute;
    bottom: 3rem;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
    animation: fadeIn 1s ease-out 1s both;
  }
  
  .scroll-hint span {
    font-family: var(--font-primary);
    font-size: var(--text-sm);
    color: #999999;
    text-transform: uppercase;
    letter-spacing: var(--tracking-wider);
    font-weight: var(--font-normal);
  }
  
  .scroll-icon {
    width: 26px;
    height: 38px;
    border: 2px solid rgba(255, 255, 255, 0.22);
    border-radius: 13px;
    position: relative;
    animation: scrollBounce 2s ease-in-out infinite;
  }
  
  .scroll-dot {
    width: 4px;
    height: 8px;
    background: #EF4444; /* Better contrast */
    border-radius: 2px;
    position: absolute;
    top: 6px;
    left: 50%;
    transform: translateX(-50%);
    animation: scrollDot 2s ease-in-out infinite;
  }
  
  /* Animations */
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes gradientShift {
    0%, 100% { opacity: 0.6; }
    50% { opacity: 0.8; }
  }
  
  /* Enhanced video fallback styles with premium loading spinner */
  .video-fallback {
    position: absolute;
    inset: 0;
    background: linear-gradient(135deg, #0A0A0A 0%, #1a0a0a 100%);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    z-index: 0;
    transition: opacity 0.3s ease;
  }
  
  .loading-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid rgba(255, 255, 255, 0.1);
    border-top: 3px solid var(--accent-red);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    opacity: 0.8;
    box-shadow: 0 0 30px rgba(220, 38, 38, 0.4);
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .hero-bg-video video.video-loaded + .video-overlay + .video-fallback {
    display: none;
  }
  
  .hero-bg-video.video-failed .video-fallback {
    display: block;
    background: 
      radial-gradient(ellipse at top right, rgba(220, 38, 38, 0.2) 0%, transparent 60%),
      radial-gradient(ellipse at bottom left, rgba(220, 38, 38, 0.1) 0%, transparent 60%),
      linear-gradient(135deg, #0A0A0A 0%, #1a0a0a 100%);
  }
  
  .hero-bg-video.video-failed video {
    display: none;
  }
  
  @keyframes scrollBounce {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(5px); }
  }
  
  @keyframes scrollDot {
    0%, 100% { 
      opacity: 0;
      transform: translateX(-50%) translateY(0);
    }
    40% { opacity: 1; }
    80% { 
      opacity: 0;
      transform: translateX(-50%) translateY(10px);
    }
  }
  
  /* Responsive */
  @media (max-width: 768px) {
    .hero-bg-video video {
      opacity: 0.2;
      transform: translate(-50%, -54%) scale(1.3);
    }
    
    .hero-title { font-size: clamp(2.75rem, 11vw, 4.25rem); }
    
    .hero-role .role {
      font-size: 1.1rem;
      line-height: 1.3;
      letter-spacing: 0.06em;
    }
    
    .hero-tagline {
      font-size: clamp(1rem, 2.5vw, 1.125rem);
      overflow: hidden;
      white-space: nowrap;
      border-right: 2px solid var(--accent-red);
      animation: typing 3s steps(40, end), blink-caret 0.75s step-end infinite;
    }
    
    .hero-tagline:lang(es),
    .hero-tagline:lang(ca) {
      font-size: clamp(0.95rem, 2.25vw, 1.0625rem);
      max-width: 820px;
      word-break: break-word;
      hyphens: auto;
    }
    
    .hero-actions {
      flex-direction: column;
      width: 100%;
      max-width: 280px;
      margin: 0 auto;
    }
    
    .btn {
      width: 100%;
      justify-content: center;
    }
  }
  
  @media (prefers-reduced-motion: reduce) {
    .hero-gradient,
    .scroll-icon,
    .scroll-dot,
    .hero-tagline,
    .molecular-structure,
    .dna-helix,
    .protein-node,
    .protein-connections,
    .role-gradient {
      animation: none;
      border-right: none;
    }
    
    .molecular-structure {
      display: none;
    }
    
    .role-gradient {
      background: linear-gradient(135deg, #FFFFFF 0%, #FF9A9A 50%, #DC2626 100%);
    }
    
    .role-gradient::after {
      display: none;
    }
  }
</style>

<style is:global>
@keyframes typing {
  from { width: 0; }
  to { width: 100%; }
}
@keyframes blink-caret {
  0%, 100% { border-color: transparent; }
  50% { border-color: var(--accent-red); }
}
</style>
