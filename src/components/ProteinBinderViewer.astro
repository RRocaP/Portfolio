---
// This component will display a 3D protein binder viewer using NGL Viewer.
// It's designed to be stylish and match the existing aesthetic of the portfolio.
---

<div class="protein-viewer-container">
  <div id="ngl-binder-viewer" style="width: 100%; height: 400px;"></div>
  <p class="viewer-caption">De Novo Designed Protein (PDB: 8KCK) - A Computationally Designed Binder</p>
</div>

<script is:inline>
  // Load NGL Viewer library dynamically
  function loadNGLViewer() {
    return new Promise((resolve, reject) => {
      if (window.NGL) {
        resolve(window.NGL);
        return;
      }
      const script = document.createElement('script');
      script.src = 'https://cdn.jsdelivr.net/npm/ngl@2.0.0-dev.37/dist/ngl.min.js';
      script.onload = () => resolve(window.NGL);
      script.onerror = reject;
      document.head.appendChild(script);
    });
  }

  document.addEventListener('DOMContentLoaded', async () => {
    const viewerElement = document.getElementById('ngl-binder-viewer');
    if (!viewerElement) return;
    
    let isLoaded = false;
    
    const initViewer = async () => {
      if (isLoaded) return;
      isLoaded = true;
      
      try {
        const NGL = await loadNGLViewer();
        const stage = new NGL.Stage("ngl-binder-viewer");

      // Handle window resizing
      window.addEventListener("resize", function () {
        stage.handleResize();
      });

      // Load the PDB structure for the de novo designed protein (PDB ID: 8KCK)
      stage.loadFile("https://mmtf.rcsb.org/v1.0/full/8KCK", { defaultRepresentation: true }).then(function (component) {
        // Clear default representation and add custom ones for better styling
        component.removeAllRepresentations();

        // Add a cartoon representation with a nice color scheme
        component.addRepresentation("cartoon", { color: "sstruc", smoothSheet: true, aspectRatio: 3 });

        // Add a ball and stick representation for side chains
        component.addRepresentation("ballandstick", { sele: "sidechain and not hetero", color: "element" });

        // Add a licorice representation for hetero atoms (e.g., ligands, ions)
        component.addRepresentation("licorice", { sele: "hetero", color: "element" });

        // Center and zoom to the loaded structure
        component.autoView();
      });

      } catch (error) {
        console.error("Failed to load NGL Viewer:", error);
      }
    };
    
    // Use Intersection Observer for lazy loading
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          initViewer();
          observer.disconnect();
        }
      });
    }, { threshold: 0.1 });
    
    observer.observe(viewerElement);
  });
</script>

<style>
  /* Reusing styles from ProteinViewer.astro for consistency */
  .protein-viewer-container {
    background: var(--background-alt);
    padding: var(--space-md);
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    margin-top: var(--space-lg);
    text-align: center;
    border: 1px solid var(--border);
  }

  #ngl-binder-viewer {
    border-radius: 4px;
    overflow: hidden; /* Ensures the viewer respects border-radius */
    background-color: var(--background); /* Match background for seamless look */
  }

  .viewer-caption {
    margin-top: var(--space-md);
    font-size: 0.9rem;
    color: var(--secondary);
    font-style: italic;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .protein-viewer-container {
      padding: var(--space-sm);
    }
    #ngl-binder-viewer {
      height: 300px; /* Adjust height for smaller screens */
    }
  }

  /* Dark Mode adjustments for NGL Viewer background */
  @media (prefers-color-scheme: dark) {
    .protein-viewer-container {
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    }
    #ngl-binder-viewer {
      background-color: #1a1a1a; /* Darker background for NGL Viewer in dark mode */
    }
  }
</style>
