---
import { proteinVideos } from '../data/proteinVideos.js';

interface Props {
  class?: string;
}

const { class: className = "" } = Astro.props;
---

<div class={`video-showcase ${className}`}>
  <div class="showcase-header">
    <h3>Protein Structure Visualizations</h3>
    <p>Interactive molecular structures from our research</p>
  </div>
  
  <div class="video-grid">
    {proteinVideos.map((video) => (
      <div class="video-card">
        <div class="video-placeholder" data-pdb={video.pdbId}>
          <img 
            src={video.thumbnail} 
            alt={video.title}
            loading="lazy"
            class="video-thumbnail"
          />
          <div class="play-overlay">
            <button class="play-button" aria-label={`View ${video.title}`}>
              <svg width="60" height="60" viewBox="0 0 60 60" fill="none">
                <circle cx="30" cy="30" r="29" stroke="currentColor" stroke-width="2" opacity="0.8"/>
                <path d="M24 20L40 30L24 40V20Z" fill="currentColor"/>
              </svg>
            </button>
          </div>
        </div>
        <div class="video-info">
          <h4>{video.title}</h4>
          <p>{video.description}</p>
          <a 
            href={`https://www.rcsb.org/structure/${video.pdbId}`} 
            target="_blank" 
            rel="noopener"
            class="pdb-link"
          >
            View on PDB â†’
          </a>
        </div>
      </div>
    ))}
  </div>
</div>

<style>
  .video-showcase {
    padding: 3rem 0;
  }

  .showcase-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .showcase-header h3 {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 0.5rem;
    background: linear-gradient(135deg, var(--primary) 0%, var(--accent-red) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .showcase-header p {
    color: var(--secondary);
    font-size: 1.1rem;
  }

  .video-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: 2rem;
  }

  .video-card {
    background: var(--background-card);
    border: 1px solid var(--border);
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.3s ease;
  }

  .video-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 12px 40px rgba(218, 41, 28, 0.15);
    border-color: var(--accent-red);
  }

  .video-placeholder {
    position: relative;
    aspect-ratio: 16/9;
    overflow: hidden;
    background: var(--background-alt);
  }

  .video-thumbnail {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .video-card:hover .video-thumbnail {
    transform: scale(1.05);
  }

  .play-overlay {
    position: absolute;
    inset: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(0, 0, 0, 0.4);
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  .video-card:hover .play-overlay {
    opacity: 1;
  }

  .play-button {
    background: none;
    border: none;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .play-button:hover {
    transform: scale(1.1);
    color: var(--accent-red);
  }

  .video-info {
    padding: 1.5rem;
  }

  .video-info h4 {
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--primary);
  }

  .video-info p {
    color: var(--secondary);
    font-size: 0.95rem;
    margin-bottom: 1rem;
    line-height: 1.6;
  }

  .pdb-link {
    color: var(--accent-red);
    font-size: 0.9rem;
    font-weight: 500;
    text-decoration: none;
    transition: all 0.2s ease;
    display: inline-flex;
    align-items: center;
    gap: 0.25rem;
  }

  .pdb-link:hover {
    transform: translateX(4px);
    color: var(--accent-red-hover);
  }

  @media (max-width: 768px) {
    .video-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const playButtons = document.querySelectorAll('.play-button');
    
    playButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        const card = button.closest('.video-card');
        const pdbId = card?.querySelector('[data-pdb]')?.getAttribute('data-pdb');
        
        if (pdbId) {
          // Open PDB viewer in new tab
          window.open(`https://www.rcsb.org/3d-view/${pdbId}`, '_blank');
        }
      });
    });
  });
</script>