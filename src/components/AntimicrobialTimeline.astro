---
// Wrapper component for the Antimicrobial Resistance Timeline
---

<div id="antimicrobial-timeline-container" class="visualization-wrapper">
  <div id="antimicrobial-timeline-root" class="timeline-loading">
    <div class="loading-skeleton">
      <div class="skeleton-pulse"></div>
      <p class="loading-text">Loading timeline...</p>
    </div>
  </div>
</div>

<script type="module">
  // Lazy-hydrate the React timeline when it scrolls into view
  const container = document.getElementById('antimicrobial-timeline-root');
  if (container) {
    const loadTimeline = async () => {
      const [{ default: AntimicrobialResistanceTimeline }, React, ReactDOM] = await Promise.all([
        import('./AntimicrobialResistanceTimeline.tsx'),
        import('react'),
        import('react-dom/client')
      ]);
      container.classList.remove('timeline-loading');
      container.innerHTML = '';
      
      // Create error boundary wrapper
      const ErrorBoundary = class extends React.Component {
        constructor(props) {
          super(props);
          this.state = { hasError: false };
        }
        
        static getDerivedStateFromError(error) {
          return { hasError: true };
        }
        
        render() {
          if (this.state.hasError) {
            return React.createElement('div', { 
              style: { 
                padding: '2rem', 
                textAlign: 'center',
                color: 'var(--tertiary)'
              }
            }, 'Timeline temporarily unavailable');
          }
          return this.props.children;
        }
      };
      
      const root = ReactDOM.createRoot(container);
      root.render(
        React.createElement(ErrorBoundary, null,
          React.createElement(AntimicrobialResistanceTimeline)
        )
      );
    };

    // Use IntersectionObserver to defer loading until visible
    if ('IntersectionObserver' in window) {
      const io = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            io.disconnect();
            loadTimeline();
          }
        });
      }, { rootMargin: '200px 0px' });
      io.observe(container);
    } else {
      // Fallback for very old browsers
      loadTimeline();
    }
  }
</script>

<style>
  .visualization-wrapper { margin: 3rem 0; padding: 0; background: transparent; }
  
  .timeline-loading {
    min-height: 400px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  
  .loading-skeleton {
    text-align: center;
  }
  
  .skeleton-pulse {
    width: 200px;
    height: 4px;
    background: linear-gradient(90deg, 
      rgba(220, 38, 38, 0.1) 0%, 
      rgba(220, 38, 38, 0.3) 50%, 
      rgba(220, 38, 38, 0.1) 100%);
    border-radius: 2px;
    margin: 0 auto 1rem;
    animation: pulse 1.5s ease-in-out infinite;
  }
  
  .loading-text {
    color: var(--tertiary);
    font-size: 0.9rem;
    opacity: 0.7;
  }
  
  @keyframes pulse {
    0%, 100% { opacity: 0.6; }
    50% { opacity: 1; }
  }

  @media (max-width: 768px) {
    .visualization-wrapper {
      padding: 1rem;
      margin: 2rem 0;
    }
    .timeline-loading {
      min-height: 300px;
    }
  }
</style>
