---
const { url } = Astro;
// Determine active language from the current path
const segments = url.pathname.split('/').filter(Boolean);
let lang = 'en';
if (segments[0] === 'Portfolio' && ['en','es','ca'].includes(segments[1] || '')) {
  lang = segments[1];
} else if (['en','es','ca'].includes(segments[0] || '')) {
  lang = segments[0];
}
const base = `/Portfolio/${lang}/`;

const t = {
  en: { home: 'Home', about: 'About', research: 'Research', publications: 'Publications', contact: 'Contact' },
  es: { home: 'Inicio', about: 'Sobre mí', research: 'Investigación', publications: 'Publicaciones', contact: 'Contacto' },
  ca: { home: 'Inici', about: 'Sobre mi', research: 'Recerca', publications: 'Publicacions', contact: 'Contacte' },
}[lang] || {
  home: 'Home', about: 'About', research: 'Research', publications: 'Publications', contact: 'Contact'
};
---

<nav class="navigation">
  <div class="container">
    <div class="nav-wrapper">
      <a href={base} class="logo">Ramon Roca Pinilla</a>
      
      <button class="mobile-menu-toggle" aria-label="Toggle menu">
        <span></span>
        <span></span>
        <span></span>
      </button>
      
      <ul class="nav-links">
        <li><a href={base} class="nav-link">{t.home}</a></li>
        <li><a href={`${base}#about`} class="nav-link">{t.about}</a></li>
        <li><a href={`${base}#research`} class="nav-link">{t.research}</a></li>
        <li><a href={`${base}#publications`} class="nav-link">{t.publications}</a></li>
        <li><a href={`${base}#contact`} class="nav-link">{t.contact}</a></li>
        <li class="lang-switcher">
          <a href="/Portfolio/en/" class={`lang-link ${lang==='en' ? 'active' : ''}`}>EN</a>
          <a href="/Portfolio/es/" class={`lang-link ${lang==='es' ? 'active' : ''}`}>ES</a>
          <a href="/Portfolio/ca/" class={`lang-link ${lang==='ca' ? 'active' : ''}`}>CA</a>
        </li>
        <li class="theme-switcher" aria-label="Theme">
          <button class="theme-pill" data-theme="brand" title="Brand" aria-pressed="false">
            <span class="dot dot-brand" aria-hidden="true"></span>
            <span class="sr-only">Brand</span>
          </button>
          <button class="theme-pill" data-theme="navy" title="Navy" aria-pressed="true">
            <span class="dot dot-navy" aria-hidden="true"></span>
            <span class="sr-only">Navy</span>
          </button>
          <button class="theme-pill" data-theme="navy-gold" title="Navy + Gold" aria-pressed="false">
            <span class="dot dot-navy" aria-hidden="true"></span>
            <span class="dot dot-gold" style="margin-left:-6px" aria-hidden="true"></span>
            <span class="sr-only">Navy + Gold</span>
          </button>
        </li>
      </ul>
    </div>
  </div>
</nav>

<style>
  .navigation {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    background: transparent; /* Start transparent */
    backdrop-filter: saturate(180%) blur(10px);
    -webkit-backdrop-filter: saturate(180%) blur(10px);
    z-index: 1000;
    box-shadow: none; /* No shadow initially */
    transition: background 0.3s ease, box-shadow 0.3s ease;
  }

  .navigation.scrolled {
    background: rgba(var(--background-rgb), 0.95); /* Use RGB for opacity */
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* Subtle shadow on scroll */
  }

  .nav-wrapper {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 0;
  }

  .logo {
    font-family: var(--font-primary);
    font-size: 1.3rem; /* Slightly larger logo */
    font-weight: var(--font-weight-bold);
    color: var(--primary); /* Use primary color variable */
    text-decoration: none;
    letter-spacing: -0.03em;
    opacity: 1;
  }

  .nav-links {
    display: flex;
    list-style: none;
    gap: 2.5rem; /* Increased gap */
    align-items: center;
  }

  .nav-links .nav-link {
    color: var(--primary);
    font-weight: var(--font-weight-medium);
    font-size: 1rem; /* Slightly larger nav links */
    position: relative;
    transition: all 0.2s ease; /* Smoother transitions */
    border: none;
    opacity: 1;
  }

  .nav-links .nav-link::after {
    content: '';
    position: absolute;
    width: 0%;
    height: 2px;
    bottom: -5px;
    left: 0;
    background-color: var(--accent-red);
    transition: width 0.3s ease-out;
  }

  .nav-links .nav-link:hover::after,
  .nav-links .nav-link.active::after {
    width: 100%;
  }

  .nav-links .nav-link:hover,
  .nav-links .nav-link.active {
    color: var(--accent-red);
    transform: translateY(-2px); /* Subtle lift on hover/active */
  }

  .lang-switcher {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .lang-switcher .lang-link {
    font-size: 0.85rem;
    font-weight: var(--font-weight-semibold);
    color: var(--tertiary);
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    transition: all 0.2s ease;
  }

  .lang-switcher .lang-link:hover {
    color: var(--accent-red);
    background: rgba(var(--accent-red-rgb), 0.1);
  }

  .lang-switcher .lang-link.active {
    color: var(--background);
    background: var(--gradient-catalan);
    box-shadow: 0 0 0 1px rgba(255,255,255,0.06) inset;
  }

  /* Theme switcher */
  .theme-switcher { display: flex; gap: 0.4rem; margin-left: 0.75rem; }
  .theme-pill { display: inline-flex; align-items: center; gap: 0.25rem; padding: 0.25rem 0.45rem; border-radius: 999px; background: var(--background); border: 1px solid var(--border); cursor: pointer; transition: all 0.2s ease; }
  .theme-pill[aria-pressed="true"], .theme-pill:hover { border-color: var(--accent-red); box-shadow: 0 0 0 2px var(--accent-red-bg) inset; }
  .dot { width: 10px; height: 10px; border-radius: 999px; display: inline-block; }
  .dot-brand { background: #dc2626; }
  .dot-navy { background: #1e40af; }
  .dot-gold { background: #fbbf24; border: 1px solid rgba(0,0,0,0.15); }
  .sr-only { position: absolute; width: 1px; height: 1px; padding: 0; margin: -1px; overflow: hidden; clip: rect(0,0,0,0); border: 0; }

  .mobile-menu-toggle {
    display: none;
    flex-direction: column;
    justify-content: space-between;
    width: 28px; /* Slightly larger toggle */
    height: 22px;
    background: none;
    border: none;
    cursor: pointer;
    z-index: 1001; /* Ensure it's above nav links */
  }

  .mobile-menu-toggle span {
    width: 100%;
    height: 2px;
    background: var(--primary); /* Use primary color variable */
    border-radius: 2px;
    transition: all 0.3s ease;
  }

  .mobile-menu-toggle.active span:nth-child(1) {
    transform: translateY(10px) rotate(45deg);
  }

  .mobile-menu-toggle.active span:nth-child(2) {
    opacity: 0;
  }

  .mobile-menu-toggle.active span:nth-child(3) {
    transform: translateY(-10px) rotate(-45deg);
  }

  @media (max-width: 768px) {
    .mobile-menu-toggle {
      display: flex;
    }

    .nav-links {
      position: fixed; /* Use fixed for full screen overlay */
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--background); /* Full background for mobile menu */
      flex-direction: column;
      justify-content: center;
      align-items: center;
      padding: 2rem;
      box-shadow: none;
      transform: translateX(100%); /* Slide from right */
      transition: transform 0.4s ease-out;
    }

    .nav-links.active {
      transform: translateX(0);
    }

    .nav-links li {
      margin-bottom: 1.5rem; /* Spacing for mobile links */
    }

    .nav-links .nav-link {
      font-size: 1.8rem; /* Larger links for mobile */
      font-weight: var(--font-weight-bold);
    }

    .lang-switcher {
      margin-top: 1.5rem;
      gap: 1rem;
      border: 1px solid var(--border); /* Add a subtle border */
      border-radius: 8px; /* Rounded corners for the container */
      padding: 0.5rem; /* Padding around the language links */
    }

    .lang-switcher .lang-link {
      font-size: 1.2rem;
      padding: 0.5rem 0.8rem;
      color: var(--primary); /* Ensure good contrast */
      border: 1px solid transparent; /* Add a transparent border for consistency */
      border-radius: 4px; /* Keep individual link border-radius */
    }

    .lang-switcher .lang-link:hover {
      color: var(--accent-red);
      background: rgba(var(--accent-red-rgb), 0.1);
      border-color: var(--accent-red); /* Highlight border on hover */
    }

    .theme-switcher { margin-top: 1rem; }
  }

  /* Dark Mode adjustments */
  @media (prefers-color-scheme: dark) {
    .navigation.scrolled {
      background: rgba(var(--background-rgb-dark), 0.95);
      box-shadow: 0 2px 10px rgba(255, 255, 255, 0.05);
    }
    .mobile-menu-toggle span {
      background: var(--primary); /* Ensure lines are visible in dark mode */
    }
    .nav-links {
      background: var(--background); /* Match dark mode background */
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const navigation = document.querySelector('.navigation');
    const mobileToggle = document.querySelector('.mobile-menu-toggle');
    const navLinks = document.querySelector('.nav-links');
    const navItems = document.querySelectorAll('.nav-link');
    const sections = document.querySelectorAll('section[id]');

    // Theme handling: saved or default (promote navy site-wide)
    const savedTheme = localStorage.getItem('theme');
    const setTheme = (value) => {
      const root = document.documentElement;
      if (value === 'brand' || !value) {
        root.removeAttribute('data-theme');
      } else {
        root.setAttribute('data-theme', value);
      }
      localStorage.setItem('theme', value || 'brand');
      document.querySelectorAll('.theme-pill').forEach(btn => {
        const active = btn.getAttribute('data-theme') === (value || 'brand');
        btn.setAttribute('aria-pressed', String(active));
      });
    };
    setTheme(savedTheme || 'navy');
    document.querySelectorAll('.theme-pill').forEach(btn => {
      btn.addEventListener('click', () => setTheme(btn.getAttribute('data-theme')));
    });

    // Add RGB variables to root for dynamic opacity
    // Use predefined RGB helpers from CSS variables
    const style = getComputedStyle(document.documentElement);
    const backgroundRgb = style.getPropertyValue('--background-rgb').trim();
    const accentRedRgb = style.getPropertyValue('--accent-red-rgb').trim();
    if (backgroundRgb) document.documentElement.style.setProperty('--background-rgb', backgroundRgb);
    if (accentRedRgb) document.documentElement.style.setProperty('--accent-red-rgb', accentRedRgb);

    // Dark mode specific RGB values
    const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    const updateDarkModeRgb = () => {
      if (darkModeMediaQuery.matches) {
        const darkBackgroundRgb = getComputedStyle(document.documentElement).getPropertyValue('--background').match(/\d+/g);
        document.documentElement.style.setProperty('--background-rgb-dark', darkBackgroundRgb.join(','));
      } else {
        document.documentElement.style.removeProperty('--background-rgb-dark');
      }
    };
    updateDarkModeRgb();
    darkModeMediaQuery.addEventListener('change', updateDarkModeRgb);

    // Mobile menu toggle
    mobileToggle?.addEventListener('click', () => {
      navLinks?.classList.toggle('active');
      mobileToggle?.classList.toggle('active');
    });
    
    // Close mobile menu when clicking a link
    document.querySelectorAll('.nav-links a').forEach(link => {
      link.addEventListener('click', () => {
        navLinks?.classList.remove('active');
        mobileToggle?.classList.remove('active');
      });
    });

    // Optimized scroll handler with debouncing and passive listeners
    let scrollTimeout;
    const handleScroll = () => {
      // Immediate scroll bar effect for better responsiveness
      if (window.scrollY > 50) {
        navigation?.classList.add('scrolled');
      } else {
        navigation?.classList.remove('scrolled');
      }

      // Debounce active link highlighting for performance
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(() => {
        let currentActive = '';
        sections.forEach(section => {
          const sectionTop = section.offsetTop - navigation.offsetHeight - 20;
          const sectionHeight = section.clientHeight;
          if (pageYOffset >= sectionTop && pageYOffset < sectionTop + sectionHeight) {
            currentActive = section.getAttribute('id');
          }
        });

        navItems.forEach(item => {
          item.classList.remove('active');
          if (item.getAttribute('href')?.includes(currentActive)) {
            item.classList.add('active');
          }
        });
      }, 16); // ~60fps debounce
    };

    // Use passive listeners for better scroll performance
    window.addEventListener('scroll', handleScroll, { passive: true });
    handleScroll(); // Call on load to set initial state
  });
</script>
