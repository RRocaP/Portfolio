---
const { url } = Astro;
// Determine active language from the current path
const segments = url.pathname.split('/').filter(Boolean);
let lang = 'en';
if (segments[0] === 'Portfolio' && ['en','es','ca'].includes(segments[1] || '')) {
  lang = segments[1];
} else if (['en','es','ca'].includes(segments[0] || '')) {
  lang = segments[0];
}
const base = `/Portfolio/${lang}/`;

const t = {
  en: { home: 'Home', about: 'About', research: 'Research', publications: 'Publications', contact: 'Contact' },
  es: { home: 'Inicio', about: 'Sobre mí', research: 'Investigación', publications: 'Publicaciones', contact: 'Contacto' },
  ca: { home: 'Inici', about: 'Sobre mi', research: 'Recerca', publications: 'Publicacions', contact: 'Contacte' },
}[lang] || {
  home: 'Home', about: 'About', research: 'Research', publications: 'Publications', contact: 'Contact'
};
---

<nav class="navigation" aria-label="Primary">
  <div class="container">
    <div class="nav-wrapper">
      <a href={base} class="logo">Ramon Roca Pinilla</a>
      
  <button class="mobile-menu-toggle" aria-label="Menu" aria-expanded="false" aria-controls="primary-navigation">
        <span></span>
        <span></span>
        <span></span>
      </button>
      
  <ul class="nav-links" id="primary-navigation" role="menubar">
  <li role="none"><a role="menuitem" href={base} class="nav-link">{t.home}</a></li>
  <li role="none"><a role="menuitem" href={`${base}#about`} class="nav-link">{t.about}</a></li>
  <li role="none"><a role="menuitem" href={`${base}#research`} class="nav-link">{t.research}</a></li>
  <li role="none"><a role="menuitem" href={`${base}#publications`} class="nav-link">{t.publications}</a></li>
  <li role="none"><a role="menuitem" href={`${base}#contact`} class="nav-link">{t.contact}</a></li>
        <li class="lang-switcher">
          <a href="/Portfolio/en/" class={`lang-link ${lang==='en' ? 'active' : ''}`}>EN</a>
          <a href="/Portfolio/es/" class={`lang-link ${lang==='es' ? 'active' : ''}`}>ES</a>
          <a href="/Portfolio/ca/" class={`lang-link ${lang==='ca' ? 'active' : ''}`}>CA</a>
        </li>
      </ul>
    </div>
  </div>
</nav>

<style>
  .navigation {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    background: transparent;
    backdrop-filter: none;
    -webkit-backdrop-filter: none;
    z-index: 1000;
    box-shadow: none;
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .navigation.scrolled {
    background: rgba(10, 10, 10, 0.8);
    backdrop-filter: saturate(120%) blur(20px);
    -webkit-backdrop-filter: saturate(120%) blur(20px);
    box-shadow: 0 1px 0 rgba(255, 255, 255, 0.05);
  }

  .nav-wrapper {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 0;
  }

  .logo {
    font-family: var(--font-primary);
    font-size: 1.3rem; /* Slightly larger logo */
    font-weight: var(--font-weight-bold);
    color: var(--primary); /* Use primary color variable */
    text-decoration: none;
    letter-spacing: -0.03em;
    opacity: 1;
  }

  .nav-links {
    display: flex;
    list-style: none;
    gap: 2.5rem; /* Increased gap */
    align-items: center;
  }

  .nav-links .nav-link {
    color: var(--primary);
    font-weight: var(--font-weight-medium);
    font-size: 1rem; /* Slightly larger nav links */
    position: relative;
    transition: all 0.2s ease; /* Smoother transitions */
    border: none;
    opacity: 1;
  }

  .nav-links .nav-link::after {
    content: '';
    position: absolute;
    width: 0%;
    height: 1px;
    bottom: -5px;
    left: 0;
    background-color: var(--accent-red);
    opacity: 0.4;
    transition: width 0.3s ease-out;
  }

  .nav-links .nav-link:hover::after,
  .nav-links .nav-link.active::after {
    width: 100%;
  }

  .nav-links .nav-link:hover,
  .nav-links .nav-link.active {
    color: var(--primary);
    opacity: 1;
    transform: none;
  }

  .lang-switcher {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .lang-switcher .lang-link {
    font-size: 0.8rem;
    font-weight: 500;
    color: var(--secondary);
    padding: 0.2rem 0.5rem;
    border-radius: 3px;
    transition: all 0.2s ease;
    opacity: 0.6;
    text-decoration: none;
  }

  .lang-switcher .lang-link:hover {
    opacity: 0.9;
    background: rgba(255, 255, 255, 0.05);
  }

  .lang-switcher .lang-link.active {
    color: var(--accent-red);
    opacity: 1;
    background: rgba(220, 38, 38, 0.1);
  }

  .mobile-menu-toggle {
    display: none;
    flex-direction: column;
    justify-content: space-between;
    width: 28px; /* Slightly larger toggle */
    height: 22px;
    background: none;
    border: none;
    cursor: pointer;
    z-index: 1001; /* Ensure it's above nav links */
  }

  .mobile-menu-toggle span {
    width: 100%;
    height: 2px;
    background: var(--primary); /* Use primary color variable */
    border-radius: 2px;
    transition: all 0.3s ease;
  }

  .mobile-menu-toggle.active span:nth-child(1) {
    transform: translateY(10px) rotate(45deg);
  }

  .mobile-menu-toggle.active span:nth-child(2) {
    opacity: 0;
  }

  .mobile-menu-toggle.active span:nth-child(3) {
    transform: translateY(-10px) rotate(-45deg);
  }

  @media (max-width: 768px) {
    .mobile-menu-toggle {
      display: flex;
    }

    .nav-links {
      position: fixed; /* Use fixed for full screen overlay */
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--background); /* Full background for mobile menu */
      flex-direction: column;
      justify-content: center;
      align-items: center;
      padding: 2rem;
      box-shadow: none;
      transform: translateX(100%); /* Slide from right */
      transition: transform 0.4s ease-out;
    }

    .nav-links.active {
      transform: translateX(0);
    }

    .nav-links li {
      margin-bottom: 1.5rem; /* Spacing for mobile links */
    }

    .nav-links .nav-link {
      font-size: 1.8rem; /* Larger links for mobile */
      font-weight: var(--font-weight-bold);
    }

    .lang-switcher {
      margin-top: 1.5rem;
      gap: 1rem;
      border: 1px solid var(--border); /* Add a subtle border */
      border-radius: 8px; /* Rounded corners for the container */
      padding: 0.5rem; /* Padding around the language links */
    }

    .lang-switcher .lang-link {
      font-size: 1.2rem;
      padding: 0.5rem 0.8rem;
      color: var(--primary); /* Ensure good contrast */
      border: 1px solid transparent; /* Add a transparent border for consistency */
      border-radius: 4px; /* Keep individual link border-radius */
    }

    .lang-switcher .lang-link:hover {
      color: var(--accent-red);
      background: rgba(var(--accent-red-rgb), 0.1);
      border-color: var(--accent-red); /* Highlight border on hover */
    }
  }

  /* Dark Mode adjustments */
  @media (prefers-color-scheme: dark) {
    .navigation.scrolled { box-shadow: 0 2px 10px rgba(255, 255, 255, 0.05); }
    .mobile-menu-toggle span { background: var(--primary); }
    .nav-links { background: var(--background); }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const navigation = document.querySelector('.navigation');
    const mobileToggle = document.querySelector('.mobile-menu-toggle');
    const navLinks = document.querySelector('.nav-links');
    const navItems = document.querySelectorAll('.nav-link');
    const sections = document.querySelectorAll('section[id]');

    // Mobile menu toggle
    mobileToggle?.addEventListener('click', () => {
      const expanded = mobileToggle.getAttribute('aria-expanded') === 'true';
      mobileToggle.setAttribute('aria-expanded', String(!expanded));
      navLinks?.classList.toggle('active');
      mobileToggle?.classList.toggle('active');
    });
    
    // Close mobile menu when clicking a link
    document.querySelectorAll('.nav-links a').forEach(link => {
      link.addEventListener('click', () => {
  navLinks?.classList.remove('active');
  mobileToggle?.classList.remove('active');
  mobileToggle?.setAttribute('aria-expanded', 'false');
      });
    });

    // Optimized scroll handler with debouncing and passive listeners
    let scrollTimeout;
    const handleScroll = () => {
      // Immediate scroll bar effect for better responsiveness
      if (window.scrollY > 50) {
        navigation?.classList.add('scrolled');
      } else {
        navigation?.classList.remove('scrolled');
      }

      // Debounce active link highlighting for performance
      clearTimeout(scrollTimeout);
      scrollTimeout = setTimeout(() => {
        let currentActive = '';
        sections.forEach(section => {
          const navHeight = navigation?.offsetHeight || 0;
          const sectionTop = section.offsetTop - navHeight - 20;
          const sectionHeight = section.clientHeight;
          const y = window.scrollY || window.pageYOffset;
          if (y >= sectionTop && y < sectionTop + sectionHeight) {
            currentActive = section.getAttribute('id');
          }
        });

        navItems.forEach(item => {
          item.classList.remove('active');
          if (item.getAttribute('href')?.includes(currentActive)) {
            item.classList.add('active');
          }
        });
      }, 16); // ~60fps debounce
    };

    // Use passive listeners for better scroll performance
    window.addEventListener('scroll', handleScroll, { passive: true });
    handleScroll(); // Call on load to set initial state
  });
</script>
