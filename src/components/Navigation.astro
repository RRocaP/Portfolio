---
import { getRelativeLocaleUrl } from 'astro:i18n';

// Get current language from URL
const currentLang = Astro.url.pathname.split('/')[2] || 'en';
---

<nav class="navigation" role="navigation" aria-label="Main navigation">
  <div class="container">
    <div class="nav-wrapper">
      <a href="/Portfolio/" class="logo" aria-label="Home - Ramon Roca Pinilla">
        <span aria-hidden="true">Ramon Roca Pinilla</span>
      </a>
      
      <button 
        class="mobile-menu-toggle" 
        aria-label="Toggle navigation menu"
        aria-expanded="false"
        aria-controls="nav-menu"
      >
        <span aria-hidden="true"></span>
        <span aria-hidden="true"></span>
        <span aria-hidden="true"></span>
      </button>
      
      <ul class="nav-links" id="nav-menu" role="menubar">
        <li role="none">
          <a href="/Portfolio/" class="nav-link" role="menuitem" aria-current="page">Home</a>
        </li>
        <li role="none">
          <a href="/Portfolio/#about" class="nav-link" role="menuitem">About</a>
        </li>
        <li role="none">
          <a href="/Portfolio/#research" class="nav-link" role="menuitem">Research</a>
        </li>
        <li role="none">
          <a href="/Portfolio/#publications" class="nav-link" role="menuitem">Publications</a>
        </li>
        <li role="none">
          <a href="/Portfolio/#contact" class="nav-link" role="menuitem">Contact</a>
        </li>
        <li class="lang-switcher" role="none">
          <div role="group" aria-label="Language selector">
            <a href="/Portfolio/en/" class={`lang-link ${currentLang === 'en' ? 'active' : ''}`} 
               role="menuitem" hreflang="en" aria-label="English">EN</a>
            <a href="/Portfolio/es/" class={`lang-link ${currentLang === 'es' ? 'active' : ''}`} 
               role="menuitem" hreflang="es" aria-label="Español">ES</a>
            <a href="/Portfolio/ca/" class={`lang-link ${currentLang === 'ca' ? 'active' : ''}`} 
               role="menuitem" hreflang="ca" aria-label="Català">CA</a>
          </div>
        </li>
      </ul>
    </div>
  </div>
</nav>

<style>
  .navigation {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    background: transparent; /* Start transparent */
    backdrop-filter: saturate(180%) blur(10px);
    -webkit-backdrop-filter: saturate(180%) blur(10px);
    z-index: 1000;
    box-shadow: none; /* No shadow initially */
    transition: background 0.3s ease, box-shadow 0.3s ease;
  }

  .navigation.scrolled {
    background: rgba(var(--background-rgb), 0.95); /* Use RGB for opacity */
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1); /* Subtle shadow on scroll */
  }

  .nav-wrapper {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 0;
  }

  .logo {
    font-family: var(--font-primary);
    font-size: 1.3rem; /* Slightly larger logo */
    font-weight: var(--font-weight-bold);
    color: var(--primary); /* Use primary color variable */
    text-decoration: none;
    letter-spacing: -0.03em;
    opacity: 1;
  }

  .nav-links {
    display: flex;
    list-style: none;
    gap: 2.5rem; /* Increased gap */
    align-items: center;
  }

  .nav-links .nav-link {
    color: var(--primary);
    font-weight: var(--font-weight-medium);
    font-size: 1rem; /* Slightly larger nav links */
    position: relative;
    transition: all 0.2s ease; /* Smoother transitions */
    border: none;
    opacity: 1;
  }

  .nav-links .nav-link::after {
    content: '';
    position: absolute;
    width: 0%;
    height: 2px;
    bottom: -5px;
    left: 0;
    background-color: var(--accent-red);
    transition: width 0.3s ease-out;
  }

  .nav-links .nav-link:hover::after,
  .nav-links .nav-link.active::after {
    width: 100%;
  }

  .nav-links .nav-link:hover,
  .nav-links .nav-link.active {
    color: var(--accent-red);
    transform: translateY(-2px); /* Subtle lift on hover/active */
  }

  .lang-switcher {
    display: flex;
    gap: 0.5rem;
    margin-left: 1rem;
  }

  .lang-switcher .lang-link {
    font-size: 0.85rem;
    font-weight: var(--font-weight-semibold);
    color: var(--tertiary);
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    transition: all 0.2s ease;
  }

  .lang-switcher .lang-link.active {
    color: var(--accent-red);
    background: rgba(218, 41, 28, 0.1);
    border-color: var(--accent-red);
  }

  /* Focus styles for accessibility */
  .nav-link:focus,
  .lang-link:focus,
  .logo:focus,
  .mobile-menu-toggle:focus {
    outline: 2px solid var(--accent-red);
    outline-offset: 2px;
    border-radius: 4px;
  }

  /* High contrast support */
  @media (prefers-contrast: high) {
    .nav-link, .lang-link, .logo {
      font-weight: var(--font-weight-bold);
    }
    
    .nav-link:hover, .lang-link:hover {
      text-decoration: underline;
      text-decoration-thickness: 2px;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .nav-links .nav-link,
    .lang-switcher .lang-link,
    .mobile-menu-toggle span {
      transition: none;
    }
    
    .nav-links .nav-link:hover,
    .nav-links .nav-link.active {
      transform: none;
    }
  }

  .mobile-menu-toggle {
    display: none;
    flex-direction: column;
    justify-content: space-between;
    width: 28px; /* Slightly larger toggle */
    height: 22px;
    background: none;
    border: none;
    cursor: pointer;
    z-index: 1001; /* Ensure it's above nav links */
  }

  .mobile-menu-toggle span {
    width: 100%;
    height: 2px;
    background: var(--primary); /* Use primary color variable */
    border-radius: 2px;
    transition: all 0.3s ease;
  }

  .mobile-menu-toggle.active span:nth-child(1) {
    transform: translateY(10px) rotate(45deg);
  }

  .mobile-menu-toggle.active span:nth-child(2) {
    opacity: 0;
  }

  .mobile-menu-toggle.active span:nth-child(3) {
    transform: translateY(-10px) rotate(-45deg);
  }

  @media (max-width: 768px) {
    .mobile-menu-toggle {
      display: flex;
    }

    .nav-links {
      position: fixed; /* Use fixed for full screen overlay */
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: var(--background); /* Full background for mobile menu */
      flex-direction: column;
      justify-content: center;
      align-items: center;
      padding: 2rem;
      box-shadow: none;
      transform: translateX(100%); /* Slide from right */
      transition: transform 0.4s ease-out;
    }

    .nav-links.active {
      transform: translateX(0);
    }

    .nav-links li {
      margin-bottom: 1.5rem; /* Spacing for mobile links */
    }

    .nav-links .nav-link {
      font-size: 1.8rem; /* Larger links for mobile */
      font-weight: var(--font-weight-bold);
    }

    .lang-switcher {
      margin-top: 1.5rem;
      gap: 1rem;
      border: 1px solid var(--border); /* Add a subtle border */
      border-radius: 8px; /* Rounded corners for the container */
      padding: 0.5rem; /* Padding around the language links */
    }

    .lang-switcher .lang-link {
      font-size: 1.2rem;
      padding: 0.5rem 0.8rem;
      color: var(--primary); /* Ensure good contrast */
      border: 1px solid transparent; /* Add a transparent border for consistency */
      border-radius: 4px; /* Keep individual link border-radius */
    }

    .lang-switcher .lang-link:hover {
      color: var(--accent-red);
      background: rgba(var(--accent-red-rgb), 0.1);
      border-color: var(--accent-red); /* Highlight border on hover */
    }
  }

  /* Dark Mode adjustments */
  @media (prefers-color-scheme: dark) {
    .navigation.scrolled {
      background: rgba(var(--background-rgb-dark), 0.95);
      box-shadow: 0 2px 10px rgba(255, 255, 255, 0.05);
    }
    .mobile-menu-toggle span {
      background: var(--primary); /* Ensure lines are visible in dark mode */
    }
    .nav-links {
      background: var(--background); /* Match dark mode background */
    }
  }
</style>

<script>
  // Modern navigation with enhanced accessibility and performance
  class NavigationManager {
    constructor() {
      this.navigation = document.querySelector('.navigation');
      this.mobileToggle = document.querySelector('.mobile-menu-toggle');
      this.navLinks = document.querySelector('.nav-links');
      this.navItems = document.querySelectorAll('.nav-link');
      this.sections = document.querySelectorAll('section[id]');
      this.isMenuOpen = false;
      this.scrollTimeout = null;
      
      this.init();
    }

    init() {
      this.setupRGBVariables();
      this.setupMobileMenu();
      this.setupScrollHandler();
      this.setupKeyboardNavigation();
      this.setupFocusManagement();
      this.handleInitialLoad();
    }

    setupRGBVariables() {
      // Extract RGB values for dynamic opacity
      const computeRGB = (property) => {
        const color = getComputedStyle(document.documentElement).getPropertyValue(property);
        const rgb = color.match(/\d+/g);
        return rgb ? rgb.join(',') : null;
      };

      const backgroundRgb = computeRGB('--background');
      const accentRedRgb = computeRGB('--accent-red');
      
      if (backgroundRgb) {
        document.documentElement.style.setProperty('--background-rgb', backgroundRgb);
      }
      if (accentRedRgb) {
        document.documentElement.style.setProperty('--accent-red-rgb', accentRedRgb);
      }

      // Handle dark mode changes
      const darkModeQuery = window.matchMedia('(prefers-color-scheme: dark)');
      const updateDarkModeRgb = () => {
        if (darkModeQuery.matches) {
          const darkBgRgb = computeRGB('--background');
          if (darkBgRgb) {
            document.documentElement.style.setProperty('--background-rgb-dark', darkBgRgb);
          }
        }
      };
      
      updateDarkModeRgb();
      darkModeQuery.addEventListener('change', updateDarkModeRgb);
    }

    setupMobileMenu() {
      if (!this.mobileToggle || !this.navLinks) return;

      this.mobileToggle.addEventListener('click', (e) => {
        e.preventDefault();
        this.toggleMobileMenu();
      });

      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        if (this.isMenuOpen && !this.navigation.contains(e.target)) {
          this.closeMobileMenu();
        }
      });

      // Close menu when clicking nav links
      this.navItems.forEach(link => {
        link.addEventListener('click', () => {
          if (this.isMenuOpen) {
            this.closeMobileMenu();
          }
        });
      });
    }

    toggleMobileMenu() {
      this.isMenuOpen = !this.isMenuOpen;
      
      this.navLinks.classList.toggle('active', this.isMenuOpen);
      this.mobileToggle.classList.toggle('active', this.isMenuOpen);
      this.mobileToggle.setAttribute('aria-expanded', this.isMenuOpen.toString());
      
      // Prevent body scroll when menu is open
      document.body.style.overflow = this.isMenuOpen ? 'hidden' : '';
      
      // Focus management
      if (this.isMenuOpen) {
        // Focus first nav link when menu opens
        const firstNavLink = this.navLinks.querySelector('.nav-link');
        firstNavLink?.focus();
      } else {
        // Return focus to toggle button when menu closes
        this.mobileToggle.focus();
      }
    }

    closeMobileMenu() {
      if (!this.isMenuOpen) return;
      
      this.isMenuOpen = false;
      this.navLinks.classList.remove('active');
      this.mobileToggle.classList.remove('active');
      this.mobileToggle.setAttribute('aria-expanded', 'false');
      document.body.style.overflow = '';
    }

    setupScrollHandler() {
      const handleScroll = () => {
        // Immediate visual feedback for navigation bar
        requestAnimationFrame(() => {
          if (window.scrollY > 50) {
            this.navigation.classList.add('scrolled');
          } else {
            this.navigation.classList.remove('scrolled');
          }
        });

        // Debounced active link highlighting for performance
        if (this.scrollTimeout) {
          clearTimeout(this.scrollTimeout);
        }
        
        this.scrollTimeout = setTimeout(() => {
          this.updateActiveNavigation();
        }, 16); // 60fps throttle
      };

      // Use passive listener for better scroll performance
      window.addEventListener('scroll', handleScroll, { passive: true });
    }

    updateActiveNavigation() {
      let currentSection = '';
      const offset = this.navigation.offsetHeight + 50; // Account for fixed header

      this.sections.forEach(section => {
        const sectionTop = section.offsetTop - offset;
        const sectionHeight = section.clientHeight;
        
        if (window.pageYOffset >= sectionTop && 
            window.pageYOffset < sectionTop + sectionHeight) {
          currentSection = section.getAttribute('id');
        }
      });

      // Update active states
      this.navItems.forEach(item => {
        const href = item.getAttribute('href');
        const isActive = href?.includes(currentSection) || 
                        (currentSection === '' && href === '/Portfolio/');
        
        item.classList.toggle('active', isActive);
        item.setAttribute('aria-current', isActive ? 'page' : 'false');
      });
    }

    setupKeyboardNavigation() {
      // Enhanced keyboard navigation for mobile menu
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isMenuOpen) {
          this.closeMobileMenu();
        }
        
        // Arrow key navigation within menu
        if (this.isMenuOpen && (e.key === 'ArrowDown' || e.key === 'ArrowUp')) {
          e.preventDefault();
          this.navigateMenu(e.key === 'ArrowDown' ? 1 : -1);
        }
      });
    }

    navigateMenu(direction) {
      const focusableItems = Array.from(this.navLinks.querySelectorAll('a'));
      const currentIndex = focusableItems.indexOf(document.activeElement);
      let nextIndex = currentIndex + direction;
      
      if (nextIndex < 0) {
        nextIndex = focusableItems.length - 1;
      } else if (nextIndex >= focusableItems.length) {
        nextIndex = 0;
      }
      
      focusableItems[nextIndex]?.focus();
    }

    setupFocusManagement() {
      // Trap focus within mobile menu when open
      this.navLinks.addEventListener('keydown', (e) => {
        if (!this.isMenuOpen || e.key !== 'Tab') return;
        
        const focusableElements = this.navLinks.querySelectorAll('a');
        const firstElement = focusableElements[0];
        const lastElement = focusableElements[focusableElements.length - 1];
        
        if (e.shiftKey && document.activeElement === firstElement) {
          e.preventDefault();
          lastElement.focus();
        } else if (!e.shiftKey && document.activeElement === lastElement) {
          e.preventDefault();
          firstElement.focus();
        }
      });
    }

    handleInitialLoad() {
      // Set initial active state and scroll position
      this.updateActiveNavigation();
      
      // Handle page reload with hash
      if (window.location.hash) {
        setTimeout(() => {
          const target = document.querySelector(window.location.hash);
          if (target) {
            target.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
        }, 100);
      }
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new NavigationManager());
  } else {
    new NavigationManager();
  }
</script>