---
import { metrics } from '../data/metrics.ts';
import Icon from './Icon.astro';

interface Props {
  lang?: 'en' | 'es' | 'ca';
}

const { lang = 'en' } = Astro.props;

const translations = {
  en: {
    publications: 'Publications',
    citations: 'Citations',
    hIndex: 'h-index',
    collaborations: 'Collaborations',
    journals: 'Journals',
    years: 'Years Active',
    impactScore: 'Impact Score',
    internationalCollabs: 'International',
    publicationsDesc: 'Peer-reviewed papers',
    citationsDesc: 'Google Scholar',
    hIndexDesc: 'Research impact',
    collaborationsDesc: 'Research partnerships',
    journalsDesc: 'Publication venues',
    yearsDesc: 'Research experience',
    impactScoreDesc: 'Composite score',
    internationalDesc: 'Global partnerships'
  },
  es: {
    publications: 'Publicaciones',
    citations: 'Citas',
    hIndex: 'Índice h',
    collaborations: 'Colaboraciones',
    journals: 'Revistas',
    years: 'Años Activo',
    impactScore: 'Puntuación de Impacto',
    internationalCollabs: 'Internacionales',
    publicationsDesc: 'Artículos revisados',
    citationsDesc: 'Google Scholar',
    hIndexDesc: 'Impacto investigador',
    collaborationsDesc: 'Asociaciones de investigación',
    journalsDesc: 'Venues de publicación',
    yearsDesc: 'Experiencia investigadora',
    impactScoreDesc: 'Puntuación compuesta',
    internationalDesc: 'Asociaciones globales'
  },
  ca: {
    publications: 'Publicacions',
    citations: 'Citacions',
    hIndex: 'Índex h',
    collaborations: 'Col·laboracions',
    journals: 'Revistes',
    years: 'Anys Actiu',
    impactScore: 'Puntuació d\'Impacte',
    internationalCollabs: 'Internacionals',
    publicationsDesc: 'Articles revisats',
    citationsDesc: 'Google Scholar',
    hIndexDesc: 'Impacte investigador',
    collaborationsDesc: 'Associacions de recerca',
    journalsDesc: 'Venues de publicació',
    yearsDesc: 'Experiència investigadora',
    impactScoreDesc: 'Puntuació composta',
    internationalDesc: 'Associacions globals'
  }
};

const t = translations[lang];

const metricsConfig = [
  {
    key: 'publications',
    value: metrics.publications,
    label: t.publications,
    description: t.publicationsDesc,
    icon: 'document',
    color: 'text-blue-400',
    bgColor: 'bg-blue-600/10',
    borderColor: 'border-blue-600/20',
    trend: { direction: 'up' as const, percentage: 12, period: '2024' }
  },
  {
    key: 'citations',
    value: `${metrics.citations}+`,
    label: t.citations,
    description: t.citationsDesc,
    icon: 'academic-cap',
    color: 'text-green-400',
    bgColor: 'bg-green-600/10',
    borderColor: 'border-green-600/20',
    trend: { direction: 'up' as const, percentage: 18, period: '2024' }
  },
  {
    key: 'hIndex',
    value: metrics.hIndex,
    label: t.hIndex,
    description: t.hIndexDesc,
    icon: 'chart-bar',
    color: 'text-purple-400',
    bgColor: 'bg-purple-600/10',
    borderColor: 'border-purple-600/20',
    trend: { direction: 'up' as const, percentage: 8, period: '2024' }
  },
  {
    key: 'collaborations',
    value: metrics.collaborations,
    label: t.collaborations,
    description: t.collaborationsDesc,
    icon: 'users',
    color: 'text-orange-400',
    bgColor: 'bg-orange-600/10',
    borderColor: 'border-orange-600/20',
    trend: { direction: 'up' as const, percentage: 25, period: '2024' }
  },
  {
    key: 'journals',
    value: metrics.journals,
    label: t.journals,
    description: t.journalsDesc,
    icon: 'book-open',
    color: 'text-red-400',
    bgColor: 'bg-red-600/10',
    borderColor: 'border-red-600/20',
    trend: { direction: 'up' as const, percentage: 5, period: '2024' }
  },
  {
    key: 'years',
    value: metrics.years,
    label: t.years,
    description: t.yearsDesc,
    icon: 'clock',
    color: 'text-cyan-400',
    bgColor: 'bg-cyan-600/10',
    borderColor: 'border-cyan-600/20',
    trend: { direction: 'up' as const, percentage: 100, period: 'Career' }
  },
  {
    key: 'impactScore',
    value: metrics.impactScore || 85,
    label: t.impactScore,
    description: t.impactScoreDesc,
    icon: 'lightning-bolt',
    color: 'text-yellow-400',
    bgColor: 'bg-yellow-600/10',
    borderColor: 'border-yellow-600/20',
    trend: { direction: 'up' as const, percentage: 15, period: '2024' }
  },
  {
    key: 'international',
    value: metrics.internationalCollaborations || 15,
    label: t.internationalCollabs,
    description: t.internationalDesc,
    icon: 'globe',
    color: 'text-indigo-400',
    bgColor: 'bg-indigo-600/10',
    borderColor: 'border-indigo-600/20',
    trend: { direction: 'up' as const, percentage: 30, period: '2024' }
  }
];
---

<div class="research-metrics-viz" role="region" aria-labelledby="metrics-heading">
  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
    {metricsConfig.map((metric, index) => (
      <div 
        class={`metric-card group relative overflow-hidden rounded-2xl border ${metric.borderColor} ${metric.bgColor} p-6 backdrop-blur-sm transition-all duration-300 hover:scale-105 hover:shadow-2xl hover:shadow-blue-500/10`}
        style={`animation-delay: ${index * 0.1}s`}
        data-metric={metric.key}
      >
        {/* Background gradient effect */}
        <div class="absolute inset-0 bg-gradient-to-br from-transparent via-transparent to-white/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
        
        {/* Icon */}
        <div class={`relative z-10 flex items-center justify-between mb-4`}>
          <div class={`p-3 rounded-xl ${metric.bgColor} border ${metric.borderColor}`}>
            <Icon name={metric.icon} size="lg" class={metric.color} />
          </div>
          
          {/* Trend indicator */}
          <div class="flex items-center gap-1 text-xs text-gray-400">
            <Icon name="arrow-trending-up" size="xs" class="text-green-400" />
            <span>{metric.trend.percentage}%</span>
          </div>
        </div>
        
        {/* Value */}
        <div class="relative z-10 mb-2">
          <div 
            class="metric-value text-3xl font-bold text-white mb-1 tabular-nums"
            data-target={typeof metric.value === 'string' ? metric.value.replace('+', '') : metric.value}
          >
            {metric.value}
          </div>
          <div class="text-sm font-medium text-gray-300 mb-1">{metric.label}</div>
          <div class="text-xs text-gray-400">{metric.description}</div>
        </div>
        
        {/* Progress bar for scores */}
        {(metric.key === 'impactScore') && (
          <div class="relative z-10 mt-4">
            <div class="w-full bg-gray-700 rounded-full h-2">
              <div 
                class={`h-2 rounded-full bg-gradient-to-r from-yellow-500 to-yellow-400 transition-all duration-1000 ease-out`}
                style={`width: ${metric.value}%`}
                data-animate="progress"
              ></div>
            </div>
          </div>
        )}
        
        {/* Pulse animation for active research */}
        {(metric.key === 'publications' || metric.key === 'citations') && (
          <div class="absolute -top-1 -right-1 w-3 h-3">
            <div class="absolute inset-0 bg-green-400 rounded-full animate-ping opacity-75"></div>
            <div class="absolute inset-0 bg-green-400 rounded-full"></div>
          </div>
        )}
      </div>
    ))}
  </div>
</div>

<style>
  .research-metrics-viz {
    animation: fadeInUp 0.6s ease-out;
  }
  
  .metric-card {
    animation: fadeInUp 0.6s ease-out;
    animation-fill-mode: both;
  }
  
  .metric-value {
    background: linear-gradient(135deg, #ffffff 0%, #f1f5f9 100%);
    background-clip: text;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes countUp {
    from {
      transform: translateY(20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  
  /* Responsive adjustments */
  @media (max-width: 640px) {
    .metric-card {
      padding: 1rem;
    }
    
    .metric-value {
      font-size: 1.5rem;
    }
  }
  
  /* High contrast mode */
  @media (prefers-contrast: high) {
    .metric-card {
      border-width: 2px;
    }
  }
  
  /* Reduced motion */
  @media (prefers-reduced-motion: reduce) {
    .metric-card {
      animation: none;
      transition: none;
    }
    
    .metric-card:hover {
      transform: none;
    }
    
    [data-animate="progress"] {
      transition: none;
    }
  }
</style>

<script>
  // Counter animation for metric values
  function animateCounters() {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const valueElement = entry.target.querySelector('.metric-value') as HTMLElement;
          const target = valueElement?.dataset.target;
          
          if (target && !valueElement.dataset.animated) {
            animateValue(valueElement, target);
            valueElement.dataset.animated = 'true';
          }
          
          // Animate progress bars
          const progressBar = entry.target.querySelector('[data-animate="progress"]') as HTMLElement;
          if (progressBar && !progressBar.dataset.animated) {
            progressBar.style.width = progressBar.style.width || '0%';
            progressBar.dataset.animated = 'true';
          }
        }
      });
    }, observerOptions);
    
    document.querySelectorAll('.metric-card').forEach(card => {
      observer.observe(card);
    });
  }
  
  function animateValue(element: HTMLElement, target: string) {
    const isStringValue = target.includes('+') || isNaN(Number(target));
    if (isStringValue) return; // Don't animate string values
    
    const targetNum = parseInt(target);
    const duration = 2000;
    const startTime = performance.now();
    const startValue = 0;
    
    function updateValue(currentTime: number) {
      const elapsed = currentTime - startTime;
      const progress = Math.min(elapsed / duration, 1);
      
      // Easing function (ease-out)
      const easeOut = 1 - Math.pow(1 - progress, 3);
      const currentValue = Math.floor(startValue + (targetNum - startValue) * easeOut);
      
      element.textContent = currentValue.toString();
      
      if (progress < 1) {
        requestAnimationFrame(updateValue);
      } else {
        element.textContent = target; // Ensure final value is exact
      }
    }
    
    requestAnimationFrame(updateValue);
  }
  
  // Initialize animations when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', animateCounters);
  } else {
    animateCounters();
  }
  
  // Handle keyboard navigation for accessibility
  document.querySelectorAll('.metric-card').forEach(card => {
    card.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' || e.key === ' ') {
        e.preventDefault();
        // Could trigger detail view or additional info
        console.log(`Metric card activated: ${card.dataset.metric}`);
      }
    });
  });
</script>