---
// Performance optimization component
---

<script>
  // Lazy loading for images
  if ('loading' in HTMLImageElement.prototype) {
    const images = document.querySelectorAll('img[loading="lazy"]');
    images.forEach(img => {
      img.src = img.dataset.src || img.src;
    });
  } else {
    // Fallback for older browsers
    const script = document.createElement('script');
    script.src = 'https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.3.2/lazysizes.min.js';
    document.body.appendChild(script);
  }

  // Intersection Observer for animations
  const observerOptions = {
    root: null,
    rootMargin: '0px',
    threshold: 0.1
  };

  const animateOnScroll = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('animate-in');
        // Unobserve after animation to save resources
        if (entry.target.dataset.animateOnce !== 'false') {
          animateOnScroll.unobserve(entry.target);
        }
      }
    });
  }, observerOptions);

  // Apply to all elements with animation classes
  document.querySelectorAll('[class*="animate-"]').forEach(el => {
    animateOnScroll.observe(el);
  });

  // Preconnect to external domains
  const preconnectLinks = [
    'https://fonts.googleapis.com',
    'https://fonts.gstatic.com',
    'https://cdn.jsdelivr.net'
  ];

  preconnectLinks.forEach(url => {
    const link = document.createElement('link');
    link.rel = 'preconnect';
    link.href = url;
    document.head.appendChild(link);
  });

  // Resource hints for critical resources
  const criticalResources = [
    '/Portfolio/styles/accessibility-fixes.css',
    '/Portfolio/_astro/client.*.js'
  ];

  criticalResources.forEach(resource => {
    const link = document.createElement('link');
    link.rel = 'prefetch';
    link.href = resource;
    document.head.appendChild(link);
  });

  // Optimize scroll performance
  let ticking = false;
  function updateScrollPosition() {
    // Your scroll-based updates here
    ticking = false;
  }

  function requestTick() {
    if (!ticking) {
      window.requestAnimationFrame(updateScrollPosition);
      ticking = true;
    }
  }

  window.addEventListener('scroll', requestTick, { passive: true });

  // Defer non-critical CSS
  const deferCSS = () => {
    const links = document.querySelectorAll('link[rel="stylesheet"][data-defer]');
    links.forEach(link => {
      link.media = 'print';
      link.onload = function() { this.media = 'all'; };
    });
  };

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', deferCSS);
  } else {
    deferCSS();
  }

  // Service Worker for offline support (optional)
  if ('serviceWorker' in navigator && location.hostname !== 'localhost') {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/Portfolio/sw.js')
        .then(registration => console.log('SW registered'))
        .catch(err => console.log('SW registration failed'));
    });
  }

  // Performance monitoring
  if ('PerformanceObserver' in window) {
    // Monitor Largest Contentful Paint
    try {
      const lcpObserver = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        const lastEntry = entries[entries.length - 1];
        console.log('LCP:', lastEntry.renderTime || lastEntry.loadTime);
      });
      lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });
    } catch (e) {
      // LCP observation not supported
    }

    // Monitor First Input Delay
    try {
      const fidObserver = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          const delay = entry.processingStart - entry.startTime;
          console.log('FID:', delay);
        }
      });
      fidObserver.observe({ entryTypes: ['first-input'] });
    } catch (e) {
      // FID observation not supported
    }

    // Monitor Cumulative Layout Shift
    try {
      let clsValue = 0;
      let clsEntries = [];

      const clsObserver = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (!entry.hadRecentInput) {
            const firstSessionEntry = clsEntries[0];
            const lastSessionEntry = clsEntries[clsEntries.length - 1];

            if (entry.startTime - lastSessionEntry.startTime < 1000 &&
                entry.startTime - firstSessionEntry.startTime < 5000) {
              clsEntries.push(entry);
              clsValue += entry.value;
            } else {
              clsEntries = [entry];
              clsValue = entry.value;
            }
          }
        }
        console.log('CLS:', clsValue);
      });
      clsObserver.observe({ entryTypes: ['layout-shift'] });
    } catch (e) {
      // CLS observation not supported
    }
  }

  // Optimize font loading
  if ('fonts' in document) {
    Promise.all([
      document.fonts.load('400 1em Inter'),
      document.fonts.load('600 1em Inter'),
      document.fonts.load('700 1em Outfit')
    ]).then(() => {
      document.documentElement.classList.add('fonts-loaded');
    });
  }

  // Reduce motion for users who prefer it
  const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)');
  
  if (prefersReducedMotion.matches) {
    document.documentElement.classList.add('reduce-motion');
  }

  prefersReducedMotion.addEventListener('change', (e) => {
    if (e.matches) {
      document.documentElement.classList.add('reduce-motion');
    } else {
      document.documentElement.classList.remove('reduce-motion');
    }
  });

  // Optimize video playback
  const videos = document.querySelectorAll('video');
  videos.forEach(video => {
    // Pause videos when not in viewport
    const videoObserver = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          video.play();
        } else {
          video.pause();
        }
      });
    }, { threshold: 0.5 });
    
    videoObserver.observe(video);
  });

  // Network Information API for adaptive loading
  if ('connection' in navigator) {
    const connection = navigator.connection;
    
    if (connection.saveData || connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g') {
      document.documentElement.classList.add('save-data');
      // Disable heavy animations and load lower quality images
    }
  }
</script>

<style>
  /* Performance-related styles */
  .reduce-motion * {
    animation-duration: 0.01ms !important;
    animation-iteration-count: 1 !important;
    transition-duration: 0.01ms !important;
  }

  .save-data video,
  .save-data iframe,
  .save-data .heavy-animation {
    display: none !important;
  }

  .save-data img {
    filter: blur(5px);
    transition: filter 0.3s;
  }

  .save-data img.loaded {
    filter: none;
  }

  /* Font loading optimization */
  .fonts-loaded body {
    font-family: 'Inter', sans-serif;
  }

  .fonts-loaded h1,
  .fonts-loaded h2,
  .fonts-loaded h3 {
    font-family: 'Outfit', sans-serif;
  }

  /* Skeleton screens for loading states */
  .skeleton {
    background: linear-gradient(90deg, #2a2a2a 25%, #3a3a3a 50%, #2a2a2a 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
  }

  @keyframes loading {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
  }
</style>