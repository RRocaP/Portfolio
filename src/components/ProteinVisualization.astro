---
---

<div class="protein-visualization-container" id="proteinViz">
  <div class="protein-canvas">
    <div class="protein-structure" id="proteinStructure">
      <!-- Protein backbone -->
      <div class="protein-backbone">
        <div class="helix helix-1"></div>
        <div class="helix helix-2"></div>
        <div class="helix helix-3"></div>
        <div class="beta-sheet sheet-1"></div>
        <div class="beta-sheet sheet-2"></div>
      </div>
      
      <!-- Antimicrobial peptide -->
      <div class="peptide">
        <div class="peptide-helix"></div>
        <div class="peptide-tail"></div>
      </div>
      
      <!-- Binding site -->
      <div class="binding-site">
        <div class="binding-pocket"></div>
        <div class="active-residues">
          <div class="residue residue-1"></div>
          <div class="residue residue-2"></div>
          <div class="residue residue-3"></div>
        </div>
      </div>
      
      <!-- Surface mesh -->
      <div class="surface-mesh"></div>
      
      <!-- Floating elements -->
      <div class="floating-elements">
        <div class="atom atom-1"></div>
        <div class="atom atom-2"></div>
        <div class="atom atom-3"></div>
        <div class="atom atom-4"></div>
        <div class="atom atom-5"></div>
        <div class="atom atom-6"></div>
      </div>
      
      <!-- Connection lines -->
      <svg class="connections" viewBox="0 0 400 400">
        <line class="bond bond-1" x1="100" y1="100" x2="200" y2="150" />
        <line class="bond bond-2" x1="200" y1="150" x2="250" y2="200" />
        <line class="bond bond-3" x1="150" y1="250" x2="250" y2="200" />
      </svg>
    </div>
  </div>
  
  <div class="protein-info">
    <h3>De Novo Antimicrobial Complex</h3>
    <p>AI-designed protein binder targeting bacterial membrane proteins with high specificity</p>
  </div>
</div>

<style>
  .protein-visualization-container {
    width: 100%;
    max-width: 500px;
    margin: 0 auto;
    padding: 2rem 0;
  }

  .protein-canvas {
    width: 100%;
    height: 500px;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    background: radial-gradient(ellipse at center, rgba(220, 38, 38, 0.02) 0%, transparent 60%);
    border-radius: 20px;
    overflow: hidden;
  }

  .protein-structure {
    width: 400px;
    height: 400px;
    position: relative;
    transform-style: preserve-3d;
    transform: perspective(1000px) rotateX(20deg) rotateY(0deg);
    transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Protein backbone structures */
  .protein-backbone {
    position: absolute;
    width: 100%;
    height: 100%;
    top: 0;
    left: 0;
  }

  .helix {
    position: absolute;
    background: linear-gradient(135deg, #dc2626 0%, #ef4444 100%);
    border-radius: 100px;
    opacity: 0.9;
    box-shadow: 0 10px 30px rgba(220, 38, 38, 0.3);
  }

  .helix-1 {
    width: 120px;
    height: 30px;
    top: 30%;
    left: 20%;
    transform: rotate(-30deg) translateZ(50px);
    animation: pulse 4s ease-in-out infinite;
  }

  .helix-2 {
    width: 100px;
    height: 25px;
    top: 40%;
    left: 40%;
    transform: rotate(45deg) translateZ(30px);
    animation: pulse 4s ease-in-out infinite 0.5s;
  }

  .helix-3 {
    width: 80px;
    height: 20px;
    top: 50%;
    left: 35%;
    transform: rotate(15deg) translateZ(40px);
    animation: pulse 4s ease-in-out infinite 1s;
  }

  .beta-sheet {
    position: absolute;
    background: linear-gradient(135deg, #f59e0b 0%, #fbbf24 100%);
    opacity: 0.8;
    box-shadow: 0 5px 20px rgba(245, 158, 11, 0.3);
  }

  .sheet-1 {
    width: 60px;
    height: 80px;
    top: 35%;
    right: 30%;
    transform: skewY(-20deg) translateZ(20px);
    border-radius: 10px;
  }

  .sheet-2 {
    width: 50px;
    height: 60px;
    bottom: 35%;
    left: 30%;
    transform: skewY(15deg) translateZ(25px);
    border-radius: 8px;
  }

  /* Antimicrobial peptide */
  .peptide {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .peptide-helix {
    width: 150px;
    height: 40px;
    background: linear-gradient(90deg, #3b82f6 0%, #60a5fa 50%, #3b82f6 100%);
    border-radius: 20px;
    position: relative;
    opacity: 0.95;
    box-shadow: 0 8px 25px rgba(59, 130, 246, 0.4);
    animation: float 6s ease-in-out infinite;
  }

  .peptide-tail {
    width: 60px;
    height: 15px;
    background: linear-gradient(90deg, #60a5fa 0%, transparent 100%);
    position: absolute;
    right: -50px;
    top: 50%;
    transform: translateY(-50%);
    border-radius: 0 10px 10px 0;
  }

  /* Binding site */
  .binding-site {
    position: absolute;
    top: 45%;
    right: 25%;
    transform: translateZ(60px);
  }

  .binding-pocket {
    width: 80px;
    height: 80px;
    border: 3px solid rgba(34, 197, 94, 0.6);
    border-radius: 50%;
    position: relative;
    animation: rotate 10s linear infinite;
  }

  .binding-pocket::before {
    content: '';
    position: absolute;
    inset: -10px;
    border: 2px dashed rgba(34, 197, 94, 0.3);
    border-radius: 50%;
    animation: rotate 15s linear infinite reverse;
  }

  .active-residues {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .residue {
    width: 12px;
    height: 12px;
    background: #22c55e;
    border-radius: 50%;
    position: absolute;
    box-shadow: 0 0 20px rgba(34, 197, 94, 0.8);
  }

  .residue-1 {
    top: -20px;
    animation: blink 2s ease-in-out infinite;
  }

  .residue-2 {
    left: 20px;
    top: 5px;
    animation: blink 2s ease-in-out infinite 0.5s;
  }

  .residue-3 {
    left: -20px;
    top: 5px;
    animation: blink 2s ease-in-out infinite 1s;
  }

  /* Surface mesh */
  .surface-mesh {
    position: absolute;
    inset: 10%;
    border: 1px solid rgba(148, 163, 184, 0.1);
    border-radius: 50%;
    transform: rotateX(60deg) translateZ(-20px);
    pointer-events: none;
  }

  .surface-mesh::before,
  .surface-mesh::after {
    content: '';
    position: absolute;
    inset: -20%;
    border: 1px solid rgba(148, 163, 184, 0.05);
    border-radius: 50%;
  }

  .surface-mesh::before {
    transform: rotateY(90deg);
  }

  /* Floating atoms */
  .floating-elements {
    position: absolute;
    inset: 0;
    pointer-events: none;
  }

  .atom {
    position: absolute;
    width: 8px;
    height: 8px;
    background: rgba(59, 130, 246, 0.8);
    border-radius: 50%;
    box-shadow: 0 0 15px rgba(59, 130, 246, 0.6);
  }

  .atom-1 {
    top: 20%;
    left: 15%;
    animation: orbit 8s linear infinite;
  }

  .atom-2 {
    top: 70%;
    right: 20%;
    animation: orbit 10s linear infinite reverse;
  }

  .atom-3 {
    bottom: 30%;
    left: 25%;
    animation: orbit 12s linear infinite 2s;
  }

  .atom-4 {
    top: 40%;
    right: 15%;
    animation: orbit 9s linear infinite 1s;
  }

  .atom-5 {
    top: 60%;
    left: 50%;
    animation: orbit 11s linear infinite reverse 1.5s;
  }

  .atom-6 {
    bottom: 20%;
    right: 40%;
    animation: orbit 7s linear infinite 3s;
  }

  /* Connection lines */
  .connections {
    position: absolute;
    inset: 0;
    pointer-events: none;
  }

  .bond {
    stroke: rgba(34, 197, 94, 0.3);
    stroke-width: 2;
    stroke-dasharray: 5, 5;
    animation: dash 2s linear infinite;
  }

  /* Protein info */
  .protein-info {
    text-align: center;
    margin-top: 2rem;
  }

  .protein-info h3 {
    font-size: 1.25rem;
    font-weight: 300;
    color: var(--primary);
    margin-bottom: 0.5rem;
  }

  .protein-info p {
    font-size: 0.875rem;
    color: var(--secondary);
    line-height: 1.6;
    max-width: 400px;
    margin: 0 auto;
  }

  /* Animations */
  @keyframes pulse {
    0%, 100% { transform: scale(1) rotate(var(--rotation, -30deg)) translateZ(var(--z, 50px)); }
    50% { transform: scale(1.05) rotate(var(--rotation, -30deg)) translateZ(var(--z, 50px)); }
  }

  @keyframes float {
    0%, 100% { transform: translateY(0) translateZ(0); }
    50% { transform: translateY(-10px) translateZ(10px); }
  }

  @keyframes rotate {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  @keyframes blink {
    0%, 100% { opacity: 1; transform: scale(1); }
    50% { opacity: 0.4; transform: scale(0.8); }
  }

  @keyframes orbit {
    from {
      transform: rotate(0deg) translateX(150px) rotate(0deg);
    }
    to {
      transform: rotate(360deg) translateX(150px) rotate(-360deg);
    }
  }

  @keyframes dash {
    to {
      stroke-dashoffset: -10;
    }
  }

  /* Dark mode */
  [data-theme="dark"] .protein-canvas {
    background: radial-gradient(ellipse at center, rgba(220, 38, 38, 0.05) 0%, transparent 60%);
  }

  [data-theme="dark"] .surface-mesh,
  [data-theme="dark"] .surface-mesh::before,
  [data-theme="dark"] .surface-mesh::after {
    border-color: rgba(148, 163, 184, 0.2);
  }

  /* Responsive */
  @media (max-width: 768px) {
    .protein-canvas {
      height: 400px;
    }

    .protein-structure {
      width: 300px;
      height: 300px;
    }
  }
</style>

<script>
  // Scroll-based rotation
  const proteinStructure = document.getElementById('proteinStructure');
  const proteinViz = document.getElementById('proteinViz');
  
  if (proteinStructure && proteinViz) {
    let ticking = false;
    
    function updateRotation() {
      const rect = proteinViz.getBoundingClientRect();
      const windowHeight = window.innerHeight;
      const elementCenter = rect.top + rect.height / 2;
      
      // Calculate progress (-1 to 1) based on element position in viewport
      const progress = (windowHeight / 2 - elementCenter) / (windowHeight / 2);
      const clampedProgress = Math.max(-1, Math.min(1, progress));
      
      // Rotate based on scroll position
      const rotateY = clampedProgress * 180;
      const rotateX = 20 + (clampedProgress * 10);
      
      proteinStructure.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
      
      ticking = false;
    }
    
    function requestTick() {
      if (!ticking) {
        window.requestAnimationFrame(updateRotation);
        ticking = true;
      }
    }
    
    // Update on scroll
    window.addEventListener('scroll', requestTick);
    
    // Initial update
    updateRotation();
  }
  
  // Interactive hover effect
  proteinStructure?.addEventListener('mouseenter', () => {
    proteinStructure.style.transition = 'transform 0.3s ease';
  });
  
  proteinStructure?.addEventListener('mouseleave', () => {
    proteinStructure.style.transition = 'transform 0.5s cubic-bezier(0.4, 0, 0.2, 1)';
    requestTick();
  });
  
  proteinStructure?.addEventListener('mousemove', (e) => {
    const rect = proteinStructure.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + rect.height / 2;
    
    const mouseX = e.clientX - centerX;
    const mouseY = e.clientY - centerY;
    
    const rotateY = (mouseX / rect.width) * 30;
    const rotateX = -(mouseY / rect.height) * 30 + 20;
    
    proteinStructure.style.transform = `perspective(1000px) rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
  });
</script>