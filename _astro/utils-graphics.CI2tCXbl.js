var t=Object.defineProperty,e=(e,i,n)=>((e,i,n)=>i in e?t(e,i,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[i]=n)(e,"symbol"!=typeof i?i+"":i,n);class i{constructor(t={}){e(this,"animations",new Map),e(this,"intersectionObserver"),e(this,"resizeObserver"),e(this,"frameCount",0),e(this,"lastTime",0),e(this,"frameRateHistory",[]),e(this,"config"),e(this,"metrics",{totalAnimations:0,runningAnimations:0,completedAnimations:0,droppedFrames:0,averageFrameTime:0,performanceScore:100}),this.config={respectReducedMotion:!0,maxConcurrentAnimations:10,frameRateThreshold:50,enablePerformanceMonitoring:!0,enableDebugMode:!1,...t},this.init()}init(){if(this.setupIntersectionObserver(),this.setupResizeObserver(),this.config.enablePerformanceMonitoring&&this.startPerformanceMonitoring(),this.config.respectReducedMotion){const t=window.matchMedia("(prefers-reduced-motion: reduce)");t.addEventListener("change",this.handleMotionPreferenceChange.bind(this)),t.matches&&this.pauseAllAnimations()}this.debugLog("AnimationController initialized")}register(t,e,i="load",n="medium"){this.animations.has(t)&&this.debugLog(`Animation ${t} already exists, updating...`);const s={id:t,element:e,type:i,priority:n,status:"idle"};this.animations.set(t,s),this.metrics.totalAnimations++,"scroll"===i&&this.intersectionObserver&&this.intersectionObserver.observe(e),this.debugLog(`Registered animation: ${t} (${i}, ${n})`)}animate(t,e,i={}){return new Promise((n,s)=>{const r=this.animations.get(t);if(!r)return void s(new Error(`Animation ${t} not registered`));if(this.shouldSkipAnimation())return this.debugLog(`Skipping animation ${t} due to reduced motion preference`),void n();if(this.metrics.runningAnimations>=this.config.maxConcurrentAnimations){if("low"===r.priority)return this.debugLog(`Skipping low-priority animation ${t} due to limit`),void n();this.cancelLowestPriorityAnimation()}const a=r.element.animate(e,{duration:600,easing:"cubic-bezier(0.2, 0.8, 0.2, 1)",...i});r.animation=a,r.status="running",r.startTime=performance.now(),r.duration="number"==typeof i.duration?i.duration:600,r.options=i,this.metrics.runningAnimations++,a.addEventListener("finish",()=>{r.status="completed",this.metrics.runningAnimations--,this.metrics.completedAnimations++,this.debugLog(`Animation ${t} completed`),n()}),a.addEventListener("cancel",()=>{r.status="cancelled",this.metrics.runningAnimations--,this.debugLog(`Animation ${t} cancelled`),s(new Error(`Animation ${t} was cancelled`))}),this.debugLog(`Started animation: ${t}`)})}pause(t){const e=this.animations.get(t);e?.animation&&"running"===e.status&&(e.animation.pause(),e.status="paused",this.metrics.runningAnimations--,this.debugLog(`Paused animation: ${t}`))}resume(t){const e=this.animations.get(t);e?.animation&&"paused"===e.status&&(e.animation.play(),e.status="running",this.metrics.runningAnimations++,this.debugLog(`Resumed animation: ${t}`))}cancel(t){const e=this.animations.get(t);e?.animation&&(e.animation.cancel(),e.status="cancelled",this.debugLog(`Cancelled animation: ${t}`))}pauseAllAnimations(){this.animations.forEach((t,e)=>{"running"===t.status&&this.pause(e)})}resumeAllAnimations(){this.animations.forEach((t,e)=>{"paused"===t.status&&this.resume(e)})}getState(t){return this.animations.get(t)}getMetrics(){return{...this.metrics}}onScroll(t,e,i,n={}){this.register(t,e,"scroll");const{threshold:s=.1,rootMargin:r="0px",...a}=n,o=new IntersectionObserver(n=>{n.forEach(n=>{n.isIntersecting&&n.target===e&&(this.animate(t,i,a),o.unobserve(e))})},{threshold:s,rootMargin:r});o.observe(e)}parallax(t,e,i=.5,n="low"){this.register(t,e,"parallax",n);let s=!1;const r=()=>{const t=window.pageYOffset,n=e.getBoundingClientRect(),r=n.top+t,a=n.height;if(t+window.innerHeight>r&&t<r+a){const n=(t-r)*i;e.style.transform=`translate3d(0, ${n}px, 0)`}s=!1};window.addEventListener("scroll",()=>{s||this.shouldSkipAnimation()||(requestAnimationFrame(r),s=!0)},{passive:!0})}magneticButton(t,e,i=.3,n="medium"){if(this.register(t,e,"hover",n),this.shouldSkipAnimation())return;let s=!1;e.addEventListener("mouseenter",()=>{s=!0,e.style.transition="transform 0.3s cubic-bezier(0.2, 0.8, 0.2, 1)"}),e.addEventListener("mousemove",t=>{if(!s)return;const n=e.getBoundingClientRect(),r=n.left+n.width/2,a=n.top+n.height/2,o=(t.clientX-r)*i,m=(t.clientY-a)*i;e.style.transform=`translate(${o}px, ${m}px) scale(1.05)`}),e.addEventListener("mouseleave",()=>{s=!1,e.style.transform=""})}stagger(t,e,i,n={}){const{staggerDelay:s=100,...r}=n,a=e.map((e,n)=>{const a=`${t}-${n}`;return this.register(a,e,"load","medium"),new Promise(t=>{setTimeout(()=>{this.animate(a,i,r).then(t)},n*s)})});return Promise.all(a)}setupIntersectionObserver(){this.intersectionObserver=new IntersectionObserver(t=>{t.forEach(t=>{const e=t.target.dataset.animationId;if(e&&t.isIntersecting){const t=this.animations.get(e);t&&"idle"===t.status&&this.debugLog(`Element ${e} entered viewport`)}})},{threshold:.1,rootMargin:"0px 0px -50px 0px"})}setupResizeObserver(){this.resizeObserver=new ResizeObserver(t=>{const e=[];this.animations.forEach((t,i)=>{"running"===t.status&&(this.pause(i),e.push(i))}),setTimeout(()=>{e.forEach(t=>this.resume(t))},150)}),this.resizeObserver.observe(document.body)}startPerformanceMonitoring(){const t=e=>{if(this.frameCount++,this.lastTime){const t=e-this.lastTime;this.frameRateHistory.push(1e3/t),this.frameRateHistory.length>60&&this.frameRateHistory.shift();const i=this.frameRateHistory.reduce((t,e)=>t+e,0)/this.frameRateHistory.length;this.metrics.averageFrameTime=t,i<this.config.frameRateThreshold&&this.metrics.droppedFrames++,this.metrics.performanceScore=Math.max(0,Math.min(100,2*i)),this.metrics.performanceScore<60&&this.metrics.runningAnimations>3&&this.pauseLowestPriorityAnimations()}this.lastTime=e,requestAnimationFrame(t)};requestAnimationFrame(t)}shouldSkipAnimation(){return!!this.config.respectReducedMotion&&window.matchMedia("(prefers-reduced-motion: reduce)").matches}cancelLowestPriorityAnimation(){let t=null;const e={low:0,medium:1,high:2};this.animations.forEach(i=>{"running"===i.status&&(!t||e[i.priority]<e[t.priority])&&(t=i)}),t&&this.cancel(t.id)}pauseLowestPriorityAnimations(){const t=Array.from(this.animations.values()).filter(t=>"running"===t.status&&"low"===t.priority);t.forEach(t=>this.pause(t.id)),this.debugLog(`Paused ${t.length} low-priority animations for performance`)}handleMotionPreferenceChange(t){t.matches?(this.pauseAllAnimations(),this.debugLog("Paused all animations due to reduced motion preference")):(this.resumeAllAnimations(),this.debugLog("Resumed animations due to motion preference change"))}debugLog(t){this.config.enableDebugMode}destroy(){this.pauseAllAnimations(),this.intersectionObserver?.disconnect(),this.resizeObserver?.disconnect(),this.animations.clear(),this.debugLog("AnimationController destroyed")}}let n=null;function s(t){return n||(n=new i(t)),n}const r={fadeIn:[{opacity:0,transform:"translateY(20px)"},{opacity:1,transform:"translateY(0)"}],slideUp:[{transform:"translateY(100px)",opacity:0},{transform:"translateY(0)",opacity:1}]};export{r as a,s as g};
