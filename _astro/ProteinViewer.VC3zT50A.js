import{c as n,a as e,r as t,b as o,m as r}from"./vendor-utils.zwXP0I8j.js";var i,a=Object.freeze,s=Object.defineProperty;const c=e("https://rrocap.github.io"),d=n(async(n,e,l)=>{const p=n.createAstro(c,e,l);p.self=d;const{pdbId:w}=p.props;return t(i||(i=a(s(u=["",'<div class="protein-viewer-container" data-astro-cid-u3ztrizo> <div',' style="width: 100%; height: 400px;" data-astro-cid-u3ztrizo></div> <p class="viewer-caption" data-astro-cid-u3ztrizo>',"</p> </div> <script>\n  // Load NGL Viewer library dynamically\n  function loadNGLViewer() {\n    return new Promise((resolve, reject) => {\n      if (window.NGL) {\n        resolve(window.NGL);\n        return;\n      }\n      const script = document.createElement('script');\n      script.src = 'https://cdn.jsdelivr.net/npm/ngl@2.0.0-dev.37/dist/ngl.min.js';\n      script.onload = () => resolve(window.NGL);\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n  }\n\n  document.addEventListener('DOMContentLoaded', async () => {\n    const pdbId = document.currentScript.closest('.protein-viewer-container').querySelector('.viewer-caption').textContent.split(': ')[1];\n    if (!pdbId || pdbId === 'Loading Protein...') return; // Don't load if no PDB ID\n\n    try {\n      const NGL = await loadNGLViewer();\n      const stage = new NGL.Stage(`ngl-viewer-${pdbId}`);\n\n      // Handle window resizing\n      window.addEventListener(\"resize\", function () {\n        stage.handleResize();\n      });\n\n      // Load the PDB structure\n      let proteinComponent; // Declare a variable to hold the protein component\n\n      stage.loadFile(`rcsb://${pdbId}`, { defaultRepresentation: true }).then(function (component) {\n        proteinComponent = component; // Assign the component to the variable\n        // Clear default representation and add custom ones for better styling\n        proteinComponent.removeAllRepresentations();\n\n        // Add a cartoon representation with a nice color scheme\n        proteinComponent.addRepresentation(\"cartoon\", { color: \"sstruc\", smoothSheet: true, aspectRatio: 3 });\n\n        // Add a ball and stick representation for side chains\n        proteinComponent.addRepresentation(\"ballandstick\", { sele: \"sidechain and not hetero\", color: \"element\" });\n\n        // Add a licorice representation for hetero atoms (e.g., ligands, ions)\n        proteinComponent.addRepresentation(\"licorice\", { sele: \"hetero\", color: \"element\" });\n\n        // Center and zoom to the loaded structure\n        proteinComponent.autoView();\n\n        // Add scroll-based rotation\n        const viewerContainer = document.querySelector('.protein-viewer-container');\n        let lastScrollY = window.scrollY;\n\n        window.addEventListener('scroll', () => {\n          if (!proteinComponent) return;\n\n          const currentScrollY = window.scrollY;\n          const scrollDelta = currentScrollY - lastScrollY;\n\n          // Get the bounding rectangle of the viewer container\n          const rect = viewerContainer.getBoundingClientRect();\n          // Check if the viewer is in the viewport\n          const inViewport = rect.top < window.innerHeight && rect.bottom > 0;\n\n          if (inViewport) {\n            // Adjust rotation speed as needed\n            const rotationSpeed = 0.005;\n            proteinComponent.rotateY(scrollDelta * rotationSpeed);\n          }\n\n          lastScrollY = currentScrollY;\n        });\n      });\n\n    } catch (error) {\n      // Failed to load NGL Viewer\n    }\n  });\n<\/script> "],"raw",{value:a(["",'<div class="protein-viewer-container" data-astro-cid-u3ztrizo> <div',' style="width: 100%; height: 400px;" data-astro-cid-u3ztrizo></div> <p class="viewer-caption" data-astro-cid-u3ztrizo>',"</p> </div> <script>\n  // Load NGL Viewer library dynamically\n  function loadNGLViewer() {\n    return new Promise((resolve, reject) => {\n      if (window.NGL) {\n        resolve(window.NGL);\n        return;\n      }\n      const script = document.createElement('script');\n      script.src = 'https://cdn.jsdelivr.net/npm/ngl@2.0.0-dev.37/dist/ngl.min.js';\n      script.onload = () => resolve(window.NGL);\n      script.onerror = reject;\n      document.head.appendChild(script);\n    });\n  }\n\n  document.addEventListener('DOMContentLoaded', async () => {\n    const pdbId = document.currentScript.closest('.protein-viewer-container').querySelector('.viewer-caption').textContent.split(': ')[1];\n    if (!pdbId || pdbId === 'Loading Protein...') return; // Don't load if no PDB ID\n\n    try {\n      const NGL = await loadNGLViewer();\n      const stage = new NGL.Stage(\\`ngl-viewer-\\${pdbId}\\`);\n\n      // Handle window resizing\n      window.addEventListener(\"resize\", function () {\n        stage.handleResize();\n      });\n\n      // Load the PDB structure\n      let proteinComponent; // Declare a variable to hold the protein component\n\n      stage.loadFile(\\`rcsb://\\${pdbId}\\`, { defaultRepresentation: true }).then(function (component) {\n        proteinComponent = component; // Assign the component to the variable\n        // Clear default representation and add custom ones for better styling\n        proteinComponent.removeAllRepresentations();\n\n        // Add a cartoon representation with a nice color scheme\n        proteinComponent.addRepresentation(\"cartoon\", { color: \"sstruc\", smoothSheet: true, aspectRatio: 3 });\n\n        // Add a ball and stick representation for side chains\n        proteinComponent.addRepresentation(\"ballandstick\", { sele: \"sidechain and not hetero\", color: \"element\" });\n\n        // Add a licorice representation for hetero atoms (e.g., ligands, ions)\n        proteinComponent.addRepresentation(\"licorice\", { sele: \"hetero\", color: \"element\" });\n\n        // Center and zoom to the loaded structure\n        proteinComponent.autoView();\n\n        // Add scroll-based rotation\n        const viewerContainer = document.querySelector('.protein-viewer-container');\n        let lastScrollY = window.scrollY;\n\n        window.addEventListener('scroll', () => {\n          if (!proteinComponent) return;\n\n          const currentScrollY = window.scrollY;\n          const scrollDelta = currentScrollY - lastScrollY;\n\n          // Get the bounding rectangle of the viewer container\n          const rect = viewerContainer.getBoundingClientRect();\n          // Check if the viewer is in the viewport\n          const inViewport = rect.top < window.innerHeight && rect.bottom > 0;\n\n          if (inViewport) {\n            // Adjust rotation speed as needed\n            const rotationSpeed = 0.005;\n            proteinComponent.rotateY(scrollDelta * rotationSpeed);\n          }\n\n          lastScrollY = currentScrollY;\n        });\n      });\n\n    } catch (error) {\n      // Failed to load NGL Viewer\n    }\n  });\n<\/script> "]||u.slice())}))),r(),o(`ngl-viewer-${w}`,"id"),w?`PDB: ${w}`:"Loading Protein...");var u},"/Users/ramon/projects/Portfolio/src/components/ProteinViewer.astro",void 0),l="/Users/ramon/projects/Portfolio/src/components/ProteinViewer.astro",p=void 0;export{d as default,l as file,p as url};
