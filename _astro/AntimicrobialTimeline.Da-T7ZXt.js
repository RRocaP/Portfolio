import{c as e,r as n,m as r}from"./vendor-utils.gse-eQoW.js";/* empty css                              */import"./vendor-react.ofrPMlDn.js";var t,i=Object.freeze,o=Object.defineProperty;const a=e(async(e,a,s)=>{return n(t||(t=i(o(c=["","<div id=\"antimicrobial-timeline-container\" class=\"visualization-wrapper\" data-astro-cid-sdq7ms27> <div id=\"antimicrobial-timeline-root\" class=\"timeline-loading\" data-astro-cid-sdq7ms27> <div class=\"loading-skeleton\" data-astro-cid-sdq7ms27> <div class=\"skeleton-pulse\" data-astro-cid-sdq7ms27></div> <p class=\"loading-text\" data-astro-cid-sdq7ms27>Loading timeline...</p> </div> </div> </div> <script type=\"module\">\n  // Lazy-hydrate the React timeline when it scrolls into view\n  const container = document.getElementById('antimicrobial-timeline-root');\n  if (container) {\n    const loadTimeline = async () => {\n      const [{ default: AntimicrobialResistanceTimeline }, React, ReactDOM] = await Promise.all([\n        import('./AntimicrobialResistanceTimeline.tsx'),\n        import('react'),\n        import('react-dom/client')\n      ]);\n      container.classList.remove('timeline-loading');\n      container.innerHTML = '';\n      \n      // Create error boundary wrapper\n      const ErrorBoundary = class extends React.Component {\n        constructor(props) {\n          super(props);\n          this.state = { hasError: false };\n        }\n        \n        static getDerivedStateFromError(error) {\n          return { hasError: true };\n        }\n        \n        render() {\n          if (this.state.hasError) {\n            return React.createElement('div', { \n              style: { \n                padding: '2rem', \n                textAlign: 'center',\n                color: 'var(--tertiary)'\n              }\n            }, 'Timeline temporarily unavailable');\n          }\n          return this.props.children;\n        }\n      };\n      \n      const root = ReactDOM.createRoot(container);\n      root.render(\n        React.createElement(ErrorBoundary, null,\n          React.createElement(AntimicrobialResistanceTimeline)\n        )\n      );\n    };\n\n    // Use IntersectionObserver to defer loading until visible\n    if ('IntersectionObserver' in window) {\n      const io = new IntersectionObserver((entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            io.disconnect();\n            loadTimeline();\n          }\n        });\n      }, { rootMargin: '200px 0px' });\n      io.observe(container);\n    } else {\n      // Fallback for very old browsers\n      loadTimeline();\n    }\n  }\n<\/script> "],"raw",{value:i(c.slice())}))),r());var c},"/Users/ramon/projects/Portfolio/src/components/AntimicrobialTimeline.astro",void 0),s="/Users/ramon/projects/Portfolio/src/components/AntimicrobialTimeline.astro",c=void 0;export{a as default,s as file,c as url};
