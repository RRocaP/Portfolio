class l{constructor(t){this.canvas=t,this.ctx=t.getContext("2d"),this.width=0,this.height=0,this.bacteria=[],this.peptides=[],this.particles=[],this.frame=0,this.init(),this.animate()}init(){this.resize(),window.addEventListener("resize",()=>this.resize());for(let t=0;t<5;t++){this.bacteria.push({x:Math.random()*this.width,y:Math.random()*this.height,radius:30+Math.random()*20,health:100,membrane:[],dying:!1,rotation:Math.random()*Math.PI*2,rotationSpeed:(Math.random()-.5)*.01});const h=this.bacteria[t];for(let a=0;a<32;a++){const i=a/32*Math.PI*2;h.membrane.push({angle:i,offset:0,targetOffset:0})}}for(let t=0;t<15;t++)this.peptides.push({x:Math.random()*this.width,y:Math.random()*this.height,vx:(Math.random()-.5)*2,vy:(Math.random()-.5)*2,size:4,attached:null,attachPoint:null,color:`hsla(0, 100%, ${50+Math.random()*20}%, 0.9)`})}resize(){const t=this.canvas.getBoundingClientRect();this.width=t.width,this.height=t.height,this.canvas.width=this.width,this.canvas.height=this.height}update(){for(this.frame++,this.peptides.forEach(t=>{if(!t.attached)t.x+=t.vx,t.y+=t.vy,(t.x<0||t.x>this.width)&&(t.vx*=-1),(t.y<0||t.y>this.height)&&(t.vy*=-1),this.bacteria.forEach(h=>{const a=t.x-h.x,i=t.y-h.y;if(Math.sqrt(a*a+i*i)<h.radius+10&&h.health>0){t.attached=h,t.attachPoint=Math.atan2(i,a);const r=Math.floor((t.attachPoint+Math.PI)/(Math.PI*2)*h.membrane.length);h.membrane[r].targetOffset=15;for(let s=-2;s<=2;s++){const e=(r+s+h.membrane.length)%h.membrane.length;h.membrane[e].targetOffset=10*(1-Math.abs(s)/3)}h.health-=.5}});else{const h=t.attached;t.x=h.x+Math.cos(t.attachPoint+h.rotation)*(h.radius+5),t.y=h.y+Math.sin(t.attachPoint+h.rotation)*(h.radius+5),Math.random()<.1&&this.particles.push({x:t.x,y:t.y,vx:(Math.random()-.5)*3,vy:(Math.random()-.5)*3,life:1,color:"rgba(220, 38, 38, 0.6)"})}}),this.bacteria.forEach(t=>{if(t.rotation+=t.rotationSpeed,t.membrane.forEach(h=>{h.offset+=(h.targetOffset-h.offset)*.1,h.targetOffset*=.95}),t.health<=0&&!t.dying){t.dying=!0;for(let h=0;h<20;h++)this.particles.push({x:t.x,y:t.y,vx:(Math.random()-.5)*5,vy:(Math.random()-.5)*5,life:1,color:`rgba(220, 38, 38, ${Math.random()*.5+.3})`})}t.dying&&(t.radius*=.95)}),this.particles=this.particles.filter(t=>(t.x+=t.vx,t.y+=t.vy,t.vx*=.98,t.vy*=.98,t.life-=.02,t.life>0)),this.bacteria=this.bacteria.filter(t=>t.radius>5);this.bacteria.length<5;){const t={x:Math.random()*this.width,y:Math.random()*this.height,radius:30+Math.random()*20,health:100,membrane:[],dying:!1,rotation:Math.random()*Math.PI*2,rotationSpeed:(Math.random()-.5)*.01};for(let h=0;h<32;h++){const a=h/32*Math.PI*2;t.membrane.push({angle:a,offset:0,targetOffset:0})}this.bacteria.push(t)}}draw(){this.ctx.fillStyle="rgba(10, 10, 10, 0.1)",this.ctx.fillRect(0,0,this.width,this.height),this.bacteria.forEach(t=>{this.ctx.save(),this.ctx.translate(t.x,t.y),this.ctx.rotate(t.rotation),this.ctx.beginPath(),t.membrane.forEach((a,i)=>{const n=t.radius+a.offset,r=Math.cos(a.angle)*n,s=Math.sin(a.angle)*n;i===0?this.ctx.moveTo(r,s):this.ctx.lineTo(r,s)}),this.ctx.closePath();const h=this.ctx.createRadialGradient(0,0,0,0,0,t.radius);h.addColorStop(0,`rgba(30, 30, 30, ${t.health/100*.8})`),h.addColorStop(1,`rgba(50, 50, 50, ${t.health/100*.4})`),this.ctx.fillStyle=h,this.ctx.fill(),this.ctx.strokeStyle=`rgba(255, 255, 255, ${t.health/100*.1})`,this.ctx.lineWidth=2,this.ctx.stroke(),this.ctx.beginPath(),this.ctx.arc(0,0,t.radius*.3,0,Math.PI*2),this.ctx.fillStyle=`rgba(20, 20, 20, ${t.health/100*.6})`,this.ctx.fill(),this.ctx.restore()}),this.peptides.forEach(t=>{this.ctx.beginPath(),this.ctx.arc(t.x,t.y,t.size,0,Math.PI*2),this.ctx.fillStyle=t.color,this.ctx.fill();const h=this.ctx.createRadialGradient(t.x,t.y,0,t.x,t.y,t.size*3);h.addColorStop(0,"rgba(220, 38, 38, 0.3)"),h.addColorStop(1,"transparent"),this.ctx.fillStyle=h,this.ctx.fillRect(t.x-t.size*3,t.y-t.size*3,t.size*6,t.size*6)}),this.particles.forEach(t=>{this.ctx.beginPath(),this.ctx.arc(t.x,t.y,2,0,Math.PI*2),this.ctx.fillStyle=t.color,this.ctx.globalAlpha=t.life,this.ctx.fill(),this.ctx.globalAlpha=1})}animate(){this.update(),this.draw(),requestAnimationFrame(()=>this.animate())}}document.addEventListener("DOMContentLoaded",()=>{const o=document.getElementById("amp-canvas");o&&new l(o)});
