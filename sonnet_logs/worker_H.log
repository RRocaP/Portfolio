I've successfully implemented the ThreeBackground.tsx component with all the requested features:

## Key Features Implemented:

**üé® Performance Optimized Three.js Background**
- Lazy-loaded Three.js module to reduce initial bundle size
- Custom shader material for GPU-optimized particle rendering
- Quality settings (low/med/high) with mobile-specific optimizations
- Proper resource disposal and memory management

**üéØ Interactive Elements**
- Mouse parallax effect with throttled 60fps updates
- Particle system with Catalan-inspired colors (red #DA291C, yellow #FFD93D)
- Gentle wave animations using shader uniforms
- Dynamic particle count based on device capabilities

**‚ôø Accessibility & Performance**
- Respects `prefers-reduced-motion` with static gradient fallback
- Mobile detection with reduced particle count and power-efficient rendering
- SSR-safe with dynamic imports and proper error handling
- ARIA labels and semantic HTML structure

**üéõÔ∏è Component Props**
- `enabled?: boolean` - Toggle component on/off
- `quality?: 'low' | 'med' | 'high'` - Performance quality settings
- `className?: string` - Custom styling support

**üîß Technical Optimizations**
- WebGL context with alpha transparency and conditional antialiasing
- Pixel ratio capping for performance (1.5x mobile, 2x desktop)
- RequestAnimationFrame-based throttling for mouse events
- Proper cleanup on component unmount with resource disposal

The component stays well under the 20KB limit (excluding Three.js which is lazy-loaded), provides graceful fallbacks for all accessibility scenarios, and integrates seamlessly with the existing portfolio design system.
