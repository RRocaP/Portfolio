name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        project: [chromium, firefox, webkit, mobile-chrome, mobile-safari]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps ${{ matrix.project }}

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.project }}
        env:
          CI: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.project }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Install axe-core
        run: npm install @axe-core/playwright

      - name: Build application
        run: npm run build

      - name: Run accessibility tests
        run: npx playwright test --project=accessibility
        env:
          CI: true

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  visual-regression:
    name: Visual Regression Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Run visual tests
        run: npx playwright test --project=visual
        env:
          CI: true

      - name: Upload visual test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: visual-regression-report
          path: |
            playwright-report/
            test-results/
            tests/e2e/**/*-actual.png
            tests/e2e/**/*-diff.png
          retention-days: 14

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Run performance tests
        run: npx playwright test --project=performance
        env:
          CI: true

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-report
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  mobile-tests:
    name: Mobile E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 25

    strategy:
      matrix:
        device: [mobile-chrome, mobile-safari, tablet-chrome]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Run mobile tests
        run: npx playwright test --project=${{ matrix.device }} tests/e2e/responsive.spec.ts tests/e2e/homepage.spec.ts
        env:
          CI: true

      - name: Upload mobile test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: mobile-report-${{ matrix.device }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

  lighthouse-tests:
    name: Lighthouse Performance
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start server
        run: npm run preview &
        env:
          CI: true

      - name: Wait for server
        run: npx wait-on http://localhost:4321 --timeout 60000

      - name: Run Lighthouse
        run: |
          npm install -g @lhci/cli
          lhci autorun --collect.url=http://localhost:4321 \
            --assert.assertions.categories:performance=0.85 \
            --assert.assertions.categories:accessibility=0.95 \
            --assert.assertions.categories:seo=0.90 \
            --assert.assertions.categories:best-practices=0.90 \
            --upload.target=temporary-public-storage
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs:
      [
        e2e-tests,
        accessibility-tests,
        visual-regression,
        performance-tests,
        mobile-tests,
      ]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create test summary
        run: |
          echo "# E2E Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Status" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Accessibility: ${{ needs.accessibility-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Visual Regression: ${{ needs.visual-regression.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Performance: ${{ needs.performance-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Mobile Tests: ${{ needs.mobile-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Reports" >> $GITHUB_STEP_SUMMARY
          echo "Test reports and screenshots are available in the artifacts section." >> $GITHUB_STEP_SUMMARY

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('E2E Test Results')
            );

            const body = `## 🧪 E2E Test Results

            | Test Suite | Status |
            |------------|--------|
            | E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅' || '❌' }} |
            | Accessibility | ${{ needs.accessibility-tests.result == 'success' && '✅' || '❌' }} |
            | Visual Regression | ${{ needs.visual-regression.result == 'success' && '✅' || '❌' }} |
            | Performance | ${{ needs.performance-tests.result == 'success' && '✅' || '❌' }} |
            | Mobile Tests | ${{ needs.mobile-tests.result == 'success' && '✅' || '❌' }} |

            📊 **Test Reports**: Check the artifacts section for detailed reports and screenshots.

            🔄 **Commit**: ${context.sha.substring(0, 7)}`;

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs:
      [e2e-tests, accessibility-tests, visual-regression, performance-tests]
    if: failure() && github.ref == 'refs/heads/main'

    steps:
      - name: Notify team
        run: |
          echo "E2E tests failed on main branch!"
          echo "Please check the test results and fix any issues."
          # Add Slack/email notification here if needed
